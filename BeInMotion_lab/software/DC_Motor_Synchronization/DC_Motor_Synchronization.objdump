
DC_Motor_Synchronization.elf:     file format elf32-littlenios2
DC_Motor_Synchronization.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000101c0

Program Header:
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00007890 memsz 0x00007aa8 flags rwx
    LOAD off    0x00009800 vaddr 0x00021800 paddr 0x00021800 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  00021800  00021800  00009800  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006e30  000101c0  000101c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000194  00016ff0  00016ff0  00007ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000072c  00017184  00017184  00008184  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000218  000178b0  000178b0  000088b0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000049  00000000  00000000  00009800  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000007b0  00000000  00000000  00009850  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000dbd  00000000  00000000  0000a000  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000cbe9  00000000  00000000  0000adbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003fb7  00000000  00000000  000179a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00009d6b  00000000  00000000  0001b95d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000eb4  00000000  00000000  000256c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000e76  00000000  00000000  0002657c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002658  00000000  00000000  000273f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00029a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000348  00000000  00000000  00029a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0002c111  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0002c114  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002c117  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002c118  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0002c119  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0002c11d  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0002c121  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0002c125  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0002c12e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0002c137  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000f  00000000  00000000  0002c140  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000020  00000000  00000000  0002c14f  2**0
                  CONTENTS, READONLY
 29 .jdi          00004e3c  00000000  00000000  0002c16f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00021800 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
000101c0 l    d  .text	00000000 .text
00016ff0 l    d  .rodata	00000000 .rodata
00017184 l    d  .rwdata	00000000 .rwdata
000178b0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000101f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 dc_motor_sync.c
00000000 l    df *ABS*	00000000 sls_fonts.c
00000000 l    df *ABS*	00000000 simple_graphics.c
0001791c l     O .bss	00000004 LCD_INTERFACE_0_BASE
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
000134f4 l     F .text	000001e4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00013ccc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001759c l     O .rwdata	0000002c jtag_uart
000175c8 l     O .rwdata	0000002c uart_0
00015340 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000155d0 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00015850 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
000159a0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00015c5c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00015cbc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00015d9c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00016190 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000162e0 l     F .text	000000f8 alt_file_locked
00016564 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00016c80 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 impure.c
0001779c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 lib2-divmod.c
00016e40 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00016f8c l     F .text	00000040 alt_sim_halt
0001521c g     F .text	0000006c alt_main
0001793c g     O .bss	00000100 alt_irq
000108c8 g     F .text	00000250 turn_right
0001787c g     O .rwdata	00000004 dc_m1_pwm_freq
00012240 g     F .text	000000f0 LCD_merge_colors
0001398c g     F .text	00000174 __divsf3
000178c8 g     O .bss	00000004 j
00017184 g     O .rwdata	00000415 cour10_font_array
00013b78 g     F .text	00000094 __fixsfsi
00012e8c g     F .text	000005f8 LCD_round_corner_points
00000000  w      *UND*	00000000 __errno
00021800 g     F .entry	00000000 __reset
000178cc g     O .bss	00000004 Err_m1
00017938 g     O .bss	00000004 errno
00017928 g     O .bss	00000004 alt_argv
0001f87c g       *ABS*	00000000 _gp
00015288 g     F .text	00000030 usleep
000136d8 g     F .text	00000070 __subsf3
00011c14 g     F .text	000000e8 LCD_print_char
0001761c g     O .rwdata	00000180 alt_fd_list
00016800 g     F .text	00000094 alt_find_dev
00010354 g     F .text	0000028c pid_controller_sw
00014594 g     F .text	000000f8 __floatsidf
00016268 g     F .text	00000078 alt_io_redirect
00016ff0 g       *ABS*	00000000 __DTOR_END__
00011994 g     F .text	0000016c LCD_print_string
00015428 g     F .text	00000104 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00016f7c g     F .text	00000008 __udivsi3
000178d0 g     O .bss	00000004 Up1_m2
00010d44 g     F .text	0000026c move_bwd
000178b0 g     O .bss	00000008 OutPreSat_m1
00017898 g     O .rwdata	00000004 alt_max_fd
00014f24 g     F .text	00000138 __unpack_d
000178d4 g     O .bss	00000004 dc_m1_pwm_duty
0001505c g     F .text	000001c0 alt_irq_register
00011498 g     F .text	00000450 LCD_init
0001415c g     F .text	00000074 __adddf3
000126ec g     F .text	00000444 LCD_circle_points
000178d8 g     O .bss	00000004 Ud_m2
000178ac g     O .rwdata	00000004 _global_impure_ptr
00019c40 g       *ABS*	00000000 __alt_exception_stack_pointer
00017ac8 g       *ABS*	00000000 __bss_end
00016098 g     F .text	000000f8 alt_iic_isr_register
000166d4 g     F .text	0000010c alt_tick
000178b8 g     O .bss	00000008 OutPreSat_m2
00010678 g     F .text	00000250 turn_left
00016050 g     F .text	00000048 alt_ic_irq_enabled
0001663c g     F .text	00000098 alt_alarm_stop
00017920 g     O .bss	00000004 alt_irq_active
000100f8 g     F .exceptions	000000c8 alt_irq_handler
000175f4 g     O .rwdata	00000028 alt_dev_null
000105e0 g     F .text	0000004c isr_dc_m2
000178c4 g     O .bss	00000004 Ui_m2
00014aa0 g     F .text	000000c8 __unpack_f
0001468c g     F .text	000000d8 __fixdfsi
00011e1c g     F .text	0000014c LCD_get_pixel
000101f8 g     F .text	0000015c pid_controller_hw
00017890 g     O .rwdata	00000008 alt_dev_list
00016f84 g     F .text	00000008 __umodsi3
00017ac8 g       *ABS*	00000000 end
00014940 g     F .text	00000160 __pack_f
000158b0 g     F .text	000000f0 altera_avalon_uart_write
000178dc g     O .bss	00000004 i
00016fec g       *ABS*	00000000 __CTOR_LIST__
00019440 g       *ABS*	00000000 __alt_stack_pointer
00015640 g     F .text	00000090 alt_avalon_timer_sc_init
00015728 g     F .text	00000058 altera_avalon_uart_write_fd
000148c0 g     F .text	00000080 __clzsi2
0001552c g     F .text	000000a4 altera_avalon_jtag_uart_write
000178e0 g     O .bss	00000004 Up_m2
00016c84 g     F .text	000001bc __call_exitprocs
000101c0 g     F .text	00000038 _start
000178e4 g     O .bss	00000001 wall_detect
00017930 g     O .bss	00000004 _alt_tick_rate
000178e8 g     O .bss	00000004 dc2_cmp
000178ec g     O .bss	00000004 Err_m2
00017934 g     O .bss	00000004 _alt_nticks
000152ec g     F .text	00000054 alt_sys_init
000125a4 g     F .text	00000148 LCD_draw_circle
00016b14 g     F .text	0000016c __register_exitproc
00014764 g     F .text	00000038 __mulsi3
00015378 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
000169b4 g     F .text	000000d0 alt_get_fd
00015a00 g     F .text	0000015c alt_busy_sleep
00016ab8 g     F .text	0000003c memcmp
00017ac8 g       *ABS*	00000000 __alt_stack_base
000178f0 g     O .bss	00000004 dc_m1
000141d0 g     F .text	000003c4 __muldf3
00017028 g     O .rodata	00000010 __thenan_sf
00016894 g     F .text	00000120 alt_find_file
00015ce8 g     F .text	000000b4 alt_dev_llist_insert
000178f4 g     O .bss	00000004 Up_m1
000178b0 g       *ABS*	00000000 __bss_start
00010fb0 g     F .text	000004e8 main
00010b18 g     F .text	0000022c move_fwd
0001792c g     O .bss	00000004 alt_envp
0001062c g     F .text	0000004c isr_dc_m1
000178f8 g     O .bss	00000004 dc_m2_pwm_duty
000153d0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00017884 g     O .rwdata	00000004 cour10_font
00017a3c g     O .bss	0000008c _atexit0
0001789c g     O .rwdata	00000004 alt_errno
00016ebc g     F .text	00000060 __divsi3
00017038 g     O .rodata	00000014 __thenan_df
00016ff0 g       *ABS*	00000000 __CTOR_END__
000137ac g     F .text	000001e0 __mulsf3
00016ff0 g       *ABS*	00000000 __DTOR_LIST__
000152b8 g     F .text	00000034 alt_irq_init
000165c4 g     F .text	00000078 alt_release_fd
0001704c g     O .rodata	00000100 __clz_tab
00011cfc g     F .text	00000120 LCD_set_pixel
00016a84 g     F .text	00000014 atexit
00011f68 g     F .text	00000178 LCD_paint_block
00013b00 g     F .text	00000078 __gesf2
000178a8 g     O .rwdata	00000004 _impure_ptr
00017924 g     O .bss	00000004 alt_argc
00015e60 g     F .text	00000064 _do_dtors
000178fc g     O .bss	00000004 edge
00010020 g       .exceptions	00000000 alt_irq_entry
00012b30 g     F .text	0000035c LCD_draw_round_corner_box
000120e0 g     F .text	00000160 LCD_draw_horiz_line
00017888 g     O .rwdata	00000008 alt_fs_list
00017880 g     O .rwdata	00000004 dc_m2_pwm_freq
00012330 g     F .text	00000274 LCD_draw_sloped_line
00017900 g     O .bss	00000004 Ud_m1
00015ec4 g     F .text	00000050 alt_ic_isr_register
000178b0 g       *ABS*	00000000 _edata
000156d0 g     F .text	00000058 altera_avalon_uart_read_fd
00017ac8 g       *ABS*	00000000 _end
00015fb0 g     F .text	000000a0 alt_ic_irq_disable
000167e0 g     F .text	00000020 altera_nios2_qsys_irq_init
00016a98 g     F .text	00000020 exit
00013c0c g     F .text	000000c0 __floatunsisf
00017904 g     O .bss	00000004 Out_pwm2
00016f1c g     F .text	00000060 __modsi3
00017908 g     O .bss	00000004 dc1_cmp
00019440 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
0001790c g     O .bss	00000004 Up1_m1
00010000 g       *ABS*	00000000 __alt_mem_onchip_ram
00013484 g     F .text	00000070 __fixunssfsi
00014b68 g     F .text	000000a8 __fpcmp_parts_f
00016fcc g     F .text	00000020 _exit
0001479c g     F .text	00000124 __muldi3
00016af4 g     F .text	00000020 strlen
00017910 g     O .bss	00000004 Out_pwm1
000163d8 g     F .text	0000018c open
00015f14 g     F .text	0000009c alt_ic_irq_enable
00021800 g       *ABS*	00000000 __alt_mem_epcs
00015780 g     F .text	000000d0 altera_avalon_uart_read
00011b00 g     F .text	00000114 LCD_draw_box
000140dc g     F .text	00000080 __subdf3
00017914 g     O .bss	00000004 dc_m2
000178a0 g     O .rwdata	00000008 alt_alarm_list
00015dfc g     F .text	00000064 _do_ctors
00015b5c g     F .text	00000100 close
00013748 g     F .text	00000064 __addsf3
000118e8 g     F .text	000000ac LCD_draw_line
00014c10 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00017918 g     O .bss	00000001 table_edge
000178c0 g     O .bss	00000004 Ui_m1



Disassembly of section .exceptions:

00010020 <alt_exception>:

#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        movhi et, %hiadj(__alt_exception_stack_pointer - 80)
   10020:	060000b4 	movhi	et,2
        addi  et, et, %lo(__alt_exception_stack_pointer - 80) 
   10024:	c626fc04 	addi	et,et,-25616
        stw   sp, 76(et)
   10028:	c6c01315 	stw	sp,76(et)
        mov   sp, et
   1002c:	c037883a 	mov	sp,et

#endif

#endif

        stw   ra,  0(sp)
   10030:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
   10034:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   10038:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   1003c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10040:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10044:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   10048:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   1004c:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
   10050:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
   10054:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   10058:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   1005c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10060:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10064:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   10068:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   1006c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10070:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10074:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   10078:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   1007c:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10080:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10084:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   10088:	10000326 	beq	r2,zero,10098 <alt_exception+0x78>
        beq   r4, zero, .Lnot_irq
   1008c:	20000226 	beq	r4,zero,10098 <alt_exception+0x78>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10090:	00100f80 	call	100f8 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10094:	00000306 	br	100a4 <alt_exception+0x84>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   10098:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   1009c:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   100a0:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100a8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100ac:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100b8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100bc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100c8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100cc:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
   100d0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100d8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100dc:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100e8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100ec:	dbc01017 	ldw	r15,64(sp)
#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   sp,  76(sp)
   100f0:	dec01317 	ldw	sp,76(sp)

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f4:	ef80083a 	eret

000100f8 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100f8:	defff904 	addi	sp,sp,-28
   100fc:	dfc00615 	stw	ra,24(sp)
   10100:	df000515 	stw	fp,20(sp)
   10104:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0005313a 	rdctl	r2,ipending
   1010c:	e0bffc15 	stw	r2,-16(fp)

  return active;
   10110:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   10114:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   10118:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   1011c:	00800044 	movi	r2,1
   10120:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   10124:	e0ffff17 	ldw	r3,-4(fp)
   10128:	e0bffe17 	ldw	r2,-8(fp)
   1012c:	1884703a 	and	r2,r3,r2
   10130:	1005003a 	cmpeq	r2,r2,zero
   10134:	1000161e 	bne	r2,zero,10190 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   10138:	e0bffd17 	ldw	r2,-12(fp)
   1013c:	00c00074 	movhi	r3,1
   10140:	18de4f04 	addi	r3,r3,31036
   10144:	100490fa 	slli	r2,r2,3
   10148:	10c5883a 	add	r2,r2,r3
   1014c:	11400017 	ldw	r5,0(r2)
   10150:	e0bffd17 	ldw	r2,-12(fp)
   10154:	00c00074 	movhi	r3,1
   10158:	18de4f04 	addi	r3,r3,31036
   1015c:	100490fa 	slli	r2,r2,3
   10160:	10c5883a 	add	r2,r2,r3
   10164:	10800104 	addi	r2,r2,4
   10168:	11000017 	ldw	r4,0(r2)
   1016c:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10170:	0005313a 	rdctl	r2,ipending
   10174:	e0bffb15 	stw	r2,-20(fp)

  return active;
   10178:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   1017c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   10180:	e0bfff17 	ldw	r2,-4(fp)
   10184:	1004c03a 	cmpne	r2,r2,zero
   10188:	103fe31e 	bne	r2,zero,10118 <alt_irq_handler+0x20>
   1018c:	00000706 	br	101ac <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10190:	e0bffe17 	ldw	r2,-8(fp)
   10194:	1085883a 	add	r2,r2,r2
   10198:	e0bffe15 	stw	r2,-8(fp)
      i++;
   1019c:	e0bffd17 	ldw	r2,-12(fp)
   101a0:	10800044 	addi	r2,r2,1
   101a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a8:	003fde06 	br	10124 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   101ac:	e037883a 	mov	sp,fp
   101b0:	dfc00117 	ldw	ra,4(sp)
   101b4:	df000017 	ldw	fp,0(sp)
   101b8:	dec00204 	addi	sp,sp,8
   101bc:	f800283a 	ret

Disassembly of section .text:

000101c0 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   101c0:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   101c4:	dee51014 	ori	sp,sp,37952

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   101c8:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   101cc:	d6be1f14 	ori	gp,gp,63612
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   101d0:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   101d4:	109e2c14 	ori	r2,r2,30896

    movhi r3, %hi(__bss_end)
   101d8:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   101dc:	18deb214 	ori	r3,r3,31432

    beq r2, r3, 1f
   101e0:	10c00326 	beq	r2,r3,101f0 <_start+0x30>

0:
    stw zero, (r2)
   101e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ec:	10fffd36 	bltu	r2,r3,101e4 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101f0:	001521c0 	call	1521c <alt_main>

000101f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101f4:	003fff06 	br	101f4 <alt_after_alt_main>

000101f8 <pid_controller_hw>:
int Out_pwm1,Out_pwm2;
int i,j;

//------------------------------- PID Hardware-Software Functions -----------------------//
void pid_controller_hw()
{
   101f8:	deffff04 	addi	sp,sp,-4
   101fc:	df000015 	stw	fp,0(sp)
   10200:	d839883a 	mov	fp,sp
    IOWR(PID_CON_M1_BASE,0x04,dc_m1);        //Feedback
   10204:	d0a01d17 	ldw	r2,-32652(gp)
   10208:	1007883a 	mov	r3,r2
   1020c:	00800404 	movi	r2,16
   10210:	10c00035 	stwio	r3,0(r2)
	IOWR(PID_CON_M2_BASE,0x04,dc_m2);
   10214:	d0a02617 	ldw	r2,-32616(gp)
   10218:	1007883a 	mov	r3,r2
   1021c:	00800c04 	movi	r2,48
   10220:	10c00035 	stwio	r3,0(r2)

	IOWR(PID_CON_M1_BASE,0x05,1);           // PID enable
   10224:	00c00504 	movi	r3,20
   10228:	00800044 	movi	r2,1
   1022c:	18800035 	stwio	r2,0(r3)
	IOWR(PID_CON_M2_BASE,0x05,1);
   10230:	00c00d04 	movi	r3,52
   10234:	00800044 	movi	r2,1
   10238:	18800035 	stwio	r2,0(r3)

	while(IORD(PID_CON_M1_BASE,0x07) != 1);
   1023c:	00800704 	movi	r2,28
   10240:	10800037 	ldwio	r2,0(r2)
   10244:	10800058 	cmpnei	r2,r2,1
   10248:	103ffc1e 	bne	r2,zero,1023c <pid_controller_hw+0x44>

	OutPreSat_m1[0]=OutPreSat_m1[1];
   1024c:	00800074 	movhi	r2,1
   10250:	109e2d04 	addi	r2,r2,30900
   10254:	10800017 	ldw	r2,0(r2)
   10258:	d0a00d15 	stw	r2,-32716(gp)
	OutPreSat_m1[1]=IORD(PID_CON_M1_BASE,0x06);
   1025c:	00800604 	movi	r2,24
   10260:	10c00037 	ldwio	r3,0(r2)
   10264:	00800074 	movhi	r2,1
   10268:	109e2d04 	addi	r2,r2,30900
   1026c:	10c00015 	stw	r3,0(r2)

	OutPreSat_m2[0]=OutPreSat_m2[1];
   10270:	00800074 	movhi	r2,1
   10274:	109e2f04 	addi	r2,r2,30908
   10278:	10800017 	ldw	r2,0(r2)
   1027c:	d0a00f15 	stw	r2,-32708(gp)
	OutPreSat_m2[1]=IORD(PID_CON_M2_BASE,0x06);
   10280:	00800e04 	movi	r2,56
   10284:	10c00037 	ldwio	r3,0(r2)
   10288:	00800074 	movhi	r2,1
   1028c:	109e2f04 	addi	r2,r2,30908
   10290:	10c00015 	stw	r3,0(r2)

	Out_pwm1 = Out_pwm1 - (OutPreSat_m1[1] - OutPreSat_m1[0]);
   10294:	d1202517 	ldw	r4,-32620(gp)
   10298:	00800074 	movhi	r2,1
   1029c:	109e2d04 	addi	r2,r2,30900
   102a0:	10c00017 	ldw	r3,0(r2)
   102a4:	d0a00d17 	ldw	r2,-32716(gp)
   102a8:	1885c83a 	sub	r2,r3,r2
   102ac:	2085c83a 	sub	r2,r4,r2
   102b0:	d0a02515 	stw	r2,-32620(gp)
	Out_pwm2 = Out_pwm2 - (OutPreSat_m2[1] - OutPreSat_m2[0]);
   102b4:	d1202217 	ldw	r4,-32632(gp)
   102b8:	00800074 	movhi	r2,1
   102bc:	109e2f04 	addi	r2,r2,30908
   102c0:	10c00017 	ldw	r3,0(r2)
   102c4:	d0a00f17 	ldw	r2,-32708(gp)
   102c8:	1885c83a 	sub	r2,r3,r2
   102cc:	2085c83a 	sub	r2,r4,r2
   102d0:	d0a02215 	stw	r2,-32632(gp)

    if(Out_pwm1 > OutMax)
   102d4:	d0e02517 	ldw	r3,-32620(gp)
   102d8:	00bfffd4 	movui	r2,65535
   102dc:	10c0030e 	bge	r2,r3,102ec <pid_controller_hw+0xf4>
		Out_pwm1 = OutMax;
   102e0:	00bfffd4 	movui	r2,65535
   102e4:	d0a02515 	stw	r2,-32620(gp)
   102e8:	00000406 	br	102fc <pid_controller_hw+0x104>
	else if(Out_pwm1 < OutMin)
   102ec:	d0a02517 	ldw	r2,-32620(gp)
   102f0:	1004403a 	cmpge	r2,r2,zero
   102f4:	1000011e 	bne	r2,zero,102fc <pid_controller_hw+0x104>
		Out_pwm1 = OutMin;
   102f8:	d0202515 	stw	zero,-32620(gp)

	if(Out_pwm2 > OutMax)
   102fc:	d0e02217 	ldw	r3,-32632(gp)
   10300:	00bfffd4 	movui	r2,65535
   10304:	10c0030e 	bge	r2,r3,10314 <pid_controller_hw+0x11c>
		Out_pwm2 = OutMax;
   10308:	00bfffd4 	movui	r2,65535
   1030c:	d0a02215 	stw	r2,-32632(gp)
   10310:	00000406 	br	10324 <pid_controller_hw+0x12c>
	else if(Out_pwm2 < OutMin)
   10314:	d0a02217 	ldw	r2,-32632(gp)
   10318:	1004403a 	cmpge	r2,r2,zero
   1031c:	1000011e 	bne	r2,zero,10324 <pid_controller_hw+0x12c>
		Out_pwm2 = OutMin;
   10320:	d0202215 	stw	zero,-32632(gp)

    IOWR(DC1_PWM1_BASE+0x04,0,Out_pwm1);
   10324:	d0e02517 	ldw	r3,-32620(gp)
   10328:	008000b4 	movhi	r2,2
   1032c:	10885104 	addi	r2,r2,8516
   10330:	10c00035 	stwio	r3,0(r2)
    IOWR(DC2_PWM1_BASE+0x04,0,Out_pwm2);
   10334:	d0e02217 	ldw	r3,-32632(gp)
   10338:	008000b4 	movhi	r2,2
   1033c:	10885504 	addi	r2,r2,8532
   10340:	10c00035 	stwio	r3,0(r2)
}
   10344:	e037883a 	mov	sp,fp
   10348:	df000017 	ldw	fp,0(sp)
   1034c:	dec00104 	addi	sp,sp,4
   10350:	f800283a 	ret

00010354 <pid_controller_sw>:

void pid_controller_sw()
{
   10354:	defffc04 	addi	sp,sp,-16
   10358:	dfc00315 	stw	ra,12(sp)
   1035c:	df000215 	stw	fp,8(sp)
   10360:	dc400115 	stw	r17,4(sp)
   10364:	dc000015 	stw	r16,0(sp)
   10368:	d839883a 	mov	fp,sp
	Err_m1 = DC_M1_COUNT_REF - dc_m1;
   1036c:	d0e01d17 	ldw	r3,-32652(gp)
   10370:	00801904 	movi	r2,100
   10374:	10c5c83a 	sub	r2,r2,r3
   10378:	d0a01415 	stw	r2,-32688(gp)
    Err_m2 = DC_M2_COUNT_REF - dc_m2;
   1037c:	d0e02617 	ldw	r3,-32616(gp)
   10380:	00801904 	movi	r2,100
   10384:	10c5c83a 	sub	r2,r2,r3
   10388:	d0a01c15 	stw	r2,-32656(gp)

    Up_m1 = dc_m1_Kp * Err_m1;            //P Controller
   1038c:	d1201417 	ldw	r4,-32688(gp)
   10390:	01400184 	movi	r5,6
   10394:	00147640 	call	14764 <__mulsi3>
   10398:	d0a01e15 	stw	r2,-32648(gp)
    Up_m2 = dc_m2_Kp * Err_m2;
   1039c:	d1201c17 	ldw	r4,-32656(gp)
   103a0:	01400184 	movi	r5,6
   103a4:	00147640 	call	14764 <__mulsi3>
   103a8:	d0a01915 	stw	r2,-32668(gp)

    Ui_m1 = Ui_m1 + dc_m1_Ki * Up_m1;     //I Controller
   103ac:	d1201117 	ldw	r4,-32700(gp)
   103b0:	00145940 	call	14594 <__floatsidf>
   103b4:	1021883a 	mov	r16,r2
   103b8:	1823883a 	mov	r17,r3
   103bc:	d1201e17 	ldw	r4,-32648(gp)
   103c0:	00145940 	call	14594 <__floatsidf>
   103c4:	100b883a 	mov	r5,r2
   103c8:	180d883a 	mov	r6,r3
   103cc:	2809883a 	mov	r4,r5
   103d0:	300b883a 	mov	r5,r6
   103d4:	000d883a 	mov	r6,zero
   103d8:	01cff834 	movhi	r7,16352
   103dc:	00141d00 	call	141d0 <__muldf3>
   103e0:	1009883a 	mov	r4,r2
   103e4:	180b883a 	mov	r5,r3
   103e8:	2005883a 	mov	r2,r4
   103ec:	2807883a 	mov	r3,r5
   103f0:	8009883a 	mov	r4,r16
   103f4:	880b883a 	mov	r5,r17
   103f8:	100d883a 	mov	r6,r2
   103fc:	180f883a 	mov	r7,r3
   10400:	001415c0 	call	1415c <__adddf3>
   10404:	1009883a 	mov	r4,r2
   10408:	180b883a 	mov	r5,r3
   1040c:	2005883a 	mov	r2,r4
   10410:	2807883a 	mov	r3,r5
   10414:	1009883a 	mov	r4,r2
   10418:	180b883a 	mov	r5,r3
   1041c:	001468c0 	call	1468c <__fixdfsi>
   10420:	d0a01115 	stw	r2,-32700(gp)
    Ui_m2 = Ui_m2 + dc_m2_Ki * Up_m2;
   10424:	d1201217 	ldw	r4,-32696(gp)
   10428:	00145940 	call	14594 <__floatsidf>
   1042c:	1021883a 	mov	r16,r2
   10430:	1823883a 	mov	r17,r3
   10434:	d1201917 	ldw	r4,-32668(gp)
   10438:	00145940 	call	14594 <__floatsidf>
   1043c:	100b883a 	mov	r5,r2
   10440:	180d883a 	mov	r6,r3
   10444:	2809883a 	mov	r4,r5
   10448:	300b883a 	mov	r5,r6
   1044c:	000d883a 	mov	r6,zero
   10450:	01cff834 	movhi	r7,16352
   10454:	00141d00 	call	141d0 <__muldf3>
   10458:	1009883a 	mov	r4,r2
   1045c:	180b883a 	mov	r5,r3
   10460:	2005883a 	mov	r2,r4
   10464:	2807883a 	mov	r3,r5
   10468:	8009883a 	mov	r4,r16
   1046c:	880b883a 	mov	r5,r17
   10470:	100d883a 	mov	r6,r2
   10474:	180f883a 	mov	r7,r3
   10478:	001415c0 	call	1415c <__adddf3>
   1047c:	1009883a 	mov	r4,r2
   10480:	180b883a 	mov	r5,r3
   10484:	2005883a 	mov	r2,r4
   10488:	2807883a 	mov	r3,r5
   1048c:	1009883a 	mov	r4,r2
   10490:	180b883a 	mov	r5,r3
   10494:	001468c0 	call	1468c <__fixdfsi>
   10498:	d0a01215 	stw	r2,-32696(gp)

    Ud_m1 = dc_m1_Kd * (Up_m1 - Up1_m1);  //D Controller
   1049c:	d0202115 	stw	zero,-32636(gp)
    Ud_m2 = dc_m2_Kd * (Up_m2 - Up1_m2);
   104a0:	d0201715 	stw	zero,-32676(gp)

    Up1_m1 =Up_m1;
   104a4:	d0a01e17 	ldw	r2,-32648(gp)
   104a8:	d0a02415 	stw	r2,-32624(gp)
    Up1_m2 =Up_m2;
   104ac:	d0a01917 	ldw	r2,-32668(gp)
   104b0:	d0a01515 	stw	r2,-32684(gp)

    OutPreSat_m1[0] = OutPreSat_m1[1];
   104b4:	00800074 	movhi	r2,1
   104b8:	109e2d04 	addi	r2,r2,30900
   104bc:	10800017 	ldw	r2,0(r2)
   104c0:	d0a00d15 	stw	r2,-32716(gp)
    OutPreSat_m1[1] = Up_m1 + Ui_m1 + Ud_m1;
   104c4:	d0e01e17 	ldw	r3,-32648(gp)
   104c8:	d0a01117 	ldw	r2,-32700(gp)
   104cc:	1887883a 	add	r3,r3,r2
   104d0:	d0a02117 	ldw	r2,-32636(gp)
   104d4:	1887883a 	add	r3,r3,r2
   104d8:	00800074 	movhi	r2,1
   104dc:	109e2d04 	addi	r2,r2,30900
   104e0:	10c00015 	stw	r3,0(r2)

    OutPreSat_m2[0] = OutPreSat_m2[1];
   104e4:	00800074 	movhi	r2,1
   104e8:	109e2f04 	addi	r2,r2,30908
   104ec:	10800017 	ldw	r2,0(r2)
   104f0:	d0a00f15 	stw	r2,-32708(gp)
    OutPreSat_m2[1] = Up_m2 + Ui_m2 + Ud_m2;
   104f4:	d0e01917 	ldw	r3,-32668(gp)
   104f8:	d0a01217 	ldw	r2,-32696(gp)
   104fc:	1887883a 	add	r3,r3,r2
   10500:	d0a01717 	ldw	r2,-32676(gp)
   10504:	1887883a 	add	r3,r3,r2
   10508:	00800074 	movhi	r2,1
   1050c:	109e2f04 	addi	r2,r2,30908
   10510:	10c00015 	stw	r3,0(r2)

    Out_pwm1 = Out_pwm1 - ( OutPreSat_m1[1] - OutPreSat_m1[0]);
   10514:	d1202517 	ldw	r4,-32620(gp)
   10518:	00800074 	movhi	r2,1
   1051c:	109e2d04 	addi	r2,r2,30900
   10520:	10c00017 	ldw	r3,0(r2)
   10524:	d0a00d17 	ldw	r2,-32716(gp)
   10528:	1885c83a 	sub	r2,r3,r2
   1052c:	2085c83a 	sub	r2,r4,r2
   10530:	d0a02515 	stw	r2,-32620(gp)
    Out_pwm2 = Out_pwm2 - ( OutPreSat_m2[1] - OutPreSat_m2[0]);
   10534:	d1202217 	ldw	r4,-32632(gp)
   10538:	00800074 	movhi	r2,1
   1053c:	109e2f04 	addi	r2,r2,30908
   10540:	10c00017 	ldw	r3,0(r2)
   10544:	d0a00f17 	ldw	r2,-32708(gp)
   10548:	1885c83a 	sub	r2,r3,r2
   1054c:	2085c83a 	sub	r2,r4,r2
   10550:	d0a02215 	stw	r2,-32632(gp)

    if (Out_pwm1 > OutMax)
   10554:	d0e02517 	ldw	r3,-32620(gp)
   10558:	00bfffd4 	movui	r2,65535
   1055c:	10c0030e 	bge	r2,r3,1056c <pid_controller_sw+0x218>
         Out_pwm1 =  OutMax;
   10560:	00bfffd4 	movui	r2,65535
   10564:	d0a02515 	stw	r2,-32620(gp)
   10568:	00000406 	br	1057c <pid_controller_sw+0x228>
    else if (Out_pwm1 < OutMin)
   1056c:	d0a02517 	ldw	r2,-32620(gp)
   10570:	1004403a 	cmpge	r2,r2,zero
   10574:	1000011e 	bne	r2,zero,1057c <pid_controller_sw+0x228>
         Out_pwm1 =  OutMin;
   10578:	d0202515 	stw	zero,-32620(gp)

    if (Out_pwm2 > OutMax)
   1057c:	d0e02217 	ldw	r3,-32632(gp)
   10580:	00bfffd4 	movui	r2,65535
   10584:	10c0030e 	bge	r2,r3,10594 <pid_controller_sw+0x240>
         Out_pwm2 =  OutMax;
   10588:	00bfffd4 	movui	r2,65535
   1058c:	d0a02215 	stw	r2,-32632(gp)
   10590:	00000406 	br	105a4 <pid_controller_sw+0x250>
    else if (Out_pwm2 <OutMin)
   10594:	d0a02217 	ldw	r2,-32632(gp)
   10598:	1004403a 	cmpge	r2,r2,zero
   1059c:	1000011e 	bne	r2,zero,105a4 <pid_controller_sw+0x250>
         Out_pwm2 =  OutMin;
   105a0:	d0202215 	stw	zero,-32632(gp)

    IOWR(DC1_PWM1_BASE+0x04,0,Out_pwm1);
   105a4:	d0e02517 	ldw	r3,-32620(gp)
   105a8:	008000b4 	movhi	r2,2
   105ac:	10885104 	addi	r2,r2,8516
   105b0:	10c00035 	stwio	r3,0(r2)
    IOWR(DC2_PWM1_BASE+0x04,0,Out_pwm2);
   105b4:	d0e02217 	ldw	r3,-32632(gp)
   105b8:	008000b4 	movhi	r2,2
   105bc:	10885504 	addi	r2,r2,8532
   105c0:	10c00035 	stwio	r3,0(r2)
}
   105c4:	e037883a 	mov	sp,fp
   105c8:	dfc00317 	ldw	ra,12(sp)
   105cc:	df000217 	ldw	fp,8(sp)
   105d0:	dc400117 	ldw	r17,4(sp)
   105d4:	dc000017 	ldw	r16,0(sp)
   105d8:	dec00404 	addi	sp,sp,16
   105dc:	f800283a 	ret

000105e0 <isr_dc_m2>:
//-------------------------- ISRs for the motors -----------------------------------------//
void isr_dc_m2(void *context, alt_u32 id)
{
   105e0:	defffd04 	addi	sp,sp,-12
   105e4:	df000215 	stw	fp,8(sp)
   105e8:	df000204 	addi	fp,sp,8
   105ec:	e13ffe15 	stw	r4,-8(fp)
   105f0:	e17fff15 	stw	r5,-4(fp)
  IOWR(DC2_PWM2_BASE+0x08,0,0);
   105f4:	008000b4 	movhi	r2,2
   105f8:	10884e04 	addi	r2,r2,8504
   105fc:	10000035 	stwio	zero,0(r2)
  IOWR(DC2_PWM1_BASE+0x08,0,0);
   10600:	008000b4 	movhi	r2,2
   10604:	10885604 	addi	r2,r2,8536
   10608:	10000035 	stwio	zero,0(r2)
  IOWR(IR_RX2_BASE,0,0x0);
   1060c:	008000b4 	movhi	r2,2
   10610:	10885c04 	addi	r2,r2,8560
   10614:	10000035 	stwio	zero,0(r2)
  dc2_cmp = 0;
   10618:	d0201b15 	stw	zero,-32660(gp)
 }
   1061c:	e037883a 	mov	sp,fp
   10620:	df000017 	ldw	fp,0(sp)
   10624:	dec00104 	addi	sp,sp,4
   10628:	f800283a 	ret

0001062c <isr_dc_m1>:
void isr_dc_m1(void *context, alt_u32 id)
{
   1062c:	defffd04 	addi	sp,sp,-12
   10630:	df000215 	stw	fp,8(sp)
   10634:	df000204 	addi	fp,sp,8
   10638:	e13ffe15 	stw	r4,-8(fp)
   1063c:	e17fff15 	stw	r5,-4(fp)
  IOWR(DC1_PWM2_BASE+0x08,0,0);
   10640:	008000b4 	movhi	r2,2
   10644:	10884a04 	addi	r2,r2,8488
   10648:	10000035 	stwio	zero,0(r2)
  IOWR(DC1_PWM1_BASE+0x08,0,0);
   1064c:	008000b4 	movhi	r2,2
   10650:	10885204 	addi	r2,r2,8520
   10654:	10000035 	stwio	zero,0(r2)
  IOWR(IR_RX1_BASE,0,0x0);
   10658:	008000b4 	movhi	r2,2
   1065c:	10885a04 	addi	r2,r2,8552
   10660:	10000035 	stwio	zero,0(r2)
  dc1_cmp = 0;
   10664:	d0202315 	stw	zero,-32628(gp)
}
   10668:	e037883a 	mov	sp,fp
   1066c:	df000017 	ldw	fp,0(sp)
   10670:	dec00104 	addi	sp,sp,4
   10674:	f800283a 	ret

00010678 <turn_left>:
//------------------------ Direction (left,right,forward,backward) Functions ---------------------------//
int turn_left()
{
   10678:	defffb04 	addi	sp,sp,-20
   1067c:	dfc00415 	stw	ra,16(sp)
   10680:	df000315 	stw	fp,12(sp)
   10684:	df000304 	addi	fp,sp,12
    int dc_m1_pwm_duty = dc_m1_pwm_freq/4;
   10688:	d0a00017 	ldw	r2,-32768(gp)
   1068c:	1004d0ba 	srli	r2,r2,2
   10690:	e0bffe15 	stw	r2,-8(fp)
    int dc_m2_pwm_duty = dc_m2_pwm_freq/4;
   10694:	d0a00117 	ldw	r2,-32764(gp)
   10698:	1004d0ba 	srli	r2,r2,2
   1069c:	e0bffd15 	stw	r2,-12(fp)

    dc1_cmp = 1;
   106a0:	00800044 	movi	r2,1
   106a4:	d0a02315 	stw	r2,-32628(gp)
    dc2_cmp = 1;
   106a8:	00800044 	movi	r2,1
   106ac:	d0a01b15 	stw	r2,-32660(gp)

    IOWR(IR_RX2_BASE,0x00,0);
   106b0:	008000b4 	movhi	r2,2
   106b4:	10885c04 	addi	r2,r2,8560
   106b8:	10000035 	stwio	zero,0(r2)
    IOWR(IR_RX1_BASE,0x00,0);
   106bc:	008000b4 	movhi	r2,2
   106c0:	10885a04 	addi	r2,r2,8552
   106c4:	10000035 	stwio	zero,0(r2)
    IOWR(DC2_PWM2_BASE+0x08,0,0);
   106c8:	008000b4 	movhi	r2,2
   106cc:	10884e04 	addi	r2,r2,8504
   106d0:	10000035 	stwio	zero,0(r2)
    IOWR(DC1_PWM1_BASE+0x08,0,0);
   106d4:	008000b4 	movhi	r2,2
   106d8:	10885204 	addi	r2,r2,8520
   106dc:	10000035 	stwio	zero,0(r2)

    IOWR(DC2_PWM1_BASE,0,dc_m2_pwm_freq);
   106e0:	d0a00117 	ldw	r2,-32764(gp)
   106e4:	1007883a 	mov	r3,r2
   106e8:	008000b4 	movhi	r2,2
   106ec:	10885404 	addi	r2,r2,8528
   106f0:	10c00035 	stwio	r3,0(r2)
    IOWR(DC2_PWM1_BASE+0x04,0,dc_m2_pwm_duty);
   106f4:	00c000b4 	movhi	r3,2
   106f8:	18c85504 	addi	r3,r3,8532
   106fc:	e0bffd17 	ldw	r2,-12(fp)
   10700:	18800035 	stwio	r2,0(r3)
    IOWR(DC1_PWM2_BASE,0,dc_m1_pwm_freq);
   10704:	d0a00017 	ldw	r2,-32768(gp)
   10708:	1007883a 	mov	r3,r2
   1070c:	008000b4 	movhi	r2,2
   10710:	10884804 	addi	r2,r2,8480
   10714:	10c00035 	stwio	r3,0(r2)
    IOWR(DC1_PWM2_BASE+0x04,0,dc_m1_pwm_duty);
   10718:	00c000b4 	movhi	r3,2
   1071c:	18c84904 	addi	r3,r3,8484
   10720:	e0bffe17 	ldw	r2,-8(fp)
   10724:	18800035 	stwio	r2,0(r3)

    IOWR(IR_RX2_BASE,1,722);
   10728:	00c000b4 	movhi	r3,2
   1072c:	18c85d04 	addi	r3,r3,8564
   10730:	0080b484 	movi	r2,722
   10734:	18800035 	stwio	r2,0(r3)
    IOWR(IR_RX1_BASE,1,722);
   10738:	00c000b4 	movhi	r3,2
   1073c:	18c85b04 	addi	r3,r3,8556
   10740:	0080b484 	movi	r2,722
   10744:	18800035 	stwio	r2,0(r3)
    IOWR(IR_RX2_BASE,0x00,1);
   10748:	00c000b4 	movhi	r3,2
   1074c:	18c85c04 	addi	r3,r3,8560
   10750:	00800044 	movi	r2,1
   10754:	18800035 	stwio	r2,0(r3)
    IOWR(IR_RX1_BASE,0x00,1);
   10758:	00c000b4 	movhi	r3,2
   1075c:	18c85a04 	addi	r3,r3,8552
   10760:	00800044 	movi	r2,1
   10764:	18800035 	stwio	r2,0(r3)

    IOWR(DC1_PWM2_BASE+0x08,0,1);
   10768:	00c000b4 	movhi	r3,2
   1076c:	18c84a04 	addi	r3,r3,8488
   10770:	00800044 	movi	r2,1
   10774:	18800035 	stwio	r2,0(r3)
    IOWR(DC2_PWM1_BASE+0x08,0,1);
   10778:	00c000b4 	movhi	r3,2
   1077c:	18c85604 	addi	r3,r3,8536
   10780:	00800044 	movi	r2,1
   10784:	18800035 	stwio	r2,0(r3)
   10788:	00000006 	br	1078c <turn_left+0x114>

    while(1)
    {
        if(( dc1_cmp ==0 ) && (dc2_cmp ==0 ))
   1078c:	d0a02317 	ldw	r2,-32628(gp)
   10790:	1004c03a 	cmpne	r2,r2,zero
   10794:	1000061e 	bne	r2,zero,107b0 <turn_left+0x138>
   10798:	d0a01b17 	ldw	r2,-32660(gp)
   1079c:	1004c03a 	cmpne	r2,r2,zero
   107a0:	1000031e 	bne	r2,zero,107b0 <turn_left+0x138>
          return 0;
   107a4:	0005883a 	mov	r2,zero
   107a8:	e0bfff15 	stw	r2,-4(fp)
   107ac:	00004006 	br	108b0 <turn_left+0x238>
        else
        {
        usleep(90000);
   107b0:	01000074 	movhi	r4,1
   107b4:	2117e404 	addi	r4,r4,24464
   107b8:	00152880 	call	15288 <usleep>
        dc_m1 = IORD(IR_RX1_BASE,1);
   107bc:	008000b4 	movhi	r2,2
   107c0:	10885b04 	addi	r2,r2,8556
   107c4:	10800037 	ldwio	r2,0(r2)
   107c8:	d0a01d15 	stw	r2,-32652(gp)
        dc_m2 = IORD(IR_RX2_BASE,1);
   107cc:	008000b4 	movhi	r2,2
   107d0:	10885d04 	addi	r2,r2,8564
   107d4:	10800037 	ldwio	r2,0(r2)
   107d8:	d0a02615 	stw	r2,-32616(gp)
        i = dc_m1-dc_m2;
   107dc:	d0e01d17 	ldw	r3,-32652(gp)
   107e0:	d0a02617 	ldw	r2,-32616(gp)
   107e4:	1885c83a 	sub	r2,r3,r2
   107e8:	d0a01815 	stw	r2,-32672(gp)
        j = dc_m2-dc_m1;
   107ec:	d0e02617 	ldw	r3,-32616(gp)
   107f0:	d0a01d17 	ldw	r2,-32652(gp)
   107f4:	1885c83a 	sub	r2,r3,r2
   107f8:	d0a01315 	stw	r2,-32692(gp)
        if(i > 5) {
   107fc:	d0a01817 	ldw	r2,-32672(gp)
   10800:	10800190 	cmplti	r2,r2,6
   10804:	1000151e 	bne	r2,zero,1085c <turn_left+0x1e4>
            if(dc_m2_pwm_duty >= 100)
   10808:	e0bffd17 	ldw	r2,-12(fp)
   1080c:	10801910 	cmplti	r2,r2,100
   10810:	1000031e 	bne	r2,zero,10820 <turn_left+0x1a8>
                dc_m2_pwm_duty-=50;
   10814:	e0bffd17 	ldw	r2,-12(fp)
   10818:	10bff384 	addi	r2,r2,-50
   1081c:	e0bffd15 	stw	r2,-12(fp)
            if(dc_m1_pwm_duty < 1700)
   10820:	e0bffe17 	ldw	r2,-8(fp)
   10824:	1081a908 	cmpgei	r2,r2,1700
   10828:	1000031e 	bne	r2,zero,10838 <turn_left+0x1c0>
                dc_m1_pwm_duty+=50;
   1082c:	e0bffe17 	ldw	r2,-8(fp)
   10830:	10800c84 	addi	r2,r2,50
   10834:	e0bffe15 	stw	r2,-8(fp)
            IOWR(DC2_PWM1_BASE+0x04,0,dc_m2_pwm_duty);
   10838:	00c000b4 	movhi	r3,2
   1083c:	18c85504 	addi	r3,r3,8532
   10840:	e0bffd17 	ldw	r2,-12(fp)
   10844:	18800035 	stwio	r2,0(r3)
            IOWR(DC1_PWM2_BASE+0x04,0,dc_m1_pwm_duty);
   10848:	00c000b4 	movhi	r3,2
   1084c:	18c84904 	addi	r3,r3,8484
   10850:	e0bffe17 	ldw	r2,-8(fp)
   10854:	18800035 	stwio	r2,0(r3)
   10858:	003fcc06 	br	1078c <turn_left+0x114>
        }
        else
        if(j > 5) {
   1085c:	d0a01317 	ldw	r2,-32692(gp)
   10860:	10800190 	cmplti	r2,r2,6
   10864:	103fc91e 	bne	r2,zero,1078c <turn_left+0x114>
            if(dc_m1_pwm_duty >= 100);
            dc_m1_pwm_duty-=50;
   10868:	e0bffe17 	ldw	r2,-8(fp)
   1086c:	10bff384 	addi	r2,r2,-50
   10870:	e0bffe15 	stw	r2,-8(fp)
            if(dc_m2_pwm_duty < 1700)
   10874:	e0bffd17 	ldw	r2,-12(fp)
   10878:	1081a908 	cmpgei	r2,r2,1700
   1087c:	1000031e 	bne	r2,zero,1088c <turn_left+0x214>
            dc_m2_pwm_duty+=50;
   10880:	e0bffd17 	ldw	r2,-12(fp)
   10884:	10800c84 	addi	r2,r2,50
   10888:	e0bffd15 	stw	r2,-12(fp)
            IOWR(DC2_PWM1_BASE+0x04,0,dc_m2_pwm_duty);
   1088c:	00c000b4 	movhi	r3,2
   10890:	18c85504 	addi	r3,r3,8532
   10894:	e0bffd17 	ldw	r2,-12(fp)
   10898:	18800035 	stwio	r2,0(r3)
            IOWR(DC1_PWM2_BASE+0x04,0,dc_m1_pwm_duty);
   1089c:	00c000b4 	movhi	r3,2
   108a0:	18c84904 	addi	r3,r3,8484
   108a4:	e0bffe17 	ldw	r2,-8(fp)
   108a8:	18800035 	stwio	r2,0(r3)
        }
      }
    }
   108ac:	003fb706 	br	1078c <turn_left+0x114>
}
   108b0:	e0bfff17 	ldw	r2,-4(fp)
   108b4:	e037883a 	mov	sp,fp
   108b8:	dfc00117 	ldw	ra,4(sp)
   108bc:	df000017 	ldw	fp,0(sp)
   108c0:	dec00204 	addi	sp,sp,8
   108c4:	f800283a 	ret

000108c8 <turn_right>:

int turn_right()
{
   108c8:	defffb04 	addi	sp,sp,-20
   108cc:	dfc00415 	stw	ra,16(sp)
   108d0:	df000315 	stw	fp,12(sp)
   108d4:	df000304 	addi	fp,sp,12
    int dc_m1_pwm_duty = dc_m1_pwm_freq/4;
   108d8:	d0a00017 	ldw	r2,-32768(gp)
   108dc:	1004d0ba 	srli	r2,r2,2
   108e0:	e0bffe15 	stw	r2,-8(fp)
    int dc_m2_pwm_duty = dc_m2_pwm_freq/4;
   108e4:	d0a00117 	ldw	r2,-32764(gp)
   108e8:	1004d0ba 	srli	r2,r2,2
   108ec:	e0bffd15 	stw	r2,-12(fp)

    dc1_cmp = 1;
   108f0:	00800044 	movi	r2,1
   108f4:	d0a02315 	stw	r2,-32628(gp)
    dc2_cmp = 1;
   108f8:	00800044 	movi	r2,1
   108fc:	d0a01b15 	stw	r2,-32660(gp)
    IOWR(IR_RX2_BASE,0x00,0);
   10900:	008000b4 	movhi	r2,2
   10904:	10885c04 	addi	r2,r2,8560
   10908:	10000035 	stwio	zero,0(r2)
    IOWR(IR_RX1_BASE,0x00,0);
   1090c:	008000b4 	movhi	r2,2
   10910:	10885a04 	addi	r2,r2,8552
   10914:	10000035 	stwio	zero,0(r2)
    IOWR(DC2_PWM1_BASE+0x08,0,0);
   10918:	008000b4 	movhi	r2,2
   1091c:	10885604 	addi	r2,r2,8536
   10920:	10000035 	stwio	zero,0(r2)
    IOWR(DC1_PWM2_BASE+0x08,0,0);
   10924:	008000b4 	movhi	r2,2
   10928:	10884a04 	addi	r2,r2,8488
   1092c:	10000035 	stwio	zero,0(r2)

    IOWR(DC2_PWM2_BASE,0,dc_m2_pwm_freq);
   10930:	d0a00117 	ldw	r2,-32764(gp)
   10934:	1007883a 	mov	r3,r2
   10938:	008000b4 	movhi	r2,2
   1093c:	10884c04 	addi	r2,r2,8496
   10940:	10c00035 	stwio	r3,0(r2)
    IOWR(DC2_PWM2_BASE+0x04,0,dc_m2_pwm_duty);
   10944:	00c000b4 	movhi	r3,2
   10948:	18c84d04 	addi	r3,r3,8500
   1094c:	e0bffd17 	ldw	r2,-12(fp)
   10950:	18800035 	stwio	r2,0(r3)
    IOWR(DC1_PWM1_BASE,0,dc_m1_pwm_freq);
   10954:	d0a00017 	ldw	r2,-32768(gp)
   10958:	1007883a 	mov	r3,r2
   1095c:	008000b4 	movhi	r2,2
   10960:	10885004 	addi	r2,r2,8512
   10964:	10c00035 	stwio	r3,0(r2)
    IOWR(DC1_PWM1_BASE+0x04,0,dc_m1_pwm_duty);
   10968:	00c000b4 	movhi	r3,2
   1096c:	18c85104 	addi	r3,r3,8516
   10970:	e0bffe17 	ldw	r2,-8(fp)
   10974:	18800035 	stwio	r2,0(r3)

    IOWR(IR_RX2_BASE,1,722);
   10978:	00c000b4 	movhi	r3,2
   1097c:	18c85d04 	addi	r3,r3,8564
   10980:	0080b484 	movi	r2,722
   10984:	18800035 	stwio	r2,0(r3)
    IOWR(IR_RX1_BASE,1,722);
   10988:	00c000b4 	movhi	r3,2
   1098c:	18c85b04 	addi	r3,r3,8556
   10990:	0080b484 	movi	r2,722
   10994:	18800035 	stwio	r2,0(r3)
    IOWR(IR_RX2_BASE,0x00,1);
   10998:	00c000b4 	movhi	r3,2
   1099c:	18c85c04 	addi	r3,r3,8560
   109a0:	00800044 	movi	r2,1
   109a4:	18800035 	stwio	r2,0(r3)
    IOWR(IR_RX1_BASE,0x00,1);
   109a8:	00c000b4 	movhi	r3,2
   109ac:	18c85a04 	addi	r3,r3,8552
   109b0:	00800044 	movi	r2,1
   109b4:	18800035 	stwio	r2,0(r3)

    IOWR(DC1_PWM1_BASE+0x08,0,1);
   109b8:	00c000b4 	movhi	r3,2
   109bc:	18c85204 	addi	r3,r3,8520
   109c0:	00800044 	movi	r2,1
   109c4:	18800035 	stwio	r2,0(r3)
    IOWR(DC2_PWM2_BASE+0x08,0,1);
   109c8:	00c000b4 	movhi	r3,2
   109cc:	18c84e04 	addi	r3,r3,8504
   109d0:	00800044 	movi	r2,1
   109d4:	18800035 	stwio	r2,0(r3)
   109d8:	00000006 	br	109dc <turn_right+0x114>

    while(1)
    {
        if(( dc1_cmp ==0 ) && (dc2_cmp ==0 ))
   109dc:	d0a02317 	ldw	r2,-32628(gp)
   109e0:	1004c03a 	cmpne	r2,r2,zero
   109e4:	1000061e 	bne	r2,zero,10a00 <turn_right+0x138>
   109e8:	d0a01b17 	ldw	r2,-32660(gp)
   109ec:	1004c03a 	cmpne	r2,r2,zero
   109f0:	1000031e 	bne	r2,zero,10a00 <turn_right+0x138>
        return 0;
   109f4:	0005883a 	mov	r2,zero
   109f8:	e0bfff15 	stw	r2,-4(fp)
   109fc:	00004006 	br	10b00 <turn_right+0x238>
        else
        {
        usleep(90000);
   10a00:	01000074 	movhi	r4,1
   10a04:	2117e404 	addi	r4,r4,24464
   10a08:	00152880 	call	15288 <usleep>
        dc_m1 = IORD(IR_RX1_BASE,1);
   10a0c:	008000b4 	movhi	r2,2
   10a10:	10885b04 	addi	r2,r2,8556
   10a14:	10800037 	ldwio	r2,0(r2)
   10a18:	d0a01d15 	stw	r2,-32652(gp)
        dc_m2 = IORD(IR_RX2_BASE,1);
   10a1c:	008000b4 	movhi	r2,2
   10a20:	10885d04 	addi	r2,r2,8564
   10a24:	10800037 	ldwio	r2,0(r2)
   10a28:	d0a02615 	stw	r2,-32616(gp)
        i = dc_m1-dc_m2;
   10a2c:	d0e01d17 	ldw	r3,-32652(gp)
   10a30:	d0a02617 	ldw	r2,-32616(gp)
   10a34:	1885c83a 	sub	r2,r3,r2
   10a38:	d0a01815 	stw	r2,-32672(gp)
        j = dc_m2-dc_m1;
   10a3c:	d0e02617 	ldw	r3,-32616(gp)
   10a40:	d0a01d17 	ldw	r2,-32652(gp)
   10a44:	1885c83a 	sub	r2,r3,r2
   10a48:	d0a01315 	stw	r2,-32692(gp)
        if(i > 5) {
   10a4c:	d0a01817 	ldw	r2,-32672(gp)
   10a50:	10800190 	cmplti	r2,r2,6
   10a54:	1000151e 	bne	r2,zero,10aac <turn_right+0x1e4>
            if(dc_m2_pwm_duty >= 100)
   10a58:	e0bffd17 	ldw	r2,-12(fp)
   10a5c:	10801910 	cmplti	r2,r2,100
   10a60:	1000031e 	bne	r2,zero,10a70 <turn_right+0x1a8>
                dc_m2_pwm_duty-=50;
   10a64:	e0bffd17 	ldw	r2,-12(fp)
   10a68:	10bff384 	addi	r2,r2,-50
   10a6c:	e0bffd15 	stw	r2,-12(fp)
            if(dc_m1_pwm_duty < 1700)
   10a70:	e0bffe17 	ldw	r2,-8(fp)
   10a74:	1081a908 	cmpgei	r2,r2,1700
   10a78:	1000031e 	bne	r2,zero,10a88 <turn_right+0x1c0>
                dc_m1_pwm_duty+=50;
   10a7c:	e0bffe17 	ldw	r2,-8(fp)
   10a80:	10800c84 	addi	r2,r2,50
   10a84:	e0bffe15 	stw	r2,-8(fp)
            IOWR(DC2_PWM2_BASE+0x04,0,dc_m2_pwm_duty);
   10a88:	00c000b4 	movhi	r3,2
   10a8c:	18c84d04 	addi	r3,r3,8500
   10a90:	e0bffd17 	ldw	r2,-12(fp)
   10a94:	18800035 	stwio	r2,0(r3)
            IOWR(DC1_PWM1_BASE+0x04,0,dc_m1_pwm_duty);
   10a98:	00c000b4 	movhi	r3,2
   10a9c:	18c85104 	addi	r3,r3,8516
   10aa0:	e0bffe17 	ldw	r2,-8(fp)
   10aa4:	18800035 	stwio	r2,0(r3)
   10aa8:	003fcc06 	br	109dc <turn_right+0x114>
        }
        else
        if(j > 5) {
   10aac:	d0a01317 	ldw	r2,-32692(gp)
   10ab0:	10800190 	cmplti	r2,r2,6
   10ab4:	103fc91e 	bne	r2,zero,109dc <turn_right+0x114>
            if(dc_m1_pwm_duty >= 100);
                dc_m1_pwm_duty-=50;
   10ab8:	e0bffe17 	ldw	r2,-8(fp)
   10abc:	10bff384 	addi	r2,r2,-50
   10ac0:	e0bffe15 	stw	r2,-8(fp)
            if(dc_m2_pwm_duty < 1700)
   10ac4:	e0bffd17 	ldw	r2,-12(fp)
   10ac8:	1081a908 	cmpgei	r2,r2,1700
   10acc:	1000031e 	bne	r2,zero,10adc <turn_right+0x214>
                dc_m2_pwm_duty+=50;
   10ad0:	e0bffd17 	ldw	r2,-12(fp)
   10ad4:	10800c84 	addi	r2,r2,50
   10ad8:	e0bffd15 	stw	r2,-12(fp)
            IOWR(DC2_PWM2_BASE+0x04,0,dc_m2_pwm_duty);
   10adc:	00c000b4 	movhi	r3,2
   10ae0:	18c84d04 	addi	r3,r3,8500
   10ae4:	e0bffd17 	ldw	r2,-12(fp)
   10ae8:	18800035 	stwio	r2,0(r3)
            IOWR(DC1_PWM1_BASE+0x04,0,dc_m1_pwm_duty);
   10aec:	00c000b4 	movhi	r3,2
   10af0:	18c85104 	addi	r3,r3,8516
   10af4:	e0bffe17 	ldw	r2,-8(fp)
   10af8:	18800035 	stwio	r2,0(r3)
        }
      }
    }
   10afc:	003fb706 	br	109dc <turn_right+0x114>
}
   10b00:	e0bfff17 	ldw	r2,-4(fp)
   10b04:	e037883a 	mov	sp,fp
   10b08:	dfc00117 	ldw	ra,4(sp)
   10b0c:	df000017 	ldw	fp,0(sp)
   10b10:	dec00204 	addi	sp,sp,8
   10b14:	f800283a 	ret

00010b18 <move_fwd>:

void move_fwd()
{
   10b18:	defffc04 	addi	sp,sp,-16
   10b1c:	dfc00315 	stw	ra,12(sp)
   10b20:	df000215 	stw	fp,8(sp)
   10b24:	df000204 	addi	fp,sp,8
    int dc_m1_pwm_duty = dc_m1_pwm_freq/8;
   10b28:	d0a00017 	ldw	r2,-32768(gp)
   10b2c:	1004d0fa 	srli	r2,r2,3
   10b30:	e0bfff15 	stw	r2,-4(fp)
    int dc_m2_pwm_duty = dc_m2_pwm_freq/8;
   10b34:	d0a00117 	ldw	r2,-32764(gp)
   10b38:	1004d0fa 	srli	r2,r2,3
   10b3c:	e0bffe15 	stw	r2,-8(fp)

    dc1_cmp = 1;
   10b40:	00800044 	movi	r2,1
   10b44:	d0a02315 	stw	r2,-32628(gp)
    dc2_cmp = 1;
   10b48:	00800044 	movi	r2,1
   10b4c:	d0a01b15 	stw	r2,-32660(gp)
    IOWR(IR_RX2_BASE,0x00,0);
   10b50:	008000b4 	movhi	r2,2
   10b54:	10885c04 	addi	r2,r2,8560
   10b58:	10000035 	stwio	zero,0(r2)
    IOWR(IR_RX1_BASE,0x00,0);
   10b5c:	008000b4 	movhi	r2,2
   10b60:	10885a04 	addi	r2,r2,8552
   10b64:	10000035 	stwio	zero,0(r2)
    IOWR(DC2_PWM2_BASE+0x08,0,0);
   10b68:	008000b4 	movhi	r2,2
   10b6c:	10884e04 	addi	r2,r2,8504
   10b70:	10000035 	stwio	zero,0(r2)
    IOWR(DC1_PWM2_BASE+0x08,0,0);
   10b74:	008000b4 	movhi	r2,2
   10b78:	10884a04 	addi	r2,r2,8488
   10b7c:	10000035 	stwio	zero,0(r2)

    IOWR(DC2_PWM1_BASE,0,dc_m2_pwm_freq);
   10b80:	d0a00117 	ldw	r2,-32764(gp)
   10b84:	1007883a 	mov	r3,r2
   10b88:	008000b4 	movhi	r2,2
   10b8c:	10885404 	addi	r2,r2,8528
   10b90:	10c00035 	stwio	r3,0(r2)
    IOWR(DC2_PWM1_BASE+0x04,0,dc_m2_pwm_duty);
   10b94:	00c000b4 	movhi	r3,2
   10b98:	18c85504 	addi	r3,r3,8532
   10b9c:	e0bffe17 	ldw	r2,-8(fp)
   10ba0:	18800035 	stwio	r2,0(r3)
    IOWR(DC1_PWM1_BASE,0,dc_m1_pwm_freq);
   10ba4:	d0a00017 	ldw	r2,-32768(gp)
   10ba8:	1007883a 	mov	r3,r2
   10bac:	008000b4 	movhi	r2,2
   10bb0:	10885004 	addi	r2,r2,8512
   10bb4:	10c00035 	stwio	r3,0(r2)
    IOWR(DC1_PWM1_BASE+0x04,0,dc_m1_pwm_duty);
   10bb8:	00c000b4 	movhi	r3,2
   10bbc:	18c85104 	addi	r3,r3,8516
   10bc0:	e0bfff17 	ldw	r2,-4(fp)
   10bc4:	18800035 	stwio	r2,0(r3)

    IOWR(IR_RX2_BASE,1,2500);
   10bc8:	00c000b4 	movhi	r3,2
   10bcc:	18c85d04 	addi	r3,r3,8564
   10bd0:	00827104 	movi	r2,2500
   10bd4:	18800035 	stwio	r2,0(r3)
    IOWR(IR_RX1_BASE,1,2500);
   10bd8:	00c000b4 	movhi	r3,2
   10bdc:	18c85b04 	addi	r3,r3,8556
   10be0:	00827104 	movi	r2,2500
   10be4:	18800035 	stwio	r2,0(r3)
    IOWR(IR_RX2_BASE,0x00,1);
   10be8:	00c000b4 	movhi	r3,2
   10bec:	18c85c04 	addi	r3,r3,8560
   10bf0:	00800044 	movi	r2,1
   10bf4:	18800035 	stwio	r2,0(r3)
    IOWR(IR_RX1_BASE,0x00,1);
   10bf8:	00c000b4 	movhi	r3,2
   10bfc:	18c85a04 	addi	r3,r3,8552
   10c00:	00800044 	movi	r2,1
   10c04:	18800035 	stwio	r2,0(r3)

    IOWR(DC1_PWM1_BASE+0x08,0,1);
   10c08:	00c000b4 	movhi	r3,2
   10c0c:	18c85204 	addi	r3,r3,8520
   10c10:	00800044 	movi	r2,1
   10c14:	18800035 	stwio	r2,0(r3)
    IOWR(DC2_PWM1_BASE+0x08,0,1);
   10c18:	00c000b4 	movhi	r3,2
   10c1c:	18c85604 	addi	r3,r3,8536
   10c20:	00800044 	movi	r2,1
   10c24:	18800035 	stwio	r2,0(r3)

    while(1)
    {
        edge = IORD(PS_DIN_BASE,0);
   10c28:	008000b4 	movhi	r2,2
   10c2c:	10883804 	addi	r2,r2,8416
   10c30:	10800037 	ldwio	r2,0(r2)
   10c34:	d0a02015 	stw	r2,-32640(gp)
        if((( dc1_cmp ==0 ) && (dc2_cmp ==0 )) || ((table_edge==1) && (edge == 1)) || ((wall_detect==1) && (edge == 0)) )
   10c38:	d0a02317 	ldw	r2,-32628(gp)
   10c3c:	1004c03a 	cmpne	r2,r2,zero
   10c40:	1000031e 	bne	r2,zero,10c50 <move_fwd+0x138>
   10c44:	d0a01b17 	ldw	r2,-32660(gp)
   10c48:	1005003a 	cmpeq	r2,r2,zero
   10c4c:	10000e1e 	bne	r2,zero,10c88 <move_fwd+0x170>
   10c50:	d0a02703 	ldbu	r2,-32612(gp)
   10c54:	10803fcc 	andi	r2,r2,255
   10c58:	10800058 	cmpnei	r2,r2,1
   10c5c:	1000031e 	bne	r2,zero,10c6c <move_fwd+0x154>
   10c60:	d0a02017 	ldw	r2,-32640(gp)
   10c64:	10800060 	cmpeqi	r2,r2,1
   10c68:	1000071e 	bne	r2,zero,10c88 <move_fwd+0x170>
   10c6c:	d0a01a03 	ldbu	r2,-32664(gp)
   10c70:	10803fcc 	andi	r2,r2,255
   10c74:	10800058 	cmpnei	r2,r2,1
   10c78:	1000121e 	bne	r2,zero,10cc4 <move_fwd+0x1ac>
   10c7c:	d0a02017 	ldw	r2,-32640(gp)
   10c80:	1004c03a 	cmpne	r2,r2,zero
   10c84:	10000f1e 	bne	r2,zero,10cc4 <move_fwd+0x1ac>
        {
            IOWR(DC1_PWM1_BASE+0x08,0,0);
   10c88:	008000b4 	movhi	r2,2
   10c8c:	10885204 	addi	r2,r2,8520
   10c90:	10000035 	stwio	zero,0(r2)
            IOWR(DC2_PWM1_BASE+0x08,0,0);
   10c94:	008000b4 	movhi	r2,2
   10c98:	10885604 	addi	r2,r2,8536
   10c9c:	10000035 	stwio	zero,0(r2)
            IOWR(IR_RX1_BASE,0,0x0);
   10ca0:	008000b4 	movhi	r2,2
   10ca4:	10885a04 	addi	r2,r2,8552
   10ca8:	10000035 	stwio	zero,0(r2)
            IOWR(IR_RX2_BASE,0,0x0);
   10cac:	008000b4 	movhi	r2,2
   10cb0:	10885c04 	addi	r2,r2,8560
   10cb4:	10000035 	stwio	zero,0(r2)
            dc1_cmp =0;
   10cb8:	d0202315 	stw	zero,-32628(gp)
            dc1_cmp =0;
   10cbc:	d0202315 	stw	zero,-32628(gp)
   10cc0:	00001b06 	br	10d30 <move_fwd+0x218>
            return;
        }
        else
        {
        usleep(100000);
   10cc4:	010000b4 	movhi	r4,2
   10cc8:	2121a804 	addi	r4,r4,-31072
   10ccc:	00152880 	call	15288 <usleep>
        dc_m1 = IORD(IR_RX1_BASE,1);
   10cd0:	008000b4 	movhi	r2,2
   10cd4:	10885b04 	addi	r2,r2,8556
   10cd8:	10800037 	ldwio	r2,0(r2)
   10cdc:	d0a01d15 	stw	r2,-32652(gp)
        dc_m2 = IORD(IR_RX2_BASE,1);
   10ce0:	008000b4 	movhi	r2,2
   10ce4:	10885d04 	addi	r2,r2,8564
   10ce8:	10800037 	ldwio	r2,0(r2)
   10cec:	d0a02615 	stw	r2,-32616(gp)
        IOWR(IR_RX1_BASE,0,0);
   10cf0:	008000b4 	movhi	r2,2
   10cf4:	10885a04 	addi	r2,r2,8552
   10cf8:	10000035 	stwio	zero,0(r2)
        IOWR(IR_RX2_BASE,0,0);
   10cfc:	008000b4 	movhi	r2,2
   10d00:	10885c04 	addi	r2,r2,8560
   10d04:	10000035 	stwio	zero,0(r2)
        IOWR(IR_RX1_BASE,0,1);
   10d08:	00c000b4 	movhi	r3,2
   10d0c:	18c85a04 	addi	r3,r3,8552
   10d10:	00800044 	movi	r2,1
   10d14:	18800035 	stwio	r2,0(r3)
        IOWR(IR_RX2_BASE,0,1);
   10d18:	00c000b4 	movhi	r3,2
   10d1c:	18c85c04 	addi	r3,r3,8560
   10d20:	00800044 	movi	r2,1
   10d24:	18800035 	stwio	r2,0(r3)
        PID_MODE_SEL ? pid_controller_hw() : pid_controller_sw();   //  HW/SW mode selects based on "PID_MODE_SEL" value.
   10d28:	00103540 	call	10354 <pid_controller_sw>
        }
    }
   10d2c:	003fbe06 	br	10c28 <move_fwd+0x110>
}
   10d30:	e037883a 	mov	sp,fp
   10d34:	dfc00117 	ldw	ra,4(sp)
   10d38:	df000017 	ldw	fp,0(sp)
   10d3c:	dec00204 	addi	sp,sp,8
   10d40:	f800283a 	ret

00010d44 <move_bwd>:

void move_bwd()
{
   10d44:	defffc04 	addi	sp,sp,-16
   10d48:	dfc00315 	stw	ra,12(sp)
   10d4c:	df000215 	stw	fp,8(sp)
   10d50:	df000204 	addi	fp,sp,8
    int dc_m1_pwm_duty = dc_m1_pwm_freq/4;
   10d54:	d0a00017 	ldw	r2,-32768(gp)
   10d58:	1004d0ba 	srli	r2,r2,2
   10d5c:	e0bfff15 	stw	r2,-4(fp)
    int dc_m2_pwm_duty = dc_m2_pwm_freq/4;
   10d60:	d0a00117 	ldw	r2,-32764(gp)
   10d64:	1004d0ba 	srli	r2,r2,2
   10d68:	e0bffe15 	stw	r2,-8(fp)

    dc1_cmp = 1;
   10d6c:	00800044 	movi	r2,1
   10d70:	d0a02315 	stw	r2,-32628(gp)
    dc2_cmp = 1;
   10d74:	00800044 	movi	r2,1
   10d78:	d0a01b15 	stw	r2,-32660(gp)
    IOWR(IR_RX2_BASE,0x00,0);
   10d7c:	008000b4 	movhi	r2,2
   10d80:	10885c04 	addi	r2,r2,8560
   10d84:	10000035 	stwio	zero,0(r2)
    IOWR(IR_RX1_BASE,0x00,0);
   10d88:	008000b4 	movhi	r2,2
   10d8c:	10885a04 	addi	r2,r2,8552
   10d90:	10000035 	stwio	zero,0(r2)
    IOWR(DC2_PWM1_BASE+0x08,0,0);
   10d94:	008000b4 	movhi	r2,2
   10d98:	10885604 	addi	r2,r2,8536
   10d9c:	10000035 	stwio	zero,0(r2)
    IOWR(DC1_PWM1_BASE+0x08,0,0);
   10da0:	008000b4 	movhi	r2,2
   10da4:	10885204 	addi	r2,r2,8520
   10da8:	10000035 	stwio	zero,0(r2)

    IOWR(DC2_PWM2_BASE,0,dc_m2_pwm_freq);
   10dac:	d0a00117 	ldw	r2,-32764(gp)
   10db0:	1007883a 	mov	r3,r2
   10db4:	008000b4 	movhi	r2,2
   10db8:	10884c04 	addi	r2,r2,8496
   10dbc:	10c00035 	stwio	r3,0(r2)
    IOWR(DC2_PWM2_BASE+0x04,0,dc_m2_pwm_duty);
   10dc0:	00c000b4 	movhi	r3,2
   10dc4:	18c84d04 	addi	r3,r3,8500
   10dc8:	e0bffe17 	ldw	r2,-8(fp)
   10dcc:	18800035 	stwio	r2,0(r3)
    IOWR(DC1_PWM2_BASE,0,dc_m1_pwm_freq);
   10dd0:	d0a00017 	ldw	r2,-32768(gp)
   10dd4:	1007883a 	mov	r3,r2
   10dd8:	008000b4 	movhi	r2,2
   10ddc:	10884804 	addi	r2,r2,8480
   10de0:	10c00035 	stwio	r3,0(r2)
    IOWR(DC1_PWM2_BASE+0x04,0,dc_m1_pwm_duty);
   10de4:	00c000b4 	movhi	r3,2
   10de8:	18c84904 	addi	r3,r3,8484
   10dec:	e0bfff17 	ldw	r2,-4(fp)
   10df0:	18800035 	stwio	r2,0(r3)

    IOWR(IR_RX2_BASE,1,500);
   10df4:	00c000b4 	movhi	r3,2
   10df8:	18c85d04 	addi	r3,r3,8564
   10dfc:	00807d04 	movi	r2,500
   10e00:	18800035 	stwio	r2,0(r3)
    IOWR(IR_RX1_BASE,1,500);
   10e04:	00c000b4 	movhi	r3,2
   10e08:	18c85b04 	addi	r3,r3,8556
   10e0c:	00807d04 	movi	r2,500
   10e10:	18800035 	stwio	r2,0(r3)
    IOWR(IR_RX2_BASE,0x00,1);
   10e14:	00c000b4 	movhi	r3,2
   10e18:	18c85c04 	addi	r3,r3,8560
   10e1c:	00800044 	movi	r2,1
   10e20:	18800035 	stwio	r2,0(r3)
    IOWR(IR_RX1_BASE,0x00,1);
   10e24:	00c000b4 	movhi	r3,2
   10e28:	18c85a04 	addi	r3,r3,8552
   10e2c:	00800044 	movi	r2,1
   10e30:	18800035 	stwio	r2,0(r3)

    IOWR(DC1_PWM2_BASE+0x08,0,1);
   10e34:	00c000b4 	movhi	r3,2
   10e38:	18c84a04 	addi	r3,r3,8488
   10e3c:	00800044 	movi	r2,1
   10e40:	18800035 	stwio	r2,0(r3)
    IOWR(DC2_PWM2_BASE+0x08,0,1);
   10e44:	00c000b4 	movhi	r3,2
   10e48:	18c84e04 	addi	r3,r3,8504
   10e4c:	00800044 	movi	r2,1
   10e50:	18800035 	stwio	r2,0(r3)
   10e54:	00000006 	br	10e58 <move_bwd+0x114>


    while(1){
        edge = IORD(PS_DIN_BASE,0);
   10e58:	008000b4 	movhi	r2,2
   10e5c:	10883804 	addi	r2,r2,8416
   10e60:	10800037 	ldwio	r2,0(r2)
   10e64:	d0a02015 	stw	r2,-32640(gp)
            if(( dc1_cmp ==0 ) && (dc2_cmp ==0 ))  {
   10e68:	d0a02317 	ldw	r2,-32628(gp)
   10e6c:	1004c03a 	cmpne	r2,r2,zero
   10e70:	10000a1e 	bne	r2,zero,10e9c <move_bwd+0x158>
   10e74:	d0a01b17 	ldw	r2,-32660(gp)
   10e78:	1004c03a 	cmpne	r2,r2,zero
   10e7c:	1000071e 	bne	r2,zero,10e9c <move_bwd+0x158>
            IOWR(DC1_PWM2_BASE+0x08,0,0);
   10e80:	008000b4 	movhi	r2,2
   10e84:	10884a04 	addi	r2,r2,8488
   10e88:	10000035 	stwio	zero,0(r2)
            IOWR(DC2_PWM2_BASE+0x08,0,0);
   10e8c:	008000b4 	movhi	r2,2
   10e90:	10884e04 	addi	r2,r2,8504
   10e94:	10000035 	stwio	zero,0(r2)
            IOWR(DC2_PWM2_BASE+0x04,0,dc_m2_pwm_duty);
            IOWR(DC1_PWM2_BASE+0x04,0,dc_m1_pwm_duty);
        }
      }
    }
}
   10e98:	00004006 	br	10f9c <move_bwd+0x258>
            IOWR(DC1_PWM2_BASE+0x08,0,0);
            IOWR(DC2_PWM2_BASE+0x08,0,0);
            break;
        }
        else {
        usleep(100000);
   10e9c:	010000b4 	movhi	r4,2
   10ea0:	2121a804 	addi	r4,r4,-31072
   10ea4:	00152880 	call	15288 <usleep>
        dc_m1 = IORD(IR_RX1_BASE,1);
   10ea8:	008000b4 	movhi	r2,2
   10eac:	10885b04 	addi	r2,r2,8556
   10eb0:	10800037 	ldwio	r2,0(r2)
   10eb4:	d0a01d15 	stw	r2,-32652(gp)
        dc_m2 = IORD(IR_RX2_BASE,1);
   10eb8:	008000b4 	movhi	r2,2
   10ebc:	10885d04 	addi	r2,r2,8564
   10ec0:	10800037 	ldwio	r2,0(r2)
   10ec4:	d0a02615 	stw	r2,-32616(gp)
        i = dc_m1-dc_m2;
   10ec8:	d0e01d17 	ldw	r3,-32652(gp)
   10ecc:	d0a02617 	ldw	r2,-32616(gp)
   10ed0:	1885c83a 	sub	r2,r3,r2
   10ed4:	d0a01815 	stw	r2,-32672(gp)
        j = dc_m2-dc_m1;
   10ed8:	d0e02617 	ldw	r3,-32616(gp)
   10edc:	d0a01d17 	ldw	r2,-32652(gp)
   10ee0:	1885c83a 	sub	r2,r3,r2
   10ee4:	d0a01315 	stw	r2,-32692(gp)
        if(i > 25) {
   10ee8:	d0a01817 	ldw	r2,-32672(gp)
   10eec:	10800690 	cmplti	r2,r2,26
   10ef0:	1000151e 	bne	r2,zero,10f48 <move_bwd+0x204>
            if(dc_m2_pwm_duty >= 100)
   10ef4:	e0bffe17 	ldw	r2,-8(fp)
   10ef8:	10801910 	cmplti	r2,r2,100
   10efc:	1000031e 	bne	r2,zero,10f0c <move_bwd+0x1c8>
                dc_m2_pwm_duty-=75;
   10f00:	e0bffe17 	ldw	r2,-8(fp)
   10f04:	10bfed44 	addi	r2,r2,-75
   10f08:	e0bffe15 	stw	r2,-8(fp)
            if(dc_m1_pwm_duty < 1700)
   10f0c:	e0bfff17 	ldw	r2,-4(fp)
   10f10:	1081a908 	cmpgei	r2,r2,1700
   10f14:	1000031e 	bne	r2,zero,10f24 <move_bwd+0x1e0>
                dc_m1_pwm_duty+=75;
   10f18:	e0bfff17 	ldw	r2,-4(fp)
   10f1c:	108012c4 	addi	r2,r2,75
   10f20:	e0bfff15 	stw	r2,-4(fp)
            IOWR(DC2_PWM2_BASE+0x04,0,dc_m2_pwm_duty);
   10f24:	00c000b4 	movhi	r3,2
   10f28:	18c84d04 	addi	r3,r3,8500
   10f2c:	e0bffe17 	ldw	r2,-8(fp)
   10f30:	18800035 	stwio	r2,0(r3)
            IOWR(DC1_PWM2_BASE+0x04,0,dc_m1_pwm_duty);
   10f34:	00c000b4 	movhi	r3,2
   10f38:	18c84904 	addi	r3,r3,8484
   10f3c:	e0bfff17 	ldw	r2,-4(fp)
   10f40:	18800035 	stwio	r2,0(r3)
   10f44:	003fc406 	br	10e58 <move_bwd+0x114>
        }
        else
        if(j > 25) {
   10f48:	d0a01317 	ldw	r2,-32692(gp)
   10f4c:	10800690 	cmplti	r2,r2,26
   10f50:	103fc11e 	bne	r2,zero,10e58 <move_bwd+0x114>
            if(dc_m1_pwm_duty >= 100);
                dc_m1_pwm_duty-=75;
   10f54:	e0bfff17 	ldw	r2,-4(fp)
   10f58:	10bfed44 	addi	r2,r2,-75
   10f5c:	e0bfff15 	stw	r2,-4(fp)
            if(dc_m2_pwm_duty < 1700)
   10f60:	e0bffe17 	ldw	r2,-8(fp)
   10f64:	1081a908 	cmpgei	r2,r2,1700
   10f68:	1000031e 	bne	r2,zero,10f78 <move_bwd+0x234>
                dc_m2_pwm_duty+=75;
   10f6c:	e0bffe17 	ldw	r2,-8(fp)
   10f70:	108012c4 	addi	r2,r2,75
   10f74:	e0bffe15 	stw	r2,-8(fp)
            IOWR(DC2_PWM2_BASE+0x04,0,dc_m2_pwm_duty);
   10f78:	00c000b4 	movhi	r3,2
   10f7c:	18c84d04 	addi	r3,r3,8500
   10f80:	e0bffe17 	ldw	r2,-8(fp)
   10f84:	18800035 	stwio	r2,0(r3)
            IOWR(DC1_PWM2_BASE+0x04,0,dc_m1_pwm_duty);
   10f88:	00c000b4 	movhi	r3,2
   10f8c:	18c84904 	addi	r3,r3,8484
   10f90:	e0bfff17 	ldw	r2,-4(fp)
   10f94:	18800035 	stwio	r2,0(r3)
        }
      }
    }
   10f98:	003faf06 	br	10e58 <move_bwd+0x114>
}
   10f9c:	e037883a 	mov	sp,fp
   10fa0:	dfc00117 	ldw	ra,4(sp)
   10fa4:	df000017 	ldw	fp,0(sp)
   10fa8:	dec00204 	addi	sp,sp,8
   10fac:	f800283a 	ret

00010fb0 <main>:


int main()
{
   10fb0:	defffb04 	addi	sp,sp,-20
   10fb4:	dfc00415 	stw	ra,16(sp)
   10fb8:	df000315 	stw	fp,12(sp)
   10fbc:	df000304 	addi	fp,sp,12
  //Stop all motors
  IOWR(DC2_PWM2_BASE+0x08,0,0);
   10fc0:	008000b4 	movhi	r2,2
   10fc4:	10884e04 	addi	r2,r2,8504
   10fc8:	10000035 	stwio	zero,0(r2)
  IOWR(DC2_PWM1_BASE+0x08,0,0);
   10fcc:	008000b4 	movhi	r2,2
   10fd0:	10885604 	addi	r2,r2,8536
   10fd4:	10000035 	stwio	zero,0(r2)
  IOWR(DC1_PWM2_BASE+0x08,0,0);
   10fd8:	008000b4 	movhi	r2,2
   10fdc:	10884a04 	addi	r2,r2,8488
   10fe0:	10000035 	stwio	zero,0(r2)
  IOWR(DC1_PWM1_BASE+0x08,0,0);
   10fe4:	008000b4 	movhi	r2,2
   10fe8:	10885204 	addi	r2,r2,8520
   10fec:	10000035 	stwio	zero,0(r2)

  //all LEDs off
  IOWR(USER_LED_BASE,0,7);
   10ff0:	00c000b4 	movhi	r3,2
   10ff4:	18c82404 	addi	r3,r3,8336
   10ff8:	008001c4 	movi	r2,7
   10ffc:	18800035 	stwio	r2,0(r3)
  LCD_init(LCD_INTF_BASE);
   11000:	010000b4 	movhi	r4,2
   11004:	21085e04 	addi	r4,r4,8568
   11008:	00114980 	call	11498 <LCD_init>

  //---------------Hardware PID Initialization------------//
  IOWR(PID_CON_M1_BASE,0x00,(unsigned int)dc_m1_Kp);          //Kp
   1100c:	0007883a 	mov	r3,zero
   11010:	00800184 	movi	r2,6
   11014:	18800035 	stwio	r2,0(r3)
  IOWR(PID_CON_M2_BASE,0x00,(unsigned int)dc_m2_Kp);
   11018:	00c00804 	movi	r3,32
   1101c:	00800184 	movi	r2,6
   11020:	18800035 	stwio	r2,0(r3)

  IOWR(PID_CON_M1_BASE,0x01,(unsigned int)dc_m1_Ki);          //Ki
   11024:	00800104 	movi	r2,4
   11028:	10000035 	stwio	zero,0(r2)
  IOWR(PID_CON_M2_BASE,0x01,(unsigned int)dc_m2_Ki);
   1102c:	00800904 	movi	r2,36
   11030:	10000035 	stwio	zero,0(r2)

  IOWR(PID_CON_M1_BASE,0x02,(unsigned int)dc_m1_Kd);          //Kd
   11034:	00800204 	movi	r2,8
   11038:	10000035 	stwio	zero,0(r2)
  IOWR(PID_CON_M2_BASE,0x02,(unsigned int)dc_m2_Kd);
   1103c:	00800a04 	movi	r2,40
   11040:	10000035 	stwio	zero,0(r2)

  IOWR(PID_CON_M1_BASE,0x03,DC_M1_COUNT_REF);           //Reference
   11044:	00c00304 	movi	r3,12
   11048:	00801904 	movi	r2,100
   1104c:	18800035 	stwio	r2,0(r3)
  IOWR(PID_CON_M2_BASE,0x03,DC_M2_COUNT_REF);
   11050:	00c00b04 	movi	r3,44
   11054:	00801904 	movi	r2,100
   11058:	18800035 	stwio	r2,0(r3)
  //---------------------------------------------------------//

  // Mode Selection LCD Display
  LCD_draw_box (0, 0 ,160,128, RGB16(255,0,0),1);
   1105c:	00be0014 	movui	r2,63488
   11060:	d8800015 	stw	r2,0(sp)
   11064:	00800044 	movi	r2,1
   11068:	d8800115 	stw	r2,4(sp)
   1106c:	0009883a 	mov	r4,zero
   11070:	000b883a 	mov	r5,zero
   11074:	01802804 	movi	r6,160
   11078:	01c02004 	movi	r7,128
   1107c:	0011b000 	call	11b00 <LCD_draw_box>
  LCD_draw_round_corner_box(5,5,155,123,10,RGB16(25,27,126),1);
   11080:	00800284 	movi	r2,10
   11084:	d8800015 	stw	r2,0(sp)
   11088:	008633c4 	movi	r2,6351
   1108c:	d8800115 	stw	r2,4(sp)
   11090:	00800044 	movi	r2,1
   11094:	d8800215 	stw	r2,8(sp)
   11098:	01000144 	movi	r4,5
   1109c:	01400144 	movi	r5,5
   110a0:	018026c4 	movi	r6,155
   110a4:	01c01ec4 	movi	r7,123
   110a8:	0012b300 	call	12b30 <LCD_draw_round_corner_box>
  LCD_print_string(22,12,RGB16(255,255,255),(char *)cour10_font_array,"Mode Selection");
   110ac:	01c00074 	movhi	r7,1
   110b0:	39dc6104 	addi	r7,r7,29060
   110b4:	00800074 	movhi	r2,1
   110b8:	109bfc04 	addi	r2,r2,28656
   110bc:	d8800015 	stw	r2,0(sp)
   110c0:	01000584 	movi	r4,22
   110c4:	01400304 	movi	r5,12
   110c8:	01bfffd4 	movui	r6,65535
   110cc:	00119940 	call	11994 <LCD_print_string>
  LCD_draw_line(22, 24,135, 24,5, RGB16(255,255,255));
   110d0:	00800144 	movi	r2,5
   110d4:	d8800015 	stw	r2,0(sp)
   110d8:	00bfffd4 	movui	r2,65535
   110dc:	d8800115 	stw	r2,4(sp)
   110e0:	01000584 	movi	r4,22
   110e4:	01400604 	movi	r5,24
   110e8:	018021c4 	movi	r6,135
   110ec:	01c00604 	movi	r7,24
   110f0:	00118e80 	call	118e8 <LCD_draw_line>
  LCD_print_string(8,40,RGB16(255,255,255),(char*)cour10_font_array,"SW7 : Table Edge");
   110f4:	01c00074 	movhi	r7,1
   110f8:	39dc6104 	addi	r7,r7,29060
   110fc:	00800074 	movhi	r2,1
   11100:	109c0004 	addi	r2,r2,28672
   11104:	d8800015 	stw	r2,0(sp)
   11108:	01000204 	movi	r4,8
   1110c:	01400a04 	movi	r5,40
   11110:	01bfffd4 	movui	r6,65535
   11114:	00119940 	call	11994 <LCD_print_string>
  LCD_print_string(8,55,RGB16(255,255,255),(char *)cour10_font_array,"SW8 : Wall Detect");
   11118:	01c00074 	movhi	r7,1
   1111c:	39dc6104 	addi	r7,r7,29060
   11120:	00800074 	movhi	r2,1
   11124:	109c0504 	addi	r2,r2,28692
   11128:	d8800015 	stw	r2,0(sp)
   1112c:	01000204 	movi	r4,8
   11130:	01400dc4 	movi	r5,55
   11134:	01bfffd4 	movui	r6,65535
   11138:	00119940 	call	11994 <LCD_print_string>
   1113c:	00000006 	br	11140 <main+0x190>

  while(1)
  {
    while( (IORD(PB_BASE,0) & 0x7F) == 0x7F ) {}
   11140:	008000b4 	movhi	r2,2
   11144:	10882804 	addi	r2,r2,8352
   11148:	10800037 	ldwio	r2,0(r2)
   1114c:	10801fcc 	andi	r2,r2,127
   11150:	10801fe0 	cmpeqi	r2,r2,127
   11154:	103ffa1e 	bne	r2,zero,11140 <main+0x190>
    if((IORD(PB_BASE,0) == 0x5F))  //SW7
   11158:	008000b4 	movhi	r2,2
   1115c:	10882804 	addi	r2,r2,8352
   11160:	10800037 	ldwio	r2,0(r2)
   11164:	108017d8 	cmpnei	r2,r2,95
   11168:	10000d1e 	bne	r2,zero,111a0 <main+0x1f0>
    {
        table_edge = 1;
   1116c:	00800044 	movi	r2,1
   11170:	d0a02705 	stb	r2,-32612(gp)
        wall_detect = 0;
   11174:	d0201a05 	stb	zero,-32664(gp)
        while( (IORD(PB_BASE,0) & 0x7F) != 0x7F ) {}
   11178:	008000b4 	movhi	r2,2
   1117c:	10882804 	addi	r2,r2,8352
   11180:	10800037 	ldwio	r2,0(r2)
   11184:	10801fcc 	andi	r2,r2,127
   11188:	10801fd8 	cmpnei	r2,r2,127
   1118c:	103ffa1e 	bne	r2,zero,11178 <main+0x1c8>
        usleep(100000);
   11190:	010000b4 	movhi	r4,2
   11194:	2121a804 	addi	r4,r4,-31072
   11198:	00152880 	call	15288 <usleep>
        break;
   1119c:	00003e06 	br	11298 <main+0x2e8>
    }
    else if((IORD(PB_BASE,0) == 0x3F)) //SW8
   111a0:	008000b4 	movhi	r2,2
   111a4:	10882804 	addi	r2,r2,8352
   111a8:	10800037 	ldwio	r2,0(r2)
   111ac:	10800fd8 	cmpnei	r2,r2,63
   111b0:	10000d1e 	bne	r2,zero,111e8 <main+0x238>
    {
    	table_edge = 0;
   111b4:	d0202705 	stb	zero,-32612(gp)
        wall_detect = 1;
   111b8:	00800044 	movi	r2,1
   111bc:	d0a01a05 	stb	r2,-32664(gp)
        while( (IORD(PB_BASE,0) & 0x7F) != 0x7F ) {}
   111c0:	008000b4 	movhi	r2,2
   111c4:	10882804 	addi	r2,r2,8352
   111c8:	10800037 	ldwio	r2,0(r2)
   111cc:	10801fcc 	andi	r2,r2,127
   111d0:	10801fd8 	cmpnei	r2,r2,127
   111d4:	103ffa1e 	bne	r2,zero,111c0 <main+0x210>
        usleep(100000);
   111d8:	010000b4 	movhi	r4,2
   111dc:	2121a804 	addi	r4,r4,-31072
   111e0:	00152880 	call	15288 <usleep>
        break;
   111e4:	00002c06 	br	11298 <main+0x2e8>
    }
    if((IORD(PB_BASE,0) == 0x77)) //SW5
   111e8:	008000b4 	movhi	r2,2
   111ec:	10882804 	addi	r2,r2,8352
   111f0:	10800037 	ldwio	r2,0(r2)
   111f4:	10801dd8 	cmpnei	r2,r2,119
   111f8:	1000201e 	bne	r2,zero,1127c <main+0x2cc>
    {
        table_edge = 0;
   111fc:	d0202705 	stb	zero,-32612(gp)
        wall_detect = 0;
   11200:	d0201a05 	stb	zero,-32664(gp)
        while( (IORD(PB_BASE,0) & 0x7F) != 0x7F ) {}
   11204:	008000b4 	movhi	r2,2
   11208:	10882804 	addi	r2,r2,8352
   1120c:	10800037 	ldwio	r2,0(r2)
   11210:	10801fcc 	andi	r2,r2,127
   11214:	10801fd8 	cmpnei	r2,r2,127
   11218:	103ffa1e 	bne	r2,zero,11204 <main+0x254>
        usleep(100000);
   1121c:	010000b4 	movhi	r4,2
   11220:	2121a804 	addi	r4,r4,-31072
   11224:	00152880 	call	15288 <usleep>
        LCD_draw_box (0, 0 ,160,128, RGB16(255,0,0),1);
   11228:	00be0014 	movui	r2,63488
   1122c:	d8800015 	stw	r2,0(sp)
   11230:	00800044 	movi	r2,1
   11234:	d8800115 	stw	r2,4(sp)
   11238:	0009883a 	mov	r4,zero
   1123c:	000b883a 	mov	r5,zero
   11240:	01802804 	movi	r6,160
   11244:	01c02004 	movi	r7,128
   11248:	0011b000 	call	11b00 <LCD_draw_box>
        LCD_draw_round_corner_box(5,5,155,123,10,RGB16(25,27,126),1);
   1124c:	00800284 	movi	r2,10
   11250:	d8800015 	stw	r2,0(sp)
   11254:	008633c4 	movi	r2,6351
   11258:	d8800115 	stw	r2,4(sp)
   1125c:	00800044 	movi	r2,1
   11260:	d8800215 	stw	r2,8(sp)
   11264:	01000144 	movi	r4,5
   11268:	01400144 	movi	r5,5
   1126c:	018026c4 	movi	r6,155
   11270:	01c01ec4 	movi	r7,123
   11274:	0012b300 	call	12b30 <LCD_draw_round_corner_box>
        break;
   11278:	00000706 	br	11298 <main+0x2e8>
    }
    while( (IORD(PB_BASE,0) & 0x7F) != 0x7F ){}
   1127c:	008000b4 	movhi	r2,2
   11280:	10882804 	addi	r2,r2,8352
   11284:	10800037 	ldwio	r2,0(r2)
   11288:	10801fcc 	andi	r2,r2,127
   1128c:	10801fd8 	cmpnei	r2,r2,127
   11290:	103ffa1e 	bne	r2,zero,1127c <main+0x2cc>
  } // End of mode selection
   11294:	003faa06 	br	11140 <main+0x190>

  alt_irq_register(IR_RX2_IRQ,(void* )0,(alt_isr_func)isr_dc_m2);
   11298:	01800074 	movhi	r6,1
   1129c:	31817804 	addi	r6,r6,1504
   112a0:	01000184 	movi	r4,6
   112a4:	000b883a 	mov	r5,zero
   112a8:	001505c0 	call	1505c <alt_irq_register>
  alt_irq_register(IR_RX1_IRQ,(void* )0,(alt_isr_func)isr_dc_m1);
   112ac:	01800074 	movhi	r6,1
   112b0:	31818b04 	addi	r6,r6,1580
   112b4:	01000144 	movi	r4,5
   112b8:	000b883a 	mov	r5,zero
   112bc:	001505c0 	call	1505c <alt_irq_register>

 //Enable IR LED
  IOWR(IR_LED1_BASE,0,1);
   112c0:	00c000b4 	movhi	r3,2
   112c4:	18c83004 	addi	r3,r3,8384
   112c8:	00800044 	movi	r2,1
   112cc:	18800035 	stwio	r2,0(r3)
  IOWR(IR_LED2_BASE,0,1);
   112d0:	00c000b4 	movhi	r3,2
   112d4:	18c83404 	addi	r3,r3,8400
   112d8:	00800044 	movi	r2,1
   112dc:	18800035 	stwio	r2,0(r3)

  i = 0;
   112e0:	d0201815 	stw	zero,-32672(gp)
   112e4:	00000006 	br	112e8 <main+0x338>
  while(1)
  {
    if(table_edge == 1)
   112e8:	d0a02703 	ldbu	r2,-32612(gp)
   112ec:	10803fcc 	andi	r2,r2,255
   112f0:	10800058 	cmpnei	r2,r2,1
   112f4:	10002a1e 	bne	r2,zero,113a0 <main+0x3f0>
    {
    	if(i >= 4) i = 0;
   112f8:	d0a01817 	ldw	r2,-32672(gp)
   112fc:	10800110 	cmplti	r2,r2,4
   11300:	1000021e 	bne	r2,zero,1130c <main+0x35c>
   11304:	d0201815 	stw	zero,-32672(gp)
   11308:	00000306 	br	11318 <main+0x368>
        else       i++;
   1130c:	d0a01817 	ldw	r2,-32672(gp)
   11310:	10800044 	addi	r2,r2,1
   11314:	d0a01815 	stw	r2,-32672(gp)
        move_fwd();
   11318:	0010b180 	call	10b18 <move_fwd>

            while ( IORD(PS_DIN_BASE,0) != 0)
   1131c:	00001a06 	br	11388 <main+0x3d8>
            {
                IOWR(USER_LED_BASE,0,0);
   11320:	008000b4 	movhi	r2,2
   11324:	10882404 	addi	r2,r2,8336
   11328:	10000035 	stwio	zero,0(r2)
                if(i>=4) i = 0;
   1132c:	d0a01817 	ldw	r2,-32672(gp)
   11330:	10800110 	cmplti	r2,r2,4
   11334:	1000021e 	bne	r2,zero,11340 <main+0x390>
   11338:	d0201815 	stw	zero,-32672(gp)
   1133c:	00000306 	br	1134c <main+0x39c>
                else    i++;
   11340:	d0a01817 	ldw	r2,-32672(gp)
   11344:	10800044 	addi	r2,r2,1
   11348:	d0a01815 	stw	r2,-32672(gp)
                usleep(300000);
   1134c:	01000174 	movhi	r4,5
   11350:	2124f804 	addi	r4,r4,-27680
   11354:	00152880 	call	15288 <usleep>
                move_bwd();
   11358:	0010d440 	call	10d44 <move_bwd>
                usleep(300000);
   1135c:	01000174 	movhi	r4,5
   11360:	2124f804 	addi	r4,r4,-27680
   11364:	00152880 	call	15288 <usleep>
                IOWR(USER_LED_BASE,0,7);
   11368:	00c000b4 	movhi	r3,2
   1136c:	18c82404 	addi	r3,r3,8336
   11370:	008001c4 	movi	r2,7
   11374:	18800035 	stwio	r2,0(r3)
                turn_left();
   11378:	00106780 	call	10678 <turn_left>
                usleep(300000);
   1137c:	01000174 	movhi	r4,5
   11380:	2124f804 	addi	r4,r4,-27680
   11384:	00152880 	call	15288 <usleep>
    {
    	if(i >= 4) i = 0;
        else       i++;
        move_fwd();

            while ( IORD(PS_DIN_BASE,0) != 0)
   11388:	008000b4 	movhi	r2,2
   1138c:	10883804 	addi	r2,r2,8416
   11390:	10800037 	ldwio	r2,0(r2)
   11394:	1004c03a 	cmpne	r2,r2,zero
   11398:	103fe11e 	bne	r2,zero,11320 <main+0x370>
   1139c:	003fd206 	br	112e8 <main+0x338>
                IOWR(USER_LED_BASE,0,7);
                turn_left();
                usleep(300000);
            }
    }
    else if(wall_detect == 1)
   113a0:	d0a01a03 	ldbu	r2,-32664(gp)
   113a4:	10803fcc 	andi	r2,r2,255
   113a8:	10800058 	cmpnei	r2,r2,1
   113ac:	103fce1e 	bne	r2,zero,112e8 <main+0x338>
    {
    	if(i >= 4)
   113b0:	d0a01817 	ldw	r2,-32672(gp)
   113b4:	10800110 	cmplti	r2,r2,4
   113b8:	1000021e 	bne	r2,zero,113c4 <main+0x414>
        	i = 0;
   113bc:	d0201815 	stw	zero,-32672(gp)
   113c0:	00000306 	br	113d0 <main+0x420>
        else
        	i++;
   113c4:	d0a01817 	ldw	r2,-32672(gp)
   113c8:	10800044 	addi	r2,r2,1
   113cc:	d0a01815 	stw	r2,-32672(gp)
        move_fwd();
   113d0:	0010b180 	call	10b18 <move_fwd>
        if(IORD(PS_DIN_BASE,0) == 1)
   113d4:	008000b4 	movhi	r2,2
   113d8:	10883804 	addi	r2,r2,8416
   113dc:	10800037 	ldwio	r2,0(r2)
   113e0:	10800058 	cmpnei	r2,r2,1
   113e4:	1000261e 	bne	r2,zero,11480 <main+0x4d0>
        {
           for(j=0;j<4;j++)
   113e8:	d0201315 	stw	zero,-32692(gp)
   113ec:	00000606 	br	11408 <main+0x458>
             {
                usleep(1000);
   113f0:	0100fa04 	movi	r4,1000
   113f4:	00152880 	call	15288 <usleep>
                turn_left();
   113f8:	00106780 	call	10678 <turn_left>
        else
        	i++;
        move_fwd();
        if(IORD(PS_DIN_BASE,0) == 1)
        {
           for(j=0;j<4;j++)
   113fc:	d0a01317 	ldw	r2,-32692(gp)
   11400:	10800044 	addi	r2,r2,1
   11404:	d0a01315 	stw	r2,-32692(gp)
   11408:	d0a01317 	ldw	r2,-32692(gp)
   1140c:	10800110 	cmplti	r2,r2,4
   11410:	103ff71e 	bne	r2,zero,113f0 <main+0x440>
   11414:	003fb406 	br	112e8 <main+0x338>
        }
        else
        {
            while ( IORD(PS_DIN_BASE,0) == 0)
            {
                 IOWR(USER_LED_BASE,0,0);
   11418:	008000b4 	movhi	r2,2
   1141c:	10882404 	addi	r2,r2,8336
   11420:	10000035 	stwio	zero,0(r2)
                 if(i >= 4) i = 0;
   11424:	d0a01817 	ldw	r2,-32672(gp)
   11428:	10800110 	cmplti	r2,r2,4
   1142c:	1000021e 	bne	r2,zero,11438 <main+0x488>
   11430:	d0201815 	stw	zero,-32672(gp)
   11434:	00000306 	br	11444 <main+0x494>
                 else    i++;
   11438:	d0a01817 	ldw	r2,-32672(gp)
   1143c:	10800044 	addi	r2,r2,1
   11440:	d0a01815 	stw	r2,-32672(gp)
                 usleep(300000);
   11444:	01000174 	movhi	r4,5
   11448:	2124f804 	addi	r4,r4,-27680
   1144c:	00152880 	call	15288 <usleep>
                 move_bwd();
   11450:	0010d440 	call	10d44 <move_bwd>
                 IOWR(USER_LED_BASE,0,7);
   11454:	00c000b4 	movhi	r3,2
   11458:	18c82404 	addi	r3,r3,8336
   1145c:	008001c4 	movi	r2,7
   11460:	18800035 	stwio	r2,0(r3)
                 usleep(300000);
   11464:	01000174 	movhi	r4,5
   11468:	2124f804 	addi	r4,r4,-27680
   1146c:	00152880 	call	15288 <usleep>
                 turn_left();
   11470:	00106780 	call	10678 <turn_left>
                 usleep(300000);
   11474:	01000174 	movhi	r4,5
   11478:	2124f804 	addi	r4,r4,-27680
   1147c:	00152880 	call	15288 <usleep>
                turn_left();
             }
        }
        else
        {
            while ( IORD(PS_DIN_BASE,0) == 0)
   11480:	008000b4 	movhi	r2,2
   11484:	10883804 	addi	r2,r2,8416
   11488:	10800037 	ldwio	r2,0(r2)
   1148c:	1005003a 	cmpeq	r2,r2,zero
   11490:	103fe11e 	bne	r2,zero,11418 <main+0x468>
                 usleep(300000);
            }
        }

    }
  }
   11494:	003f9406 	br	112e8 <main+0x338>

00011498 <LCD_init>:
   11498:	defff104 	addi	sp,sp,-60
   1149c:	df000e15 	stw	fp,56(sp)
   114a0:	df000e04 	addi	fp,sp,56
   114a4:	e13fff15 	stw	r4,-4(fp)
   114a8:	e03ffc15 	stw	zero,-16(fp)
   114ac:	e03ffb15 	stw	zero,-20(fp)
   114b0:	008027c4 	movi	r2,159
   114b4:	e0bffa15 	stw	r2,-24(fp)
   114b8:	00801fc4 	movi	r2,127
   114bc:	e0bff915 	stw	r2,-28(fp)
   114c0:	e0bfff17 	ldw	r2,-4(fp)
   114c4:	d0a02815 	stw	r2,-32608(gp)
   114c8:	d0e02817 	ldw	r3,-32608(gp)
   114cc:	00800044 	movi	r2,1
   114d0:	18800035 	stwio	r2,0(r3)
   114d4:	d0e02817 	ldw	r3,-32608(gp)
   114d8:	00800104 	movi	r2,4
   114dc:	18800035 	stwio	r2,0(r3)
   114e0:	d0a02817 	ldw	r2,-32608(gp)
   114e4:	10800104 	addi	r2,r2,4
   114e8:	10800037 	ldwio	r2,0(r2)
   114ec:	e0bff515 	stw	r2,-44(fp)
   114f0:	e0bff517 	ldw	r2,-44(fp)
   114f4:	e0bffd15 	stw	r2,-12(fp)
   114f8:	d0a02817 	ldw	r2,-32608(gp)
   114fc:	10800104 	addi	r2,r2,4
   11500:	10800037 	ldwio	r2,0(r2)
   11504:	e0bff415 	stw	r2,-48(fp)
   11508:	e0bff417 	ldw	r2,-48(fp)
   1150c:	e0bff815 	stw	r2,-32(fp)
   11510:	d0a02817 	ldw	r2,-32608(gp)
   11514:	10800104 	addi	r2,r2,4
   11518:	10800037 	ldwio	r2,0(r2)
   1151c:	e0bff315 	stw	r2,-52(fp)
   11520:	e0bff317 	ldw	r2,-52(fp)
   11524:	e0bff715 	stw	r2,-36(fp)
   11528:	d0a02817 	ldw	r2,-32608(gp)
   1152c:	10800104 	addi	r2,r2,4
   11530:	10800037 	ldwio	r2,0(r2)
   11534:	e0bff215 	stw	r2,-56(fp)
   11538:	e0bff217 	ldw	r2,-56(fp)
   1153c:	e0bff615 	stw	r2,-40(fp)
   11540:	d0e02817 	ldw	r3,-32608(gp)
   11544:	00800444 	movi	r2,17
   11548:	18800035 	stwio	r2,0(r3)
   1154c:	d0e02817 	ldw	r3,-32608(gp)
   11550:	00800e84 	movi	r2,58
   11554:	18800035 	stwio	r2,0(r3)
   11558:	d0a02817 	ldw	r2,-32608(gp)
   1155c:	10c00104 	addi	r3,r2,4
   11560:	00801d44 	movi	r2,117
   11564:	18800035 	stwio	r2,0(r3)
   11568:	e0bff817 	ldw	r2,-32(fp)
   1156c:	10801718 	cmpnei	r2,r2,92
   11570:	10000e1e 	bne	r2,zero,115ac <LCD_init+0x114>
   11574:	e0bff717 	ldw	r2,-36(fp)
   11578:	10802258 	cmpnei	r2,r2,137
   1157c:	10000b1e 	bne	r2,zero,115ac <LCD_init+0x114>
   11580:	e0bff617 	ldw	r2,-40(fp)
   11584:	10803c18 	cmpnei	r2,r2,240
   11588:	1000081e 	bne	r2,zero,115ac <LCD_init+0x114>
   1158c:	d0e02817 	ldw	r3,-32608(gp)
   11590:	00800d84 	movi	r2,54
   11594:	18800035 	stwio	r2,0(r3)
   11598:	d0a02817 	ldw	r2,-32608(gp)
   1159c:	10c00104 	addi	r3,r2,4
   115a0:	00802804 	movi	r2,160
   115a4:	18800035 	stwio	r2,0(r3)
   115a8:	00000706 	br	115c8 <LCD_init+0x130>
   115ac:	d0e02817 	ldw	r3,-32608(gp)
   115b0:	00800d84 	movi	r2,54
   115b4:	18800035 	stwio	r2,0(r3)
   115b8:	d0a02817 	ldw	r2,-32608(gp)
   115bc:	10c00104 	addi	r3,r2,4
   115c0:	00801a04 	movi	r2,104
   115c4:	18800035 	stwio	r2,0(r3)
   115c8:	d0a02817 	ldw	r2,-32608(gp)
   115cc:	1007883a 	mov	r3,r2
   115d0:	00803004 	movi	r2,192
   115d4:	18800035 	stwio	r2,0(r3)
   115d8:	d0a02817 	ldw	r2,-32608(gp)
   115dc:	10800104 	addi	r2,r2,4
   115e0:	1007883a 	mov	r3,r2
   115e4:	00800144 	movi	r2,5
   115e8:	18800035 	stwio	r2,0(r3)
   115ec:	d0a02817 	ldw	r2,-32608(gp)
   115f0:	10800104 	addi	r2,r2,4
   115f4:	1007883a 	mov	r3,r2
   115f8:	00800144 	movi	r2,5
   115fc:	18800035 	stwio	r2,0(r3)
   11600:	d0a02817 	ldw	r2,-32608(gp)
   11604:	1007883a 	mov	r3,r2
   11608:	00803044 	movi	r2,193
   1160c:	18800035 	stwio	r2,0(r3)
   11610:	d0a02817 	ldw	r2,-32608(gp)
   11614:	10800104 	addi	r2,r2,4
   11618:	1007883a 	mov	r3,r2
   1161c:	008001c4 	movi	r2,7
   11620:	18800035 	stwio	r2,0(r3)
   11624:	d0a02817 	ldw	r2,-32608(gp)
   11628:	1007883a 	mov	r3,r2
   1162c:	00803084 	movi	r2,194
   11630:	18800035 	stwio	r2,0(r3)
   11634:	d0a02817 	ldw	r2,-32608(gp)
   11638:	10800104 	addi	r2,r2,4
   1163c:	1007883a 	mov	r3,r2
   11640:	00800144 	movi	r2,5
   11644:	18800035 	stwio	r2,0(r3)
   11648:	d0a02817 	ldw	r2,-32608(gp)
   1164c:	10800104 	addi	r2,r2,4
   11650:	1007883a 	mov	r3,r2
   11654:	00800084 	movi	r2,2
   11658:	18800035 	stwio	r2,0(r3)
   1165c:	d0a02817 	ldw	r2,-32608(gp)
   11660:	1007883a 	mov	r3,r2
   11664:	008030c4 	movi	r2,195
   11668:	18800035 	stwio	r2,0(r3)
   1166c:	d0a02817 	ldw	r2,-32608(gp)
   11670:	10800104 	addi	r2,r2,4
   11674:	1007883a 	mov	r3,r2
   11678:	00802284 	movi	r2,138
   1167c:	18800035 	stwio	r2,0(r3)
   11680:	d0a02817 	ldw	r2,-32608(gp)
   11684:	10800104 	addi	r2,r2,4
   11688:	1007883a 	mov	r3,r2
   1168c:	00800a84 	movi	r2,42
   11690:	18800035 	stwio	r2,0(r3)
   11694:	d0a02817 	ldw	r2,-32608(gp)
   11698:	1007883a 	mov	r3,r2
   1169c:	00803104 	movi	r2,196
   116a0:	18800035 	stwio	r2,0(r3)
   116a4:	d0a02817 	ldw	r2,-32608(gp)
   116a8:	10800104 	addi	r2,r2,4
   116ac:	1007883a 	mov	r3,r2
   116b0:	00800144 	movi	r2,5
   116b4:	18800035 	stwio	r2,0(r3)
   116b8:	d0a02817 	ldw	r2,-32608(gp)
   116bc:	10800104 	addi	r2,r2,4
   116c0:	1007883a 	mov	r3,r2
   116c4:	00800084 	movi	r2,2
   116c8:	18800035 	stwio	r2,0(r3)
   116cc:	d0a02817 	ldw	r2,-32608(gp)
   116d0:	1007883a 	mov	r3,r2
   116d4:	00803144 	movi	r2,197
   116d8:	18800035 	stwio	r2,0(r3)
   116dc:	d0a02817 	ldw	r2,-32608(gp)
   116e0:	10800104 	addi	r2,r2,4
   116e4:	1007883a 	mov	r3,r2
   116e8:	00803404 	movi	r2,208
   116ec:	18800035 	stwio	r2,0(r3)
   116f0:	d0a02817 	ldw	r2,-32608(gp)
   116f4:	1007883a 	mov	r3,r2
   116f8:	00803184 	movi	r2,198
   116fc:	18800035 	stwio	r2,0(r3)
   11700:	d0a02817 	ldw	r2,-32608(gp)
   11704:	10800104 	addi	r2,r2,4
   11708:	1007883a 	mov	r3,r2
   1170c:	00800544 	movi	r2,21
   11710:	18800035 	stwio	r2,0(r3)
   11714:	d0e02817 	ldw	r3,-32608(gp)
   11718:	00800a44 	movi	r2,41
   1171c:	18800035 	stwio	r2,0(r3)
   11720:	e03ffc15 	stw	zero,-16(fp)
   11724:	e03ffb15 	stw	zero,-20(fp)
   11728:	008027c4 	movi	r2,159
   1172c:	e0bffa15 	stw	r2,-24(fp)
   11730:	00801fc4 	movi	r2,127
   11734:	e0bff915 	stw	r2,-28(fp)
   11738:	d0e02817 	ldw	r3,-32608(gp)
   1173c:	00800a84 	movi	r2,42
   11740:	18800035 	stwio	r2,0(r3)
   11744:	e0bffc17 	ldw	r2,-16(fp)
   11748:	10bfc00c 	andi	r2,r2,65280
   1174c:	1007d23a 	srai	r3,r2,8
   11750:	d0a02817 	ldw	r2,-32608(gp)
   11754:	10800104 	addi	r2,r2,4
   11758:	10c00035 	stwio	r3,0(r2)
   1175c:	e0bffc17 	ldw	r2,-16(fp)
   11760:	10c03fcc 	andi	r3,r2,255
   11764:	d0a02817 	ldw	r2,-32608(gp)
   11768:	10800104 	addi	r2,r2,4
   1176c:	10c00035 	stwio	r3,0(r2)
   11770:	e0bffa17 	ldw	r2,-24(fp)
   11774:	10bfc00c 	andi	r2,r2,65280
   11778:	1007d23a 	srai	r3,r2,8
   1177c:	d0a02817 	ldw	r2,-32608(gp)
   11780:	10800104 	addi	r2,r2,4
   11784:	10c00035 	stwio	r3,0(r2)
   11788:	e0bffa17 	ldw	r2,-24(fp)
   1178c:	10c03fcc 	andi	r3,r2,255
   11790:	d0a02817 	ldw	r2,-32608(gp)
   11794:	10800104 	addi	r2,r2,4
   11798:	10c00035 	stwio	r3,0(r2)
   1179c:	d0e02817 	ldw	r3,-32608(gp)
   117a0:	00800ac4 	movi	r2,43
   117a4:	18800035 	stwio	r2,0(r3)
   117a8:	e0bffb17 	ldw	r2,-20(fp)
   117ac:	10bfc00c 	andi	r2,r2,65280
   117b0:	1007d23a 	srai	r3,r2,8
   117b4:	d0a02817 	ldw	r2,-32608(gp)
   117b8:	10800104 	addi	r2,r2,4
   117bc:	10c00035 	stwio	r3,0(r2)
   117c0:	e0bffb17 	ldw	r2,-20(fp)
   117c4:	10c03fcc 	andi	r3,r2,255
   117c8:	d0a02817 	ldw	r2,-32608(gp)
   117cc:	10800104 	addi	r2,r2,4
   117d0:	10c00035 	stwio	r3,0(r2)
   117d4:	e0bff917 	ldw	r2,-28(fp)
   117d8:	10bfc00c 	andi	r2,r2,65280
   117dc:	1007d23a 	srai	r3,r2,8
   117e0:	d0a02817 	ldw	r2,-32608(gp)
   117e4:	10800104 	addi	r2,r2,4
   117e8:	10c00035 	stwio	r3,0(r2)
   117ec:	e0bff917 	ldw	r2,-28(fp)
   117f0:	10c03fcc 	andi	r3,r2,255
   117f4:	d0a02817 	ldw	r2,-32608(gp)
   117f8:	10800104 	addi	r2,r2,4
   117fc:	10c00035 	stwio	r3,0(r2)
   11800:	d0e02817 	ldw	r3,-32608(gp)
   11804:	00800b04 	movi	r2,44
   11808:	18800035 	stwio	r2,0(r3)
   1180c:	e03ffe15 	stw	zero,-8(fp)
   11810:	00000b06 	br	11840 <LCD_init+0x3a8>
   11814:	d0a02817 	ldw	r2,-32608(gp)
   11818:	10c00104 	addi	r3,r2,4
   1181c:	0005883a 	mov	r2,zero
   11820:	18800035 	stwio	r2,0(r3)
   11824:	d0a02817 	ldw	r2,-32608(gp)
   11828:	10c00104 	addi	r3,r2,4
   1182c:	008007c4 	movi	r2,31
   11830:	18800035 	stwio	r2,0(r3)
   11834:	e0bffe17 	ldw	r2,-8(fp)
   11838:	10800084 	addi	r2,r2,2
   1183c:	e0bffe15 	stw	r2,-8(fp)
   11840:	e0bffe17 	ldw	r2,-8(fp)
   11844:	108c8010 	cmplti	r2,r2,12800
   11848:	103ff21e 	bne	r2,zero,11814 <LCD_init+0x37c>
   1184c:	e03ffe15 	stw	zero,-8(fp)
   11850:	00000b06 	br	11880 <LCD_init+0x3e8>
   11854:	d0a02817 	ldw	r2,-32608(gp)
   11858:	10c00104 	addi	r3,r2,4
   1185c:	00803fc4 	movi	r2,255
   11860:	18800035 	stwio	r2,0(r3)
   11864:	d0a02817 	ldw	r2,-32608(gp)
   11868:	10c00104 	addi	r3,r2,4
   1186c:	00803fc4 	movi	r2,255
   11870:	18800035 	stwio	r2,0(r3)
   11874:	e0bffe17 	ldw	r2,-8(fp)
   11878:	10800084 	addi	r2,r2,2
   1187c:	e0bffe15 	stw	r2,-8(fp)
   11880:	e0bffe17 	ldw	r2,-8(fp)
   11884:	108c8010 	cmplti	r2,r2,12800
   11888:	103ff21e 	bne	r2,zero,11854 <LCD_init+0x3bc>
   1188c:	e03ffe15 	stw	zero,-8(fp)
   11890:	00000b06 	br	118c0 <LCD_init+0x428>
   11894:	d0a02817 	ldw	r2,-32608(gp)
   11898:	10c00104 	addi	r3,r2,4
   1189c:	00803e04 	movi	r2,248
   118a0:	18800035 	stwio	r2,0(r3)
   118a4:	d0a02817 	ldw	r2,-32608(gp)
   118a8:	10c00104 	addi	r3,r2,4
   118ac:	0005883a 	mov	r2,zero
   118b0:	18800035 	stwio	r2,0(r3)
   118b4:	e0bffe17 	ldw	r2,-8(fp)
   118b8:	10800084 	addi	r2,r2,2
   118bc:	e0bffe15 	stw	r2,-8(fp)
   118c0:	e0bffe17 	ldw	r2,-8(fp)
   118c4:	108f0010 	cmplti	r2,r2,15360
   118c8:	103ff21e 	bne	r2,zero,11894 <LCD_init+0x3fc>
   118cc:	d0e02817 	ldw	r3,-32608(gp)
   118d0:	00800a44 	movi	r2,41
   118d4:	18800035 	stwio	r2,0(r3)
   118d8:	e037883a 	mov	sp,fp
   118dc:	df000017 	ldw	fp,0(sp)
   118e0:	dec00104 	addi	sp,sp,4
   118e4:	f800283a 	ret

000118e8 <LCD_draw_line>:
   118e8:	defff804 	addi	sp,sp,-32
   118ec:	dfc00715 	stw	ra,28(sp)
   118f0:	df000615 	stw	fp,24(sp)
   118f4:	df000604 	addi	fp,sp,24
   118f8:	e13ffc15 	stw	r4,-16(fp)
   118fc:	e17ffd15 	stw	r5,-12(fp)
   11900:	e1bffe15 	stw	r6,-8(fp)
   11904:	e1ffff15 	stw	r7,-4(fp)
   11908:	e0fffd17 	ldw	r3,-12(fp)
   1190c:	e0bfff17 	ldw	r2,-4(fp)
   11910:	18800d1e 	bne	r3,r2,11948 <LCD_draw_line+0x60>
   11914:	e0bffc17 	ldw	r2,-16(fp)
   11918:	113fffcc 	andi	r4,r2,65535
   1191c:	2120001c 	xori	r4,r4,32768
   11920:	21200004 	addi	r4,r4,-32768
   11924:	e0bffe17 	ldw	r2,-8(fp)
   11928:	117fffcc 	andi	r5,r2,65535
   1192c:	2960001c 	xori	r5,r5,32768
   11930:	29600004 	addi	r5,r5,-32768
   11934:	e0bffd17 	ldw	r2,-12(fp)
   11938:	11bfffcc 	andi	r6,r2,65535
   1193c:	e1c00317 	ldw	r7,12(fp)
   11940:	00120e00 	call	120e0 <LCD_draw_horiz_line>
   11944:	00000e06 	br	11980 <LCD_draw_line+0x98>
   11948:	e0bffc17 	ldw	r2,-16(fp)
   1194c:	113fffcc 	andi	r4,r2,65535
   11950:	e0bffd17 	ldw	r2,-12(fp)
   11954:	117fffcc 	andi	r5,r2,65535
   11958:	e0bffe17 	ldw	r2,-8(fp)
   1195c:	11bfffcc 	andi	r6,r2,65535
   11960:	e0bfff17 	ldw	r2,-4(fp)
   11964:	11ffffcc 	andi	r7,r2,65535
   11968:	e0800217 	ldw	r2,8(fp)
   1196c:	10bfffcc 	andi	r2,r2,65535
   11970:	d8800015 	stw	r2,0(sp)
   11974:	e0800317 	ldw	r2,12(fp)
   11978:	d8800115 	stw	r2,4(sp)
   1197c:	00123300 	call	12330 <LCD_draw_sloped_line>
   11980:	e037883a 	mov	sp,fp
   11984:	dfc00117 	ldw	ra,4(sp)
   11988:	df000017 	ldw	fp,0(sp)
   1198c:	dec00204 	addi	sp,sp,8
   11990:	f800283a 	ret

00011994 <LCD_print_string>:
   11994:	defff704 	addi	sp,sp,-36
   11998:	dfc00815 	stw	ra,32(sp)
   1199c:	df000715 	stw	fp,28(sp)
   119a0:	df000704 	addi	fp,sp,28
   119a4:	e13ffc15 	stw	r4,-16(fp)
   119a8:	e17ffd15 	stw	r5,-12(fp)
   119ac:	e1bffe15 	stw	r6,-8(fp)
   119b0:	e1ffff15 	stw	r7,-4(fp)
   119b4:	e03ffb15 	stw	zero,-20(fp)
   119b8:	e0bffc17 	ldw	r2,-16(fp)
   119bc:	e0bffa15 	stw	r2,-24(fp)
   119c0:	00003f06 	br	11ac0 <LCD_print_string+0x12c>
   119c4:	e0bffb17 	ldw	r2,-20(fp)
   119c8:	1007883a 	mov	r3,r2
   119cc:	e0800217 	ldw	r2,8(fp)
   119d0:	1885883a 	add	r2,r3,r2
   119d4:	10800003 	ldbu	r2,0(r2)
   119d8:	10803fcc 	andi	r2,r2,255
   119dc:	1080201c 	xori	r2,r2,128
   119e0:	10bfe004 	addi	r2,r2,-128
   119e4:	10800298 	cmpnei	r2,r2,10
   119e8:	1000091e 	bne	r2,zero,11a10 <LCD_print_string+0x7c>
   119ec:	e0bffa17 	ldw	r2,-24(fp)
   119f0:	e0bffc15 	stw	r2,-16(fp)
   119f4:	e0bffd17 	ldw	r2,-12(fp)
   119f8:	10800304 	addi	r2,r2,12
   119fc:	e0bffd15 	stw	r2,-12(fp)
   11a00:	e0bffb17 	ldw	r2,-20(fp)
   11a04:	10800044 	addi	r2,r2,1
   11a08:	e0bffb15 	stw	r2,-20(fp)
   11a0c:	00002c06 	br	11ac0 <LCD_print_string+0x12c>
   11a10:	e0bffb17 	ldw	r2,-20(fp)
   11a14:	108004d8 	cmpnei	r2,r2,19
   11a18:	1000151e 	bne	r2,zero,11a70 <LCD_print_string+0xdc>
   11a1c:	e0bfff17 	ldw	r2,-4(fp)
   11a20:	d8800015 	stw	r2,0(sp)
   11a24:	e13ffc17 	ldw	r4,-16(fp)
   11a28:	e17ffd17 	ldw	r5,-12(fp)
   11a2c:	e1bffe17 	ldw	r6,-8(fp)
   11a30:	01c00b84 	movi	r7,46
   11a34:	0011c140 	call	11c14 <LCD_print_char>
   11a38:	e0bffc17 	ldw	r2,-16(fp)
   11a3c:	10800204 	addi	r2,r2,8
   11a40:	e0bffc15 	stw	r2,-16(fp)
   11a44:	e0bfff17 	ldw	r2,-4(fp)
   11a48:	d8800015 	stw	r2,0(sp)
   11a4c:	e13ffc17 	ldw	r4,-16(fp)
   11a50:	e17ffd17 	ldw	r5,-12(fp)
   11a54:	e1bffe17 	ldw	r6,-8(fp)
   11a58:	01c00b84 	movi	r7,46
   11a5c:	0011c140 	call	11c14 <LCD_print_char>
   11a60:	e0bffc17 	ldw	r2,-16(fp)
   11a64:	10800204 	addi	r2,r2,8
   11a68:	e0bffc15 	stw	r2,-16(fp)
   11a6c:	00001e06 	br	11ae8 <LCD_print_string+0x154>
   11a70:	e0bffb17 	ldw	r2,-20(fp)
   11a74:	1007883a 	mov	r3,r2
   11a78:	e0800217 	ldw	r2,8(fp)
   11a7c:	1885883a 	add	r2,r3,r2
   11a80:	10800003 	ldbu	r2,0(r2)
   11a84:	11c03fcc 	andi	r7,r2,255
   11a88:	39c0201c 	xori	r7,r7,128
   11a8c:	39ffe004 	addi	r7,r7,-128
   11a90:	e0bfff17 	ldw	r2,-4(fp)
   11a94:	d8800015 	stw	r2,0(sp)
   11a98:	e13ffc17 	ldw	r4,-16(fp)
   11a9c:	e17ffd17 	ldw	r5,-12(fp)
   11aa0:	e1bffe17 	ldw	r6,-8(fp)
   11aa4:	0011c140 	call	11c14 <LCD_print_char>
   11aa8:	e0bffb17 	ldw	r2,-20(fp)
   11aac:	10800044 	addi	r2,r2,1
   11ab0:	e0bffb15 	stw	r2,-20(fp)
   11ab4:	e0bffc17 	ldw	r2,-16(fp)
   11ab8:	10800204 	addi	r2,r2,8
   11abc:	e0bffc15 	stw	r2,-16(fp)
   11ac0:	e0bffb17 	ldw	r2,-20(fp)
   11ac4:	1007883a 	mov	r3,r2
   11ac8:	e0800217 	ldw	r2,8(fp)
   11acc:	1885883a 	add	r2,r3,r2
   11ad0:	10800003 	ldbu	r2,0(r2)
   11ad4:	10803fcc 	andi	r2,r2,255
   11ad8:	1080201c 	xori	r2,r2,128
   11adc:	10bfe004 	addi	r2,r2,-128
   11ae0:	1004c03a 	cmpne	r2,r2,zero
   11ae4:	103fb71e 	bne	r2,zero,119c4 <LCD_print_string+0x30>
   11ae8:	0005883a 	mov	r2,zero
   11aec:	e037883a 	mov	sp,fp
   11af0:	dfc00117 	ldw	ra,4(sp)
   11af4:	df000017 	ldw	fp,0(sp)
   11af8:	dec00204 	addi	sp,sp,8
   11afc:	f800283a 	ret

00011b00 <LCD_draw_box>:
   11b00:	defff804 	addi	sp,sp,-32
   11b04:	dfc00715 	stw	ra,28(sp)
   11b08:	df000615 	stw	fp,24(sp)
   11b0c:	df000604 	addi	fp,sp,24
   11b10:	e13ffc15 	stw	r4,-16(fp)
   11b14:	e17ffd15 	stw	r5,-12(fp)
   11b18:	e1bffe15 	stw	r6,-8(fp)
   11b1c:	e1ffff15 	stw	r7,-4(fp)
   11b20:	e0800317 	ldw	r2,12(fp)
   11b24:	1005003a 	cmpeq	r2,r2,zero
   11b28:	1000081e 	bne	r2,zero,11b4c <LCD_draw_box+0x4c>
   11b2c:	e0800217 	ldw	r2,8(fp)
   11b30:	d8800015 	stw	r2,0(sp)
   11b34:	e13ffc17 	ldw	r4,-16(fp)
   11b38:	e17ffd17 	ldw	r5,-12(fp)
   11b3c:	e1bffe17 	ldw	r6,-8(fp)
   11b40:	e1ffff17 	ldw	r7,-4(fp)
   11b44:	0011f680 	call	11f68 <LCD_paint_block>
   11b48:	00002c06 	br	11bfc <LCD_draw_box+0xfc>
   11b4c:	e0bfff17 	ldw	r2,-4(fp)
   11b50:	11ffffc4 	addi	r7,r2,-1
   11b54:	00800044 	movi	r2,1
   11b58:	d8800015 	stw	r2,0(sp)
   11b5c:	e0800217 	ldw	r2,8(fp)
   11b60:	d8800115 	stw	r2,4(sp)
   11b64:	e13ffc17 	ldw	r4,-16(fp)
   11b68:	e17ffd17 	ldw	r5,-12(fp)
   11b6c:	e1bffc17 	ldw	r6,-16(fp)
   11b70:	00118e80 	call	118e8 <LCD_draw_line>
   11b74:	e0bffe17 	ldw	r2,-8(fp)
   11b78:	113fffc4 	addi	r4,r2,-1
   11b7c:	e0bffe17 	ldw	r2,-8(fp)
   11b80:	11bfffc4 	addi	r6,r2,-1
   11b84:	e0bfff17 	ldw	r2,-4(fp)
   11b88:	11ffffc4 	addi	r7,r2,-1
   11b8c:	00800044 	movi	r2,1
   11b90:	d8800015 	stw	r2,0(sp)
   11b94:	e0800217 	ldw	r2,8(fp)
   11b98:	d8800115 	stw	r2,4(sp)
   11b9c:	e17ffd17 	ldw	r5,-12(fp)
   11ba0:	00118e80 	call	118e8 <LCD_draw_line>
   11ba4:	e0bffe17 	ldw	r2,-8(fp)
   11ba8:	11bfffc4 	addi	r6,r2,-1
   11bac:	00800044 	movi	r2,1
   11bb0:	d8800015 	stw	r2,0(sp)
   11bb4:	e0800217 	ldw	r2,8(fp)
   11bb8:	d8800115 	stw	r2,4(sp)
   11bbc:	e13ffc17 	ldw	r4,-16(fp)
   11bc0:	e17ffd17 	ldw	r5,-12(fp)
   11bc4:	e1fffd17 	ldw	r7,-12(fp)
   11bc8:	00118e80 	call	118e8 <LCD_draw_line>
   11bcc:	e0bfff17 	ldw	r2,-4(fp)
   11bd0:	117fffc4 	addi	r5,r2,-1
   11bd4:	e0bffe17 	ldw	r2,-8(fp)
   11bd8:	11bfffc4 	addi	r6,r2,-1
   11bdc:	e0bfff17 	ldw	r2,-4(fp)
   11be0:	11ffffc4 	addi	r7,r2,-1
   11be4:	00800044 	movi	r2,1
   11be8:	d8800015 	stw	r2,0(sp)
   11bec:	e0800217 	ldw	r2,8(fp)
   11bf0:	d8800115 	stw	r2,4(sp)
   11bf4:	e13ffc17 	ldw	r4,-16(fp)
   11bf8:	00118e80 	call	118e8 <LCD_draw_line>
   11bfc:	0005883a 	mov	r2,zero
   11c00:	e037883a 	mov	sp,fp
   11c04:	dfc00117 	ldw	ra,4(sp)
   11c08:	df000017 	ldw	fp,0(sp)
   11c0c:	dec00204 	addi	sp,sp,8
   11c10:	f800283a 	ret

00011c14 <LCD_print_char>:
   11c14:	defff704 	addi	sp,sp,-36
   11c18:	dfc00815 	stw	ra,32(sp)
   11c1c:	df000715 	stw	fp,28(sp)
   11c20:	df000704 	addi	fp,sp,28
   11c24:	e13ffc15 	stw	r4,-16(fp)
   11c28:	e17ffd15 	stw	r5,-12(fp)
   11c2c:	e1bffe15 	stw	r6,-8(fp)
   11c30:	e1ffff05 	stb	r7,-4(fp)
   11c34:	e0bfff03 	ldbu	r2,-4(fp)
   11c38:	10bff804 	addi	r2,r2,-32
   11c3c:	e0bff945 	stb	r2,-27(fp)
   11c40:	e03ffb15 	stw	zero,-20(fp)
   11c44:	00002406 	br	11cd8 <LCD_print_char+0xc4>
   11c48:	e13ff947 	ldb	r4,-27(fp)
   11c4c:	014002c4 	movi	r5,11
   11c50:	00147640 	call	14764 <__mulsi3>
   11c54:	1007883a 	mov	r3,r2
   11c58:	e0800217 	ldw	r2,8(fp)
   11c5c:	1887883a 	add	r3,r3,r2
   11c60:	e0bffb17 	ldw	r2,-20(fp)
   11c64:	1885883a 	add	r2,r3,r2
   11c68:	10800003 	ldbu	r2,0(r2)
   11c6c:	e0bff905 	stb	r2,-28(fp)
   11c70:	e03ffa15 	stw	zero,-24(fp)
   11c74:	00001206 	br	11cc0 <LCD_print_char+0xac>
   11c78:	e13ff907 	ldb	r4,-28(fp)
   11c7c:	00c02004 	movi	r3,128
   11c80:	e0bffa17 	ldw	r2,-24(fp)
   11c84:	1885d83a 	sra	r2,r3,r2
   11c88:	2084703a 	and	r2,r4,r2
   11c8c:	1005003a 	cmpeq	r2,r2,zero
   11c90:	1000081e 	bne	r2,zero,11cb4 <LCD_print_char+0xa0>
   11c94:	e0fffc17 	ldw	r3,-16(fp)
   11c98:	e0bffa17 	ldw	r2,-24(fp)
   11c9c:	1889883a 	add	r4,r3,r2
   11ca0:	e0fffd17 	ldw	r3,-12(fp)
   11ca4:	e0bffb17 	ldw	r2,-20(fp)
   11ca8:	188b883a 	add	r5,r3,r2
   11cac:	e1bffe17 	ldw	r6,-8(fp)
   11cb0:	0011cfc0 	call	11cfc <LCD_set_pixel>
   11cb4:	e0bffa17 	ldw	r2,-24(fp)
   11cb8:	10800044 	addi	r2,r2,1
   11cbc:	e0bffa15 	stw	r2,-24(fp)
   11cc0:	e0bffa17 	ldw	r2,-24(fp)
   11cc4:	10800210 	cmplti	r2,r2,8
   11cc8:	103feb1e 	bne	r2,zero,11c78 <LCD_print_char+0x64>
   11ccc:	e0bffb17 	ldw	r2,-20(fp)
   11cd0:	10800044 	addi	r2,r2,1
   11cd4:	e0bffb15 	stw	r2,-20(fp)
   11cd8:	e0bffb17 	ldw	r2,-20(fp)
   11cdc:	108002d0 	cmplti	r2,r2,11
   11ce0:	103fd91e 	bne	r2,zero,11c48 <LCD_print_char+0x34>
   11ce4:	0005883a 	mov	r2,zero
   11ce8:	e037883a 	mov	sp,fp
   11cec:	dfc00117 	ldw	ra,4(sp)
   11cf0:	df000017 	ldw	fp,0(sp)
   11cf4:	dec00204 	addi	sp,sp,8
   11cf8:	f800283a 	ret

00011cfc <LCD_set_pixel>:
   11cfc:	defffb04 	addi	sp,sp,-20
   11d00:	df000415 	stw	fp,16(sp)
   11d04:	df000404 	addi	fp,sp,16
   11d08:	e13ffd15 	stw	r4,-12(fp)
   11d0c:	e17ffe15 	stw	r5,-8(fp)
   11d10:	e1bfff15 	stw	r6,-4(fp)
   11d14:	d0e02817 	ldw	r3,-32608(gp)
   11d18:	00800a84 	movi	r2,42
   11d1c:	18800035 	stwio	r2,0(r3)
   11d20:	e0bffd17 	ldw	r2,-12(fp)
   11d24:	10bfc00c 	andi	r2,r2,65280
   11d28:	1007d23a 	srai	r3,r2,8
   11d2c:	d0a02817 	ldw	r2,-32608(gp)
   11d30:	10800104 	addi	r2,r2,4
   11d34:	10c00035 	stwio	r3,0(r2)
   11d38:	e0bffd17 	ldw	r2,-12(fp)
   11d3c:	10c03fcc 	andi	r3,r2,255
   11d40:	d0a02817 	ldw	r2,-32608(gp)
   11d44:	10800104 	addi	r2,r2,4
   11d48:	10c00035 	stwio	r3,0(r2)
   11d4c:	e0bffd17 	ldw	r2,-12(fp)
   11d50:	10bfc00c 	andi	r2,r2,65280
   11d54:	1007d23a 	srai	r3,r2,8
   11d58:	d0a02817 	ldw	r2,-32608(gp)
   11d5c:	10800104 	addi	r2,r2,4
   11d60:	10c00035 	stwio	r3,0(r2)
   11d64:	e0bffd17 	ldw	r2,-12(fp)
   11d68:	10c03fcc 	andi	r3,r2,255
   11d6c:	d0a02817 	ldw	r2,-32608(gp)
   11d70:	10800104 	addi	r2,r2,4
   11d74:	10c00035 	stwio	r3,0(r2)
   11d78:	d0e02817 	ldw	r3,-32608(gp)
   11d7c:	00800ac4 	movi	r2,43
   11d80:	18800035 	stwio	r2,0(r3)
   11d84:	e0bffe17 	ldw	r2,-8(fp)
   11d88:	10bfc00c 	andi	r2,r2,65280
   11d8c:	1007d23a 	srai	r3,r2,8
   11d90:	d0a02817 	ldw	r2,-32608(gp)
   11d94:	10800104 	addi	r2,r2,4
   11d98:	10c00035 	stwio	r3,0(r2)
   11d9c:	e0bffe17 	ldw	r2,-8(fp)
   11da0:	10c03fcc 	andi	r3,r2,255
   11da4:	d0a02817 	ldw	r2,-32608(gp)
   11da8:	10800104 	addi	r2,r2,4
   11dac:	10c00035 	stwio	r3,0(r2)
   11db0:	e0bffe17 	ldw	r2,-8(fp)
   11db4:	10bfc00c 	andi	r2,r2,65280
   11db8:	1007d23a 	srai	r3,r2,8
   11dbc:	d0a02817 	ldw	r2,-32608(gp)
   11dc0:	10800104 	addi	r2,r2,4
   11dc4:	10c00035 	stwio	r3,0(r2)
   11dc8:	e0bffe17 	ldw	r2,-8(fp)
   11dcc:	10c03fcc 	andi	r3,r2,255
   11dd0:	d0a02817 	ldw	r2,-32608(gp)
   11dd4:	10800104 	addi	r2,r2,4
   11dd8:	10c00035 	stwio	r3,0(r2)
   11ddc:	d0e02817 	ldw	r3,-32608(gp)
   11de0:	00800b04 	movi	r2,44
   11de4:	18800035 	stwio	r2,0(r3)
   11de8:	e0bfff17 	ldw	r2,-4(fp)
   11dec:	1006d23a 	srli	r3,r2,8
   11df0:	d0a02817 	ldw	r2,-32608(gp)
   11df4:	10800104 	addi	r2,r2,4
   11df8:	10c00035 	stwio	r3,0(r2)
   11dfc:	d0a02817 	ldw	r2,-32608(gp)
   11e00:	10c00104 	addi	r3,r2,4
   11e04:	e0bfff17 	ldw	r2,-4(fp)
   11e08:	18800035 	stwio	r2,0(r3)
   11e0c:	e037883a 	mov	sp,fp
   11e10:	df000017 	ldw	fp,0(sp)
   11e14:	dec00104 	addi	sp,sp,4
   11e18:	f800283a 	ret

00011e1c <LCD_get_pixel>:
   11e1c:	defff904 	addi	sp,sp,-28
   11e20:	df000615 	stw	fp,24(sp)
   11e24:	df000604 	addi	fp,sp,24
   11e28:	e13ffe15 	stw	r4,-8(fp)
   11e2c:	e17fff15 	stw	r5,-4(fp)
   11e30:	d0e02817 	ldw	r3,-32608(gp)
   11e34:	00800a84 	movi	r2,42
   11e38:	18800035 	stwio	r2,0(r3)
   11e3c:	e0bffe17 	ldw	r2,-8(fp)
   11e40:	10bfc00c 	andi	r2,r2,65280
   11e44:	1007d23a 	srai	r3,r2,8
   11e48:	d0a02817 	ldw	r2,-32608(gp)
   11e4c:	10800104 	addi	r2,r2,4
   11e50:	10c00035 	stwio	r3,0(r2)
   11e54:	e0bffe17 	ldw	r2,-8(fp)
   11e58:	10c03fcc 	andi	r3,r2,255
   11e5c:	d0a02817 	ldw	r2,-32608(gp)
   11e60:	10800104 	addi	r2,r2,4
   11e64:	10c00035 	stwio	r3,0(r2)
   11e68:	e0bffe17 	ldw	r2,-8(fp)
   11e6c:	10bfc00c 	andi	r2,r2,65280
   11e70:	1007d23a 	srai	r3,r2,8
   11e74:	d0a02817 	ldw	r2,-32608(gp)
   11e78:	10800104 	addi	r2,r2,4
   11e7c:	10c00035 	stwio	r3,0(r2)
   11e80:	e0bffe17 	ldw	r2,-8(fp)
   11e84:	10c03fcc 	andi	r3,r2,255
   11e88:	d0a02817 	ldw	r2,-32608(gp)
   11e8c:	10800104 	addi	r2,r2,4
   11e90:	10c00035 	stwio	r3,0(r2)
   11e94:	d0e02817 	ldw	r3,-32608(gp)
   11e98:	00800ac4 	movi	r2,43
   11e9c:	18800035 	stwio	r2,0(r3)
   11ea0:	e0bfff17 	ldw	r2,-4(fp)
   11ea4:	10bfc00c 	andi	r2,r2,65280
   11ea8:	1007d23a 	srai	r3,r2,8
   11eac:	d0a02817 	ldw	r2,-32608(gp)
   11eb0:	10800104 	addi	r2,r2,4
   11eb4:	10c00035 	stwio	r3,0(r2)
   11eb8:	e0bfff17 	ldw	r2,-4(fp)
   11ebc:	10c03fcc 	andi	r3,r2,255
   11ec0:	d0a02817 	ldw	r2,-32608(gp)
   11ec4:	10800104 	addi	r2,r2,4
   11ec8:	10c00035 	stwio	r3,0(r2)
   11ecc:	e0bfff17 	ldw	r2,-4(fp)
   11ed0:	10bfc00c 	andi	r2,r2,65280
   11ed4:	1007d23a 	srai	r3,r2,8
   11ed8:	d0a02817 	ldw	r2,-32608(gp)
   11edc:	10800104 	addi	r2,r2,4
   11ee0:	10c00035 	stwio	r3,0(r2)
   11ee4:	e0bfff17 	ldw	r2,-4(fp)
   11ee8:	10c03fcc 	andi	r3,r2,255
   11eec:	d0a02817 	ldw	r2,-32608(gp)
   11ef0:	10800104 	addi	r2,r2,4
   11ef4:	10c00035 	stwio	r3,0(r2)
   11ef8:	d0e02817 	ldw	r3,-32608(gp)
   11efc:	00800b84 	movi	r2,46
   11f00:	18800035 	stwio	r2,0(r3)
   11f04:	d0a02817 	ldw	r2,-32608(gp)
   11f08:	10800104 	addi	r2,r2,4
   11f0c:	10800037 	ldwio	r2,0(r2)
   11f10:	e0bffc15 	stw	r2,-16(fp)
   11f14:	d0a02817 	ldw	r2,-32608(gp)
   11f18:	10800104 	addi	r2,r2,4
   11f1c:	10800037 	ldwio	r2,0(r2)
   11f20:	e0bffb15 	stw	r2,-20(fp)
   11f24:	e0bffb17 	ldw	r2,-20(fp)
   11f28:	e0bffd0d 	sth	r2,-12(fp)
   11f2c:	e0bffd0b 	ldhu	r2,-12(fp)
   11f30:	1004923a 	slli	r2,r2,8
   11f34:	1007883a 	mov	r3,r2
   11f38:	d0a02817 	ldw	r2,-32608(gp)
   11f3c:	10800104 	addi	r2,r2,4
   11f40:	10800037 	ldwio	r2,0(r2)
   11f44:	e0bffa15 	stw	r2,-24(fp)
   11f48:	e0bffa17 	ldw	r2,-24(fp)
   11f4c:	1884b03a 	or	r2,r3,r2
   11f50:	e0bffd0d 	sth	r2,-12(fp)
   11f54:	e0bffd0b 	ldhu	r2,-12(fp)
   11f58:	e037883a 	mov	sp,fp
   11f5c:	df000017 	ldw	fp,0(sp)
   11f60:	dec00104 	addi	sp,sp,4
   11f64:	f800283a 	ret

00011f68 <LCD_paint_block>:
   11f68:	defff804 	addi	sp,sp,-32
   11f6c:	dfc00715 	stw	ra,28(sp)
   11f70:	df000615 	stw	fp,24(sp)
   11f74:	df000604 	addi	fp,sp,24
   11f78:	e13ffc15 	stw	r4,-16(fp)
   11f7c:	e17ffd15 	stw	r5,-12(fp)
   11f80:	e1bffe15 	stw	r6,-8(fp)
   11f84:	e1ffff15 	stw	r7,-4(fp)
   11f88:	e0fffe17 	ldw	r3,-8(fp)
   11f8c:	e0bffc17 	ldw	r2,-16(fp)
   11f90:	1885c83a 	sub	r2,r3,r2
   11f94:	1085883a 	add	r2,r2,r2
   11f98:	11000084 	addi	r4,r2,2
   11f9c:	e0ffff17 	ldw	r3,-4(fp)
   11fa0:	e0bffd17 	ldw	r2,-12(fp)
   11fa4:	1885c83a 	sub	r2,r3,r2
   11fa8:	11400044 	addi	r5,r2,1
   11fac:	00147640 	call	14764 <__mulsi3>
   11fb0:	e0bffa15 	stw	r2,-24(fp)
   11fb4:	d0e02817 	ldw	r3,-32608(gp)
   11fb8:	00800a84 	movi	r2,42
   11fbc:	18800035 	stwio	r2,0(r3)
   11fc0:	e0bffc17 	ldw	r2,-16(fp)
   11fc4:	10bfc00c 	andi	r2,r2,65280
   11fc8:	1007d23a 	srai	r3,r2,8
   11fcc:	d0a02817 	ldw	r2,-32608(gp)
   11fd0:	10800104 	addi	r2,r2,4
   11fd4:	10c00035 	stwio	r3,0(r2)
   11fd8:	e0bffc17 	ldw	r2,-16(fp)
   11fdc:	10c03fcc 	andi	r3,r2,255
   11fe0:	d0a02817 	ldw	r2,-32608(gp)
   11fe4:	10800104 	addi	r2,r2,4
   11fe8:	10c00035 	stwio	r3,0(r2)
   11fec:	e0bffe17 	ldw	r2,-8(fp)
   11ff0:	10bfc00c 	andi	r2,r2,65280
   11ff4:	1007d23a 	srai	r3,r2,8
   11ff8:	d0a02817 	ldw	r2,-32608(gp)
   11ffc:	10800104 	addi	r2,r2,4
   12000:	10c00035 	stwio	r3,0(r2)
   12004:	e0bffe17 	ldw	r2,-8(fp)
   12008:	10c03fcc 	andi	r3,r2,255
   1200c:	d0a02817 	ldw	r2,-32608(gp)
   12010:	10800104 	addi	r2,r2,4
   12014:	10c00035 	stwio	r3,0(r2)
   12018:	d0e02817 	ldw	r3,-32608(gp)
   1201c:	00800ac4 	movi	r2,43
   12020:	18800035 	stwio	r2,0(r3)
   12024:	e0bffd17 	ldw	r2,-12(fp)
   12028:	10bfc00c 	andi	r2,r2,65280
   1202c:	1007d23a 	srai	r3,r2,8
   12030:	d0a02817 	ldw	r2,-32608(gp)
   12034:	10800104 	addi	r2,r2,4
   12038:	10c00035 	stwio	r3,0(r2)
   1203c:	e0bffd17 	ldw	r2,-12(fp)
   12040:	10c03fcc 	andi	r3,r2,255
   12044:	d0a02817 	ldw	r2,-32608(gp)
   12048:	10800104 	addi	r2,r2,4
   1204c:	10c00035 	stwio	r3,0(r2)
   12050:	e0bfff17 	ldw	r2,-4(fp)
   12054:	10bfc00c 	andi	r2,r2,65280
   12058:	1007d23a 	srai	r3,r2,8
   1205c:	d0a02817 	ldw	r2,-32608(gp)
   12060:	10800104 	addi	r2,r2,4
   12064:	10c00035 	stwio	r3,0(r2)
   12068:	e0bfff17 	ldw	r2,-4(fp)
   1206c:	10c03fcc 	andi	r3,r2,255
   12070:	d0a02817 	ldw	r2,-32608(gp)
   12074:	10800104 	addi	r2,r2,4
   12078:	10c00035 	stwio	r3,0(r2)
   1207c:	d0e02817 	ldw	r3,-32608(gp)
   12080:	00800b04 	movi	r2,44
   12084:	18800035 	stwio	r2,0(r3)
   12088:	e03ffb15 	stw	zero,-20(fp)
   1208c:	00000c06 	br	120c0 <LCD_paint_block+0x158>
   12090:	e0800217 	ldw	r2,8(fp)
   12094:	1007d23a 	srai	r3,r2,8
   12098:	d0a02817 	ldw	r2,-32608(gp)
   1209c:	10800104 	addi	r2,r2,4
   120a0:	10c00035 	stwio	r3,0(r2)
   120a4:	d0a02817 	ldw	r2,-32608(gp)
   120a8:	10c00104 	addi	r3,r2,4
   120ac:	e0800217 	ldw	r2,8(fp)
   120b0:	18800035 	stwio	r2,0(r3)
   120b4:	e0bffb17 	ldw	r2,-20(fp)
   120b8:	10800084 	addi	r2,r2,2
   120bc:	e0bffb15 	stw	r2,-20(fp)
   120c0:	e0fffb17 	ldw	r3,-20(fp)
   120c4:	e0bffa17 	ldw	r2,-24(fp)
   120c8:	18bff136 	bltu	r3,r2,12090 <LCD_paint_block+0x128>
   120cc:	e037883a 	mov	sp,fp
   120d0:	dfc00117 	ldw	ra,4(sp)
   120d4:	df000017 	ldw	fp,0(sp)
   120d8:	dec00204 	addi	sp,sp,8
   120dc:	f800283a 	ret

000120e0 <LCD_draw_horiz_line>:
   120e0:	defff904 	addi	sp,sp,-28
   120e4:	df000615 	stw	fp,24(sp)
   120e8:	df000604 	addi	fp,sp,24
   120ec:	e1bffe15 	stw	r6,-8(fp)
   120f0:	e1ffff15 	stw	r7,-4(fp)
   120f4:	e13ffc0d 	sth	r4,-16(fp)
   120f8:	e17ffd0d 	sth	r5,-12(fp)
   120fc:	e0fffd0f 	ldh	r3,-12(fp)
   12100:	e0bffc0f 	ldh	r2,-16(fp)
   12104:	1885c83a 	sub	r2,r3,r2
   12108:	1085883a 	add	r2,r2,r2
   1210c:	e0bffa15 	stw	r2,-24(fp)
   12110:	d0e02817 	ldw	r3,-32608(gp)
   12114:	00800a84 	movi	r2,42
   12118:	18800035 	stwio	r2,0(r3)
   1211c:	e0bffc0f 	ldh	r2,-16(fp)
   12120:	10bfc00c 	andi	r2,r2,65280
   12124:	1007d23a 	srai	r3,r2,8
   12128:	d0a02817 	ldw	r2,-32608(gp)
   1212c:	10800104 	addi	r2,r2,4
   12130:	10c00035 	stwio	r3,0(r2)
   12134:	e0bffc0b 	ldhu	r2,-16(fp)
   12138:	10bfffcc 	andi	r2,r2,65535
   1213c:	10c03fcc 	andi	r3,r2,255
   12140:	d0a02817 	ldw	r2,-32608(gp)
   12144:	10800104 	addi	r2,r2,4
   12148:	10c00035 	stwio	r3,0(r2)
   1214c:	e0bffd0f 	ldh	r2,-12(fp)
   12150:	10bfc00c 	andi	r2,r2,65280
   12154:	1007d23a 	srai	r3,r2,8
   12158:	d0a02817 	ldw	r2,-32608(gp)
   1215c:	10800104 	addi	r2,r2,4
   12160:	10c00035 	stwio	r3,0(r2)
   12164:	e0bffd0b 	ldhu	r2,-12(fp)
   12168:	10bfffcc 	andi	r2,r2,65535
   1216c:	10c03fcc 	andi	r3,r2,255
   12170:	d0a02817 	ldw	r2,-32608(gp)
   12174:	10800104 	addi	r2,r2,4
   12178:	10c00035 	stwio	r3,0(r2)
   1217c:	d0e02817 	ldw	r3,-32608(gp)
   12180:	00800ac4 	movi	r2,43
   12184:	18800035 	stwio	r2,0(r3)
   12188:	e0bffe17 	ldw	r2,-8(fp)
   1218c:	10bfc00c 	andi	r2,r2,65280
   12190:	1007d23a 	srai	r3,r2,8
   12194:	d0a02817 	ldw	r2,-32608(gp)
   12198:	10800104 	addi	r2,r2,4
   1219c:	10c00035 	stwio	r3,0(r2)
   121a0:	e0bffe17 	ldw	r2,-8(fp)
   121a4:	10c03fcc 	andi	r3,r2,255
   121a8:	d0a02817 	ldw	r2,-32608(gp)
   121ac:	10800104 	addi	r2,r2,4
   121b0:	10c00035 	stwio	r3,0(r2)
   121b4:	e0bffe17 	ldw	r2,-8(fp)
   121b8:	10bfc00c 	andi	r2,r2,65280
   121bc:	1007d23a 	srai	r3,r2,8
   121c0:	d0a02817 	ldw	r2,-32608(gp)
   121c4:	10800104 	addi	r2,r2,4
   121c8:	10c00035 	stwio	r3,0(r2)
   121cc:	e0bffe17 	ldw	r2,-8(fp)
   121d0:	10c03fcc 	andi	r3,r2,255
   121d4:	d0a02817 	ldw	r2,-32608(gp)
   121d8:	10800104 	addi	r2,r2,4
   121dc:	10c00035 	stwio	r3,0(r2)
   121e0:	d0e02817 	ldw	r3,-32608(gp)
   121e4:	00800b04 	movi	r2,44
   121e8:	18800035 	stwio	r2,0(r3)
   121ec:	e03ffb15 	stw	zero,-20(fp)
   121f0:	00000c06 	br	12224 <LCD_draw_horiz_line+0x144>
   121f4:	e0bfff17 	ldw	r2,-4(fp)
   121f8:	1007d23a 	srai	r3,r2,8
   121fc:	d0a02817 	ldw	r2,-32608(gp)
   12200:	10800104 	addi	r2,r2,4
   12204:	10c00035 	stwio	r3,0(r2)
   12208:	d0a02817 	ldw	r2,-32608(gp)
   1220c:	10c00104 	addi	r3,r2,4
   12210:	e0bfff17 	ldw	r2,-4(fp)
   12214:	18800035 	stwio	r2,0(r3)
   12218:	e0bffb17 	ldw	r2,-20(fp)
   1221c:	10800084 	addi	r2,r2,2
   12220:	e0bffb15 	stw	r2,-20(fp)
   12224:	e0fffb17 	ldw	r3,-20(fp)
   12228:	e0bffa17 	ldw	r2,-24(fp)
   1222c:	18bff136 	bltu	r3,r2,121f4 <LCD_draw_horiz_line+0x114>
   12230:	e037883a 	mov	sp,fp
   12234:	df000017 	ldw	fp,0(sp)
   12238:	dec00104 	addi	sp,sp,4
   1223c:	f800283a 	ret

00012240 <LCD_merge_colors>:
   12240:	defffb04 	addi	sp,sp,-20
   12244:	dfc00415 	stw	ra,16(sp)
   12248:	df000315 	stw	fp,12(sp)
   1224c:	df000304 	addi	fp,sp,12
   12250:	e13ffd15 	stw	r4,-12(fp)
   12254:	e17ffe15 	stw	r5,-8(fp)
   12258:	e1bfff15 	stw	r6,-4(fp)
   1225c:	e13ffd17 	ldw	r4,-12(fp)
   12260:	0013c0c0 	call	13c0c <__floatunsisf>
   12264:	1009883a 	mov	r4,r2
   12268:	0150dff4 	movhi	r5,17279
   1226c:	001398c0 	call	1398c <__divsf3>
   12270:	1009883a 	mov	r4,r2
   12274:	01507e34 	movhi	r5,16888
   12278:	00137ac0 	call	137ac <__mulsf3>
   1227c:	1009883a 	mov	r4,r2
   12280:	00134840 	call	13484 <__fixunssfsi>
   12284:	e0bffd15 	stw	r2,-12(fp)
   12288:	e13ffe17 	ldw	r4,-8(fp)
   1228c:	0013c0c0 	call	13c0c <__floatunsisf>
   12290:	1009883a 	mov	r4,r2
   12294:	0150dff4 	movhi	r5,17279
   12298:	001398c0 	call	1398c <__divsf3>
   1229c:	1009883a 	mov	r4,r2
   122a0:	01509f34 	movhi	r5,17020
   122a4:	00137ac0 	call	137ac <__mulsf3>
   122a8:	1009883a 	mov	r4,r2
   122ac:	00134840 	call	13484 <__fixunssfsi>
   122b0:	e0bffe15 	stw	r2,-8(fp)
   122b4:	e13fff17 	ldw	r4,-4(fp)
   122b8:	0013c0c0 	call	13c0c <__floatunsisf>
   122bc:	1009883a 	mov	r4,r2
   122c0:	0150dff4 	movhi	r5,17279
   122c4:	001398c0 	call	1398c <__divsf3>
   122c8:	1009883a 	mov	r4,r2
   122cc:	01507e34 	movhi	r5,16888
   122d0:	00137ac0 	call	137ac <__mulsf3>
   122d4:	1009883a 	mov	r4,r2
   122d8:	00134840 	call	13484 <__fixunssfsi>
   122dc:	e0bfff15 	stw	r2,-4(fp)
   122e0:	e0bfff17 	ldw	r2,-4(fp)
   122e4:	108007cc 	andi	r2,r2,31
   122e8:	1007883a 	mov	r3,r2
   122ec:	e0bffe17 	ldw	r2,-8(fp)
   122f0:	1004917a 	slli	r2,r2,5
   122f4:	1081f80c 	andi	r2,r2,2016
   122f8:	1884b03a 	or	r2,r3,r2
   122fc:	1009883a 	mov	r4,r2
   12300:	e0bffd17 	ldw	r2,-12(fp)
   12304:	100492fa 	slli	r2,r2,11
   12308:	1007883a 	mov	r3,r2
   1230c:	00be0004 	movi	r2,-2048
   12310:	1884703a 	and	r2,r3,r2
   12314:	2084b03a 	or	r2,r4,r2
   12318:	10bfffcc 	andi	r2,r2,65535
   1231c:	e037883a 	mov	sp,fp
   12320:	dfc00117 	ldw	ra,4(sp)
   12324:	df000017 	ldw	fp,0(sp)
   12328:	dec00204 	addi	sp,sp,8
   1232c:	f800283a 	ret

00012330 <LCD_draw_sloped_line>:
   12330:	deffef04 	addi	sp,sp,-68
   12334:	dfc01015 	stw	ra,64(sp)
   12338:	df000f15 	stw	fp,60(sp)
   1233c:	df000f04 	addi	fp,sp,60
   12340:	e0800217 	ldw	r2,8(fp)
   12344:	e13ffb0d 	sth	r4,-20(fp)
   12348:	e17ffc0d 	sth	r5,-16(fp)
   1234c:	e1bffd0d 	sth	r6,-12(fp)
   12350:	e1fffe0d 	sth	r7,-8(fp)
   12354:	e0bfff0d 	sth	r2,-4(fp)
   12358:	e0fffd0b 	ldhu	r3,-12(fp)
   1235c:	e0bffb0b 	ldhu	r2,-20(fp)
   12360:	1885c83a 	sub	r2,r3,r2
   12364:	e0bffa15 	stw	r2,-24(fp)
   12368:	e0bffa17 	ldw	r2,-24(fp)
   1236c:	1004403a 	cmpge	r2,r2,zero
   12370:	1000031e 	bne	r2,zero,12380 <LCD_draw_sloped_line+0x50>
   12374:	e0bffa17 	ldw	r2,-24(fp)
   12378:	0085c83a 	sub	r2,zero,r2
   1237c:	e0bffa15 	stw	r2,-24(fp)
   12380:	e0fffe0b 	ldhu	r3,-8(fp)
   12384:	e0bffc0b 	ldhu	r2,-16(fp)
   12388:	1885c83a 	sub	r2,r3,r2
   1238c:	e0bff915 	stw	r2,-28(fp)
   12390:	e0bff917 	ldw	r2,-28(fp)
   12394:	1004403a 	cmpge	r2,r2,zero
   12398:	1000031e 	bne	r2,zero,123a8 <LCD_draw_sloped_line+0x78>
   1239c:	e0bff917 	ldw	r2,-28(fp)
   123a0:	0085c83a 	sub	r2,zero,r2
   123a4:	e0bff915 	stw	r2,-28(fp)
   123a8:	e0fffb0b 	ldhu	r3,-20(fp)
   123ac:	e0bffd0b 	ldhu	r2,-12(fp)
   123b0:	10c0032e 	bgeu	r2,r3,123c0 <LCD_draw_sloped_line+0x90>
   123b4:	00bfffc4 	movi	r2,-1
   123b8:	e0bff815 	stw	r2,-32(fp)
   123bc:	00000206 	br	123c8 <LCD_draw_sloped_line+0x98>
   123c0:	00800044 	movi	r2,1
   123c4:	e0bff815 	stw	r2,-32(fp)
   123c8:	e0fffc0b 	ldhu	r3,-16(fp)
   123cc:	e0bffe0b 	ldhu	r2,-8(fp)
   123d0:	10c0032e 	bgeu	r2,r3,123e0 <LCD_draw_sloped_line+0xb0>
   123d4:	00bfffc4 	movi	r2,-1
   123d8:	e0bff715 	stw	r2,-36(fp)
   123dc:	00000206 	br	123e8 <LCD_draw_sloped_line+0xb8>
   123e0:	00800044 	movi	r2,1
   123e4:	e0bff715 	stw	r2,-36(fp)
   123e8:	e0fffa17 	ldw	r3,-24(fp)
   123ec:	e0bff917 	ldw	r2,-28(fp)
   123f0:	18803416 	blt	r3,r2,124c4 <LCD_draw_sloped_line+0x194>
   123f4:	e0bff917 	ldw	r2,-28(fp)
   123f8:	1085883a 	add	r2,r2,r2
   123fc:	e0bff615 	stw	r2,-40(fp)
   12400:	e0bffa17 	ldw	r2,-24(fp)
   12404:	1085883a 	add	r2,r2,r2
   12408:	1007883a 	mov	r3,r2
   1240c:	e0bff617 	ldw	r2,-40(fp)
   12410:	10c5c83a 	sub	r2,r2,r3
   12414:	e0bff515 	stw	r2,-44(fp)
   12418:	e0fff617 	ldw	r3,-40(fp)
   1241c:	e0bffa17 	ldw	r2,-24(fp)
   12420:	1885c83a 	sub	r2,r3,r2
   12424:	e0bff415 	stw	r2,-48(fp)
   12428:	00002206 	br	124b4 <LCD_draw_sloped_line+0x184>
   1242c:	e13ffb0b 	ldhu	r4,-20(fp)
   12430:	e17ffc0b 	ldhu	r5,-16(fp)
   12434:	e1800317 	ldw	r6,12(fp)
   12438:	0011cfc0 	call	11cfc <LCD_set_pixel>
   1243c:	e0bff417 	ldw	r2,-48(fp)
   12440:	10800050 	cmplti	r2,r2,1
   12444:	10000f1e 	bne	r2,zero,12484 <LCD_draw_sloped_line+0x154>
   12448:	e0bff817 	ldw	r2,-32(fp)
   1244c:	1007883a 	mov	r3,r2
   12450:	e0bffb0b 	ldhu	r2,-20(fp)
   12454:	10c5883a 	add	r2,r2,r3
   12458:	e0bffb0d 	sth	r2,-20(fp)
   1245c:	e0bff717 	ldw	r2,-36(fp)
   12460:	1007883a 	mov	r3,r2
   12464:	e0bffc0b 	ldhu	r2,-16(fp)
   12468:	10c5883a 	add	r2,r2,r3
   1246c:	e0bffc0d 	sth	r2,-16(fp)
   12470:	e0fff417 	ldw	r3,-48(fp)
   12474:	e0bff517 	ldw	r2,-44(fp)
   12478:	1885883a 	add	r2,r3,r2
   1247c:	e0bff415 	stw	r2,-48(fp)
   12480:	00000906 	br	124a8 <LCD_draw_sloped_line+0x178>
   12484:	e0bff817 	ldw	r2,-32(fp)
   12488:	1007883a 	mov	r3,r2
   1248c:	e0bffb0b 	ldhu	r2,-20(fp)
   12490:	10c5883a 	add	r2,r2,r3
   12494:	e0bffb0d 	sth	r2,-20(fp)
   12498:	e0fff417 	ldw	r3,-48(fp)
   1249c:	e0bff617 	ldw	r2,-40(fp)
   124a0:	1885883a 	add	r2,r3,r2
   124a4:	e0bff415 	stw	r2,-48(fp)
   124a8:	e0bffa17 	ldw	r2,-24(fp)
   124ac:	10bfffc4 	addi	r2,r2,-1
   124b0:	e0bffa15 	stw	r2,-24(fp)
   124b4:	e0bffa17 	ldw	r2,-24(fp)
   124b8:	1004403a 	cmpge	r2,r2,zero
   124bc:	103fdb1e 	bne	r2,zero,1242c <LCD_draw_sloped_line+0xfc>
   124c0:	00003306 	br	12590 <LCD_draw_sloped_line+0x260>
   124c4:	e0bffa17 	ldw	r2,-24(fp)
   124c8:	1085883a 	add	r2,r2,r2
   124cc:	e0bff315 	stw	r2,-52(fp)
   124d0:	e0bff917 	ldw	r2,-28(fp)
   124d4:	1085883a 	add	r2,r2,r2
   124d8:	1007883a 	mov	r3,r2
   124dc:	e0bff317 	ldw	r2,-52(fp)
   124e0:	10c5c83a 	sub	r2,r2,r3
   124e4:	e0bff215 	stw	r2,-56(fp)
   124e8:	e0fff317 	ldw	r3,-52(fp)
   124ec:	e0bff917 	ldw	r2,-28(fp)
   124f0:	1885c83a 	sub	r2,r3,r2
   124f4:	e0bff115 	stw	r2,-60(fp)
   124f8:	00002206 	br	12584 <LCD_draw_sloped_line+0x254>
   124fc:	e13ffb0b 	ldhu	r4,-20(fp)
   12500:	e17ffc0b 	ldhu	r5,-16(fp)
   12504:	e1800317 	ldw	r6,12(fp)
   12508:	0011cfc0 	call	11cfc <LCD_set_pixel>
   1250c:	e0bff117 	ldw	r2,-60(fp)
   12510:	10800050 	cmplti	r2,r2,1
   12514:	10000f1e 	bne	r2,zero,12554 <LCD_draw_sloped_line+0x224>
   12518:	e0bff817 	ldw	r2,-32(fp)
   1251c:	1007883a 	mov	r3,r2
   12520:	e0bffb0b 	ldhu	r2,-20(fp)
   12524:	10c5883a 	add	r2,r2,r3
   12528:	e0bffb0d 	sth	r2,-20(fp)
   1252c:	e0bff717 	ldw	r2,-36(fp)
   12530:	1007883a 	mov	r3,r2
   12534:	e0bffc0b 	ldhu	r2,-16(fp)
   12538:	10c5883a 	add	r2,r2,r3
   1253c:	e0bffc0d 	sth	r2,-16(fp)
   12540:	e0fff117 	ldw	r3,-60(fp)
   12544:	e0bff217 	ldw	r2,-56(fp)
   12548:	1885883a 	add	r2,r3,r2
   1254c:	e0bff115 	stw	r2,-60(fp)
   12550:	00000906 	br	12578 <LCD_draw_sloped_line+0x248>
   12554:	e0bff717 	ldw	r2,-36(fp)
   12558:	1007883a 	mov	r3,r2
   1255c:	e0bffc0b 	ldhu	r2,-16(fp)
   12560:	10c5883a 	add	r2,r2,r3
   12564:	e0bffc0d 	sth	r2,-16(fp)
   12568:	e0fff117 	ldw	r3,-60(fp)
   1256c:	e0bff317 	ldw	r2,-52(fp)
   12570:	1885883a 	add	r2,r3,r2
   12574:	e0bff115 	stw	r2,-60(fp)
   12578:	e0bff917 	ldw	r2,-28(fp)
   1257c:	10bfffc4 	addi	r2,r2,-1
   12580:	e0bff915 	stw	r2,-28(fp)
   12584:	e0bff917 	ldw	r2,-28(fp)
   12588:	1004403a 	cmpge	r2,r2,zero
   1258c:	103fdb1e 	bne	r2,zero,124fc <LCD_draw_sloped_line+0x1cc>
   12590:	e037883a 	mov	sp,fp
   12594:	dfc00117 	ldw	ra,4(sp)
   12598:	df000017 	ldw	fp,0(sp)
   1259c:	dec00204 	addi	sp,sp,8
   125a0:	f800283a 	ret

000125a4 <LCD_draw_circle>:
   125a4:	defff304 	addi	sp,sp,-52
   125a8:	dfc00c15 	stw	ra,48(sp)
   125ac:	df000b15 	stw	fp,44(sp)
   125b0:	df000b04 	addi	fp,sp,44
   125b4:	e13ffa15 	stw	r4,-24(fp)
   125b8:	e17ffb15 	stw	r5,-20(fp)
   125bc:	e1bffc15 	stw	r6,-16(fp)
   125c0:	e1fffd15 	stw	r7,-12(fp)
   125c4:	e0800217 	ldw	r2,8(fp)
   125c8:	e0bffe05 	stb	r2,-8(fp)
   125cc:	e03ff915 	stw	zero,-28(fp)
   125d0:	e0bffc17 	ldw	r2,-16(fp)
   125d4:	e0bff815 	stw	r2,-32(fp)
   125d8:	e0bffc17 	ldw	r2,-16(fp)
   125dc:	1085883a 	add	r2,r2,r2
   125e0:	1085883a 	add	r2,r2,r2
   125e4:	1007883a 	mov	r3,r2
   125e8:	00800144 	movi	r2,5
   125ec:	10c5c83a 	sub	r2,r2,r3
   125f0:	e0bfff15 	stw	r2,-4(fp)
   125f4:	e0ffff17 	ldw	r3,-4(fp)
   125f8:	1804403a 	cmpge	r2,r3,zero
   125fc:	1000031e 	bne	r2,zero,1260c <LCD_draw_circle+0x68>
   12600:	e0bfff17 	ldw	r2,-4(fp)
   12604:	108000c4 	addi	r2,r2,3
   12608:	e0bfff15 	stw	r2,-4(fp)
   1260c:	e0ffff17 	ldw	r3,-4(fp)
   12610:	1805d0ba 	srai	r2,r3,2
   12614:	e0bff715 	stw	r2,-36(fp)
   12618:	e0fffe07 	ldb	r3,-8(fp)
   1261c:	e0bffd17 	ldw	r2,-12(fp)
   12620:	d8800015 	stw	r2,0(sp)
   12624:	d8c00115 	stw	r3,4(sp)
   12628:	e13ffa17 	ldw	r4,-24(fp)
   1262c:	e17ffb17 	ldw	r5,-20(fp)
   12630:	e1bff917 	ldw	r6,-28(fp)
   12634:	e1fff817 	ldw	r7,-32(fp)
   12638:	00126ec0 	call	126ec <LCD_circle_points>
   1263c:	00002306 	br	126cc <LCD_draw_circle+0x128>
   12640:	e0bff917 	ldw	r2,-28(fp)
   12644:	10800044 	addi	r2,r2,1
   12648:	e0bff915 	stw	r2,-28(fp)
   1264c:	e0bff717 	ldw	r2,-36(fp)
   12650:	1004403a 	cmpge	r2,r2,zero
   12654:	1000081e 	bne	r2,zero,12678 <LCD_draw_circle+0xd4>
   12658:	e0bff917 	ldw	r2,-28(fp)
   1265c:	1085883a 	add	r2,r2,r2
   12660:	1007883a 	mov	r3,r2
   12664:	e0bff717 	ldw	r2,-36(fp)
   12668:	1885883a 	add	r2,r3,r2
   1266c:	10800044 	addi	r2,r2,1
   12670:	e0bff715 	stw	r2,-36(fp)
   12674:	00000c06 	br	126a8 <LCD_draw_circle+0x104>
   12678:	e0bff817 	ldw	r2,-32(fp)
   1267c:	10bfffc4 	addi	r2,r2,-1
   12680:	e0bff815 	stw	r2,-32(fp)
   12684:	e0fff917 	ldw	r3,-28(fp)
   12688:	e0bff817 	ldw	r2,-32(fp)
   1268c:	1885c83a 	sub	r2,r3,r2
   12690:	1085883a 	add	r2,r2,r2
   12694:	1007883a 	mov	r3,r2
   12698:	e0bff717 	ldw	r2,-36(fp)
   1269c:	1885883a 	add	r2,r3,r2
   126a0:	10800044 	addi	r2,r2,1
   126a4:	e0bff715 	stw	r2,-36(fp)
   126a8:	e0fffe07 	ldb	r3,-8(fp)
   126ac:	e0bffd17 	ldw	r2,-12(fp)
   126b0:	d8800015 	stw	r2,0(sp)
   126b4:	d8c00115 	stw	r3,4(sp)
   126b8:	e13ffa17 	ldw	r4,-24(fp)
   126bc:	e17ffb17 	ldw	r5,-20(fp)
   126c0:	e1bff917 	ldw	r6,-28(fp)
   126c4:	e1fff817 	ldw	r7,-32(fp)
   126c8:	00126ec0 	call	126ec <LCD_circle_points>
   126cc:	e0fff917 	ldw	r3,-28(fp)
   126d0:	e0bff817 	ldw	r2,-32(fp)
   126d4:	18bfda16 	blt	r3,r2,12640 <LCD_draw_circle+0x9c>
   126d8:	e037883a 	mov	sp,fp
   126dc:	dfc00117 	ldw	ra,4(sp)
   126e0:	df000017 	ldw	fp,0(sp)
   126e4:	dec00204 	addi	sp,sp,8
   126e8:	f800283a 	ret

000126ec <LCD_circle_points>:
   126ec:	defff704 	addi	sp,sp,-36
   126f0:	dfc00815 	stw	ra,32(sp)
   126f4:	df000715 	stw	fp,28(sp)
   126f8:	df000704 	addi	fp,sp,28
   126fc:	e13ffb15 	stw	r4,-20(fp)
   12700:	e17ffc15 	stw	r5,-16(fp)
   12704:	e1bffd15 	stw	r6,-12(fp)
   12708:	e1fffe15 	stw	r7,-8(fp)
   1270c:	e0800317 	ldw	r2,12(fp)
   12710:	e0bfff05 	stb	r2,-4(fp)
   12714:	e0bffd17 	ldw	r2,-12(fp)
   12718:	1004c03a 	cmpne	r2,r2,zero
   1271c:	10002a1e 	bne	r2,zero,127c8 <LCD_circle_points+0xdc>
   12720:	e0fffc17 	ldw	r3,-16(fp)
   12724:	e0bffe17 	ldw	r2,-8(fp)
   12728:	188b883a 	add	r5,r3,r2
   1272c:	e1800217 	ldw	r6,8(fp)
   12730:	e13ffb17 	ldw	r4,-20(fp)
   12734:	0011cfc0 	call	11cfc <LCD_set_pixel>
   12738:	e0fffc17 	ldw	r3,-16(fp)
   1273c:	e0bffe17 	ldw	r2,-8(fp)
   12740:	188bc83a 	sub	r5,r3,r2
   12744:	e1800217 	ldw	r6,8(fp)
   12748:	e13ffb17 	ldw	r4,-20(fp)
   1274c:	0011cfc0 	call	11cfc <LCD_set_pixel>
   12750:	e0bfff07 	ldb	r2,-4(fp)
   12754:	1005003a 	cmpeq	r2,r2,zero
   12758:	10000e1e 	bne	r2,zero,12794 <LCD_circle_points+0xa8>
   1275c:	e0fffb17 	ldw	r3,-20(fp)
   12760:	e0bffe17 	ldw	r2,-8(fp)
   12764:	1889c83a 	sub	r4,r3,r2
   12768:	e0fffb17 	ldw	r3,-20(fp)
   1276c:	e0bffe17 	ldw	r2,-8(fp)
   12770:	188d883a 	add	r6,r3,r2
   12774:	00800044 	movi	r2,1
   12778:	d8800015 	stw	r2,0(sp)
   1277c:	e0800217 	ldw	r2,8(fp)
   12780:	d8800115 	stw	r2,4(sp)
   12784:	e17ffc17 	ldw	r5,-16(fp)
   12788:	e1fffc17 	ldw	r7,-16(fp)
   1278c:	00118e80 	call	118e8 <LCD_draw_line>
   12790:	0000e206 	br	12b1c <LCD_circle_points+0x430>
   12794:	e0fffb17 	ldw	r3,-20(fp)
   12798:	e0bffe17 	ldw	r2,-8(fp)
   1279c:	1889883a 	add	r4,r3,r2
   127a0:	e1800217 	ldw	r6,8(fp)
   127a4:	e17ffc17 	ldw	r5,-16(fp)
   127a8:	0011cfc0 	call	11cfc <LCD_set_pixel>
   127ac:	e0fffb17 	ldw	r3,-20(fp)
   127b0:	e0bffe17 	ldw	r2,-8(fp)
   127b4:	1889c83a 	sub	r4,r3,r2
   127b8:	e1800217 	ldw	r6,8(fp)
   127bc:	e17ffc17 	ldw	r5,-16(fp)
   127c0:	0011cfc0 	call	11cfc <LCD_set_pixel>
   127c4:	0000d506 	br	12b1c <LCD_circle_points+0x430>
   127c8:	e0fffd17 	ldw	r3,-12(fp)
   127cc:	e0bffe17 	ldw	r2,-8(fp)
   127d0:	1880471e 	bne	r3,r2,128f0 <LCD_circle_points+0x204>
   127d4:	e0bfff07 	ldb	r2,-4(fp)
   127d8:	1005003a 	cmpeq	r2,r2,zero
   127dc:	1000231e 	bne	r2,zero,1286c <LCD_circle_points+0x180>
   127e0:	e0fffb17 	ldw	r3,-20(fp)
   127e4:	e0bffd17 	ldw	r2,-12(fp)
   127e8:	1889c83a 	sub	r4,r3,r2
   127ec:	e0fffc17 	ldw	r3,-16(fp)
   127f0:	e0bffe17 	ldw	r2,-8(fp)
   127f4:	188b883a 	add	r5,r3,r2
   127f8:	e0fffb17 	ldw	r3,-20(fp)
   127fc:	e0bffd17 	ldw	r2,-12(fp)
   12800:	188d883a 	add	r6,r3,r2
   12804:	e0fffc17 	ldw	r3,-16(fp)
   12808:	e0bffe17 	ldw	r2,-8(fp)
   1280c:	188f883a 	add	r7,r3,r2
   12810:	00800044 	movi	r2,1
   12814:	d8800015 	stw	r2,0(sp)
   12818:	e0800217 	ldw	r2,8(fp)
   1281c:	d8800115 	stw	r2,4(sp)
   12820:	00118e80 	call	118e8 <LCD_draw_line>
   12824:	e0fffb17 	ldw	r3,-20(fp)
   12828:	e0bffd17 	ldw	r2,-12(fp)
   1282c:	1889c83a 	sub	r4,r3,r2
   12830:	e0fffc17 	ldw	r3,-16(fp)
   12834:	e0bffe17 	ldw	r2,-8(fp)
   12838:	188bc83a 	sub	r5,r3,r2
   1283c:	e0fffb17 	ldw	r3,-20(fp)
   12840:	e0bffd17 	ldw	r2,-12(fp)
   12844:	188d883a 	add	r6,r3,r2
   12848:	e0fffc17 	ldw	r3,-16(fp)
   1284c:	e0bffe17 	ldw	r2,-8(fp)
   12850:	188fc83a 	sub	r7,r3,r2
   12854:	00800044 	movi	r2,1
   12858:	d8800015 	stw	r2,0(sp)
   1285c:	e0800217 	ldw	r2,8(fp)
   12860:	d8800115 	stw	r2,4(sp)
   12864:	00118e80 	call	118e8 <LCD_draw_line>
   12868:	0000ac06 	br	12b1c <LCD_circle_points+0x430>
   1286c:	e0fffb17 	ldw	r3,-20(fp)
   12870:	e0bffd17 	ldw	r2,-12(fp)
   12874:	1889883a 	add	r4,r3,r2
   12878:	e0fffc17 	ldw	r3,-16(fp)
   1287c:	e0bffe17 	ldw	r2,-8(fp)
   12880:	188b883a 	add	r5,r3,r2
   12884:	e1800217 	ldw	r6,8(fp)
   12888:	0011cfc0 	call	11cfc <LCD_set_pixel>
   1288c:	e0fffb17 	ldw	r3,-20(fp)
   12890:	e0bffd17 	ldw	r2,-12(fp)
   12894:	1889c83a 	sub	r4,r3,r2
   12898:	e0fffc17 	ldw	r3,-16(fp)
   1289c:	e0bffe17 	ldw	r2,-8(fp)
   128a0:	188b883a 	add	r5,r3,r2
   128a4:	e1800217 	ldw	r6,8(fp)
   128a8:	0011cfc0 	call	11cfc <LCD_set_pixel>
   128ac:	e0fffb17 	ldw	r3,-20(fp)
   128b0:	e0bffd17 	ldw	r2,-12(fp)
   128b4:	1889883a 	add	r4,r3,r2
   128b8:	e0fffc17 	ldw	r3,-16(fp)
   128bc:	e0bffe17 	ldw	r2,-8(fp)
   128c0:	188bc83a 	sub	r5,r3,r2
   128c4:	e1800217 	ldw	r6,8(fp)
   128c8:	0011cfc0 	call	11cfc <LCD_set_pixel>
   128cc:	e0fffb17 	ldw	r3,-20(fp)
   128d0:	e0bffd17 	ldw	r2,-12(fp)
   128d4:	1889c83a 	sub	r4,r3,r2
   128d8:	e0fffc17 	ldw	r3,-16(fp)
   128dc:	e0bffe17 	ldw	r2,-8(fp)
   128e0:	188bc83a 	sub	r5,r3,r2
   128e4:	e1800217 	ldw	r6,8(fp)
   128e8:	0011cfc0 	call	11cfc <LCD_set_pixel>
   128ec:	00008b06 	br	12b1c <LCD_circle_points+0x430>
   128f0:	e0fffd17 	ldw	r3,-12(fp)
   128f4:	e0bffe17 	ldw	r2,-8(fp)
   128f8:	1880880e 	bge	r3,r2,12b1c <LCD_circle_points+0x430>
   128fc:	e0bfff07 	ldb	r2,-4(fp)
   12900:	1005003a 	cmpeq	r2,r2,zero
   12904:	1000451e 	bne	r2,zero,12a1c <LCD_circle_points+0x330>
   12908:	e0fffb17 	ldw	r3,-20(fp)
   1290c:	e0bffd17 	ldw	r2,-12(fp)
   12910:	1889c83a 	sub	r4,r3,r2
   12914:	e0fffc17 	ldw	r3,-16(fp)
   12918:	e0bffe17 	ldw	r2,-8(fp)
   1291c:	188b883a 	add	r5,r3,r2
   12920:	e0fffb17 	ldw	r3,-20(fp)
   12924:	e0bffd17 	ldw	r2,-12(fp)
   12928:	188d883a 	add	r6,r3,r2
   1292c:	e0fffc17 	ldw	r3,-16(fp)
   12930:	e0bffe17 	ldw	r2,-8(fp)
   12934:	188f883a 	add	r7,r3,r2
   12938:	00800044 	movi	r2,1
   1293c:	d8800015 	stw	r2,0(sp)
   12940:	e0800217 	ldw	r2,8(fp)
   12944:	d8800115 	stw	r2,4(sp)
   12948:	00118e80 	call	118e8 <LCD_draw_line>
   1294c:	e0fffb17 	ldw	r3,-20(fp)
   12950:	e0bffe17 	ldw	r2,-8(fp)
   12954:	1889c83a 	sub	r4,r3,r2
   12958:	e0fffc17 	ldw	r3,-16(fp)
   1295c:	e0bffd17 	ldw	r2,-12(fp)
   12960:	188b883a 	add	r5,r3,r2
   12964:	e0fffb17 	ldw	r3,-20(fp)
   12968:	e0bffe17 	ldw	r2,-8(fp)
   1296c:	188d883a 	add	r6,r3,r2
   12970:	e0fffc17 	ldw	r3,-16(fp)
   12974:	e0bffd17 	ldw	r2,-12(fp)
   12978:	188f883a 	add	r7,r3,r2
   1297c:	00800044 	movi	r2,1
   12980:	d8800015 	stw	r2,0(sp)
   12984:	e0800217 	ldw	r2,8(fp)
   12988:	d8800115 	stw	r2,4(sp)
   1298c:	00118e80 	call	118e8 <LCD_draw_line>
   12990:	e0fffb17 	ldw	r3,-20(fp)
   12994:	e0bffe17 	ldw	r2,-8(fp)
   12998:	1889c83a 	sub	r4,r3,r2
   1299c:	e0fffc17 	ldw	r3,-16(fp)
   129a0:	e0bffd17 	ldw	r2,-12(fp)
   129a4:	188bc83a 	sub	r5,r3,r2
   129a8:	e0fffb17 	ldw	r3,-20(fp)
   129ac:	e0bffe17 	ldw	r2,-8(fp)
   129b0:	188d883a 	add	r6,r3,r2
   129b4:	e0fffc17 	ldw	r3,-16(fp)
   129b8:	e0bffd17 	ldw	r2,-12(fp)
   129bc:	188fc83a 	sub	r7,r3,r2
   129c0:	00800044 	movi	r2,1
   129c4:	d8800015 	stw	r2,0(sp)
   129c8:	e0800217 	ldw	r2,8(fp)
   129cc:	d8800115 	stw	r2,4(sp)
   129d0:	00118e80 	call	118e8 <LCD_draw_line>
   129d4:	e0fffb17 	ldw	r3,-20(fp)
   129d8:	e0bffd17 	ldw	r2,-12(fp)
   129dc:	1889c83a 	sub	r4,r3,r2
   129e0:	e0fffc17 	ldw	r3,-16(fp)
   129e4:	e0bffe17 	ldw	r2,-8(fp)
   129e8:	188bc83a 	sub	r5,r3,r2
   129ec:	e0fffb17 	ldw	r3,-20(fp)
   129f0:	e0bffd17 	ldw	r2,-12(fp)
   129f4:	188d883a 	add	r6,r3,r2
   129f8:	e0fffc17 	ldw	r3,-16(fp)
   129fc:	e0bffe17 	ldw	r2,-8(fp)
   12a00:	188fc83a 	sub	r7,r3,r2
   12a04:	00800044 	movi	r2,1
   12a08:	d8800015 	stw	r2,0(sp)
   12a0c:	e0800217 	ldw	r2,8(fp)
   12a10:	d8800115 	stw	r2,4(sp)
   12a14:	00118e80 	call	118e8 <LCD_draw_line>
   12a18:	00004006 	br	12b1c <LCD_circle_points+0x430>
   12a1c:	e0fffb17 	ldw	r3,-20(fp)
   12a20:	e0bffd17 	ldw	r2,-12(fp)
   12a24:	1889883a 	add	r4,r3,r2
   12a28:	e0fffc17 	ldw	r3,-16(fp)
   12a2c:	e0bffe17 	ldw	r2,-8(fp)
   12a30:	188b883a 	add	r5,r3,r2
   12a34:	e1800217 	ldw	r6,8(fp)
   12a38:	0011cfc0 	call	11cfc <LCD_set_pixel>
   12a3c:	e0fffb17 	ldw	r3,-20(fp)
   12a40:	e0bffd17 	ldw	r2,-12(fp)
   12a44:	1889c83a 	sub	r4,r3,r2
   12a48:	e0fffc17 	ldw	r3,-16(fp)
   12a4c:	e0bffe17 	ldw	r2,-8(fp)
   12a50:	188b883a 	add	r5,r3,r2
   12a54:	e1800217 	ldw	r6,8(fp)
   12a58:	0011cfc0 	call	11cfc <LCD_set_pixel>
   12a5c:	e0fffb17 	ldw	r3,-20(fp)
   12a60:	e0bffd17 	ldw	r2,-12(fp)
   12a64:	1889883a 	add	r4,r3,r2
   12a68:	e0fffc17 	ldw	r3,-16(fp)
   12a6c:	e0bffe17 	ldw	r2,-8(fp)
   12a70:	188bc83a 	sub	r5,r3,r2
   12a74:	e1800217 	ldw	r6,8(fp)
   12a78:	0011cfc0 	call	11cfc <LCD_set_pixel>
   12a7c:	e0fffb17 	ldw	r3,-20(fp)
   12a80:	e0bffd17 	ldw	r2,-12(fp)
   12a84:	1889c83a 	sub	r4,r3,r2
   12a88:	e0fffc17 	ldw	r3,-16(fp)
   12a8c:	e0bffe17 	ldw	r2,-8(fp)
   12a90:	188bc83a 	sub	r5,r3,r2
   12a94:	e1800217 	ldw	r6,8(fp)
   12a98:	0011cfc0 	call	11cfc <LCD_set_pixel>
   12a9c:	e0fffb17 	ldw	r3,-20(fp)
   12aa0:	e0bffe17 	ldw	r2,-8(fp)
   12aa4:	1889883a 	add	r4,r3,r2
   12aa8:	e0fffc17 	ldw	r3,-16(fp)
   12aac:	e0bffd17 	ldw	r2,-12(fp)
   12ab0:	188b883a 	add	r5,r3,r2
   12ab4:	e1800217 	ldw	r6,8(fp)
   12ab8:	0011cfc0 	call	11cfc <LCD_set_pixel>
   12abc:	e0fffb17 	ldw	r3,-20(fp)
   12ac0:	e0bffe17 	ldw	r2,-8(fp)
   12ac4:	1889c83a 	sub	r4,r3,r2
   12ac8:	e0fffc17 	ldw	r3,-16(fp)
   12acc:	e0bffd17 	ldw	r2,-12(fp)
   12ad0:	188b883a 	add	r5,r3,r2
   12ad4:	e1800217 	ldw	r6,8(fp)
   12ad8:	0011cfc0 	call	11cfc <LCD_set_pixel>
   12adc:	e0fffb17 	ldw	r3,-20(fp)
   12ae0:	e0bffe17 	ldw	r2,-8(fp)
   12ae4:	1889883a 	add	r4,r3,r2
   12ae8:	e0fffc17 	ldw	r3,-16(fp)
   12aec:	e0bffd17 	ldw	r2,-12(fp)
   12af0:	188bc83a 	sub	r5,r3,r2
   12af4:	e1800217 	ldw	r6,8(fp)
   12af8:	0011cfc0 	call	11cfc <LCD_set_pixel>
   12afc:	e0fffb17 	ldw	r3,-20(fp)
   12b00:	e0bffe17 	ldw	r2,-8(fp)
   12b04:	1889c83a 	sub	r4,r3,r2
   12b08:	e0fffc17 	ldw	r3,-16(fp)
   12b0c:	e0bffd17 	ldw	r2,-12(fp)
   12b10:	188bc83a 	sub	r5,r3,r2
   12b14:	e1800217 	ldw	r6,8(fp)
   12b18:	0011cfc0 	call	11cfc <LCD_set_pixel>
   12b1c:	e037883a 	mov	sp,fp
   12b20:	dfc00117 	ldw	ra,4(sp)
   12b24:	df000017 	ldw	fp,0(sp)
   12b28:	dec00204 	addi	sp,sp,8
   12b2c:	f800283a 	ret

00012b30 <LCD_draw_round_corner_box>:
   12b30:	deffec04 	addi	sp,sp,-80
   12b34:	dfc01315 	stw	ra,76(sp)
   12b38:	df001215 	stw	fp,72(sp)
   12b3c:	df001204 	addi	fp,sp,72
   12b40:	e13ffb15 	stw	r4,-20(fp)
   12b44:	e17ffc15 	stw	r5,-16(fp)
   12b48:	e1bffd15 	stw	r6,-12(fp)
   12b4c:	e1fffe15 	stw	r7,-8(fp)
   12b50:	e0fffb17 	ldw	r3,-20(fp)
   12b54:	e0bffd17 	ldw	r2,-12(fp)
   12b58:	10c0060e 	bge	r2,r3,12b74 <LCD_draw_round_corner_box+0x44>
   12b5c:	e0bffd17 	ldw	r2,-12(fp)
   12b60:	e0bff615 	stw	r2,-40(fp)
   12b64:	e0bffb17 	ldw	r2,-20(fp)
   12b68:	e0bffd15 	stw	r2,-12(fp)
   12b6c:	e0bff617 	ldw	r2,-40(fp)
   12b70:	e0bffb15 	stw	r2,-20(fp)
   12b74:	e0fffc17 	ldw	r3,-16(fp)
   12b78:	e0bffe17 	ldw	r2,-8(fp)
   12b7c:	10c0060e 	bge	r2,r3,12b98 <LCD_draw_round_corner_box+0x68>
   12b80:	e0bffe17 	ldw	r2,-8(fp)
   12b84:	e0bff615 	stw	r2,-40(fp)
   12b88:	e0bffc17 	ldw	r2,-16(fp)
   12b8c:	e0bffe15 	stw	r2,-8(fp)
   12b90:	e0bff617 	ldw	r2,-40(fp)
   12b94:	e0bffc15 	stw	r2,-16(fp)
   12b98:	e0fffd17 	ldw	r3,-12(fp)
   12b9c:	e0bffb17 	ldw	r2,-20(fp)
   12ba0:	1885c83a 	sub	r2,r3,r2
   12ba4:	e0bff515 	stw	r2,-44(fp)
   12ba8:	e0fffe17 	ldw	r3,-8(fp)
   12bac:	e0bffc17 	ldw	r2,-16(fp)
   12bb0:	1885c83a 	sub	r2,r3,r2
   12bb4:	e0bff415 	stw	r2,-48(fp)
   12bb8:	e0c00217 	ldw	r3,8(fp)
   12bbc:	e0bff517 	ldw	r2,-44(fp)
   12bc0:	1004d07a 	srli	r2,r2,1
   12bc4:	10c0032e 	bgeu	r2,r3,12bd4 <LCD_draw_round_corner_box+0xa4>
   12bc8:	e0bff517 	ldw	r2,-44(fp)
   12bcc:	1004d07a 	srli	r2,r2,1
   12bd0:	e0800215 	stw	r2,8(fp)
   12bd4:	e0800217 	ldw	r2,8(fp)
   12bd8:	e0fff417 	ldw	r3,-48(fp)
   12bdc:	1806d07a 	srli	r3,r3,1
   12be0:	1880032e 	bgeu	r3,r2,12bf0 <LCD_draw_round_corner_box+0xc0>
   12be4:	e0bff417 	ldw	r2,-48(fp)
   12be8:	1004d07a 	srli	r2,r2,1
   12bec:	e0800215 	stw	r2,8(fp)
   12bf0:	e0800217 	ldw	r2,8(fp)
   12bf4:	1085883a 	add	r2,r2,r2
   12bf8:	e0bff715 	stw	r2,-36(fp)
   12bfc:	e0fff717 	ldw	r3,-36(fp)
   12c00:	e0bff517 	ldw	r2,-44(fp)
   12c04:	10c5c83a 	sub	r2,r2,r3
   12c08:	e0bff315 	stw	r2,-52(fp)
   12c0c:	e0fff717 	ldw	r3,-36(fp)
   12c10:	e0bff417 	ldw	r2,-48(fp)
   12c14:	10c5c83a 	sub	r2,r2,r3
   12c18:	e0bff215 	stw	r2,-56(fp)
   12c1c:	e03ffa15 	stw	zero,-24(fp)
   12c20:	e0800217 	ldw	r2,8(fp)
   12c24:	e0bff915 	stw	r2,-28(fp)
   12c28:	e0800217 	ldw	r2,8(fp)
   12c2c:	1085883a 	add	r2,r2,r2
   12c30:	1085883a 	add	r2,r2,r2
   12c34:	1007883a 	mov	r3,r2
   12c38:	00800144 	movi	r2,5
   12c3c:	10c5c83a 	sub	r2,r2,r3
   12c40:	e0bfff15 	stw	r2,-4(fp)
   12c44:	e0ffff17 	ldw	r3,-4(fp)
   12c48:	1804403a 	cmpge	r2,r3,zero
   12c4c:	1000031e 	bne	r2,zero,12c5c <LCD_draw_round_corner_box+0x12c>
   12c50:	e0bfff17 	ldw	r2,-4(fp)
   12c54:	108000c4 	addi	r2,r2,3
   12c58:	e0bfff15 	stw	r2,-4(fp)
   12c5c:	e0ffff17 	ldw	r3,-4(fp)
   12c60:	1805d0ba 	srai	r2,r3,2
   12c64:	e0bff815 	stw	r2,-32(fp)
   12c68:	e0fffb17 	ldw	r3,-20(fp)
   12c6c:	e0800217 	ldw	r2,8(fp)
   12c70:	1889883a 	add	r4,r3,r2
   12c74:	e0fffc17 	ldw	r3,-16(fp)
   12c78:	e0800217 	ldw	r2,8(fp)
   12c7c:	188b883a 	add	r5,r3,r2
   12c80:	e0bff317 	ldw	r2,-52(fp)
   12c84:	d8800015 	stw	r2,0(sp)
   12c88:	e0bff217 	ldw	r2,-56(fp)
   12c8c:	d8800115 	stw	r2,4(sp)
   12c90:	e0800317 	ldw	r2,12(fp)
   12c94:	d8800215 	stw	r2,8(sp)
   12c98:	e0800417 	ldw	r2,16(fp)
   12c9c:	d8800315 	stw	r2,12(sp)
   12ca0:	e1bffa17 	ldw	r6,-24(fp)
   12ca4:	e1fff917 	ldw	r7,-28(fp)
   12ca8:	0012e8c0 	call	12e8c <LCD_round_corner_points>
   12cac:	00002b06 	br	12d5c <LCD_draw_round_corner_box+0x22c>
   12cb0:	e0bffa17 	ldw	r2,-24(fp)
   12cb4:	10800044 	addi	r2,r2,1
   12cb8:	e0bffa15 	stw	r2,-24(fp)
   12cbc:	e0bff817 	ldw	r2,-32(fp)
   12cc0:	1004403a 	cmpge	r2,r2,zero
   12cc4:	1000081e 	bne	r2,zero,12ce8 <LCD_draw_round_corner_box+0x1b8>
   12cc8:	e0bffa17 	ldw	r2,-24(fp)
   12ccc:	1085883a 	add	r2,r2,r2
   12cd0:	1007883a 	mov	r3,r2
   12cd4:	e0bff817 	ldw	r2,-32(fp)
   12cd8:	1885883a 	add	r2,r3,r2
   12cdc:	10800044 	addi	r2,r2,1
   12ce0:	e0bff815 	stw	r2,-32(fp)
   12ce4:	00000c06 	br	12d18 <LCD_draw_round_corner_box+0x1e8>
   12ce8:	e0bff917 	ldw	r2,-28(fp)
   12cec:	10bfffc4 	addi	r2,r2,-1
   12cf0:	e0bff915 	stw	r2,-28(fp)
   12cf4:	e0fffa17 	ldw	r3,-24(fp)
   12cf8:	e0bff917 	ldw	r2,-28(fp)
   12cfc:	1885c83a 	sub	r2,r3,r2
   12d00:	1085883a 	add	r2,r2,r2
   12d04:	1007883a 	mov	r3,r2
   12d08:	e0bff817 	ldw	r2,-32(fp)
   12d0c:	1885883a 	add	r2,r3,r2
   12d10:	10800044 	addi	r2,r2,1
   12d14:	e0bff815 	stw	r2,-32(fp)
   12d18:	e0fffb17 	ldw	r3,-20(fp)
   12d1c:	e0800217 	ldw	r2,8(fp)
   12d20:	1889883a 	add	r4,r3,r2
   12d24:	e0fffc17 	ldw	r3,-16(fp)
   12d28:	e0800217 	ldw	r2,8(fp)
   12d2c:	188b883a 	add	r5,r3,r2
   12d30:	e0bff317 	ldw	r2,-52(fp)
   12d34:	d8800015 	stw	r2,0(sp)
   12d38:	e0bff217 	ldw	r2,-56(fp)
   12d3c:	d8800115 	stw	r2,4(sp)
   12d40:	e0800317 	ldw	r2,12(fp)
   12d44:	d8800215 	stw	r2,8(sp)
   12d48:	e0800417 	ldw	r2,16(fp)
   12d4c:	d8800315 	stw	r2,12(sp)
   12d50:	e1bffa17 	ldw	r6,-24(fp)
   12d54:	e1fff917 	ldw	r7,-28(fp)
   12d58:	0012e8c0 	call	12e8c <LCD_round_corner_points>
   12d5c:	e0fffa17 	ldw	r3,-24(fp)
   12d60:	e0bff917 	ldw	r2,-28(fp)
   12d64:	18bfd236 	bltu	r3,r2,12cb0 <LCD_draw_round_corner_box+0x180>
   12d68:	e0800417 	ldw	r2,16(fp)
   12d6c:	1005003a 	cmpeq	r2,r2,zero
   12d70:	10000c1e 	bne	r2,zero,12da4 <LCD_draw_round_corner_box+0x274>
   12d74:	e0fffc17 	ldw	r3,-16(fp)
   12d78:	e0800217 	ldw	r2,8(fp)
   12d7c:	188b883a 	add	r5,r3,r2
   12d80:	e0fffe17 	ldw	r3,-8(fp)
   12d84:	e0800217 	ldw	r2,8(fp)
   12d88:	188fc83a 	sub	r7,r3,r2
   12d8c:	e0800317 	ldw	r2,12(fp)
   12d90:	d8800015 	stw	r2,0(sp)
   12d94:	e13ffb17 	ldw	r4,-20(fp)
   12d98:	e1bffd17 	ldw	r6,-12(fp)
   12d9c:	0011f680 	call	11f68 <LCD_paint_block>
   12da0:	00003406 	br	12e74 <LCD_draw_round_corner_box+0x344>
   12da4:	e0fffc17 	ldw	r3,-16(fp)
   12da8:	e0800217 	ldw	r2,8(fp)
   12dac:	188b883a 	add	r5,r3,r2
   12db0:	e0fffe17 	ldw	r3,-8(fp)
   12db4:	e0800217 	ldw	r2,8(fp)
   12db8:	188fc83a 	sub	r7,r3,r2
   12dbc:	00800044 	movi	r2,1
   12dc0:	d8800015 	stw	r2,0(sp)
   12dc4:	e0800317 	ldw	r2,12(fp)
   12dc8:	d8800115 	stw	r2,4(sp)
   12dcc:	e13ffb17 	ldw	r4,-20(fp)
   12dd0:	e1bffb17 	ldw	r6,-20(fp)
   12dd4:	00118e80 	call	118e8 <LCD_draw_line>
   12dd8:	e0fffc17 	ldw	r3,-16(fp)
   12ddc:	e0800217 	ldw	r2,8(fp)
   12de0:	188b883a 	add	r5,r3,r2
   12de4:	e0fffe17 	ldw	r3,-8(fp)
   12de8:	e0800217 	ldw	r2,8(fp)
   12dec:	188fc83a 	sub	r7,r3,r2
   12df0:	00800044 	movi	r2,1
   12df4:	d8800015 	stw	r2,0(sp)
   12df8:	e0800317 	ldw	r2,12(fp)
   12dfc:	d8800115 	stw	r2,4(sp)
   12e00:	e13ffd17 	ldw	r4,-12(fp)
   12e04:	e1bffd17 	ldw	r6,-12(fp)
   12e08:	00118e80 	call	118e8 <LCD_draw_line>
   12e0c:	e0fffb17 	ldw	r3,-20(fp)
   12e10:	e0800217 	ldw	r2,8(fp)
   12e14:	1889883a 	add	r4,r3,r2
   12e18:	e0fffd17 	ldw	r3,-12(fp)
   12e1c:	e0800217 	ldw	r2,8(fp)
   12e20:	188dc83a 	sub	r6,r3,r2
   12e24:	00800044 	movi	r2,1
   12e28:	d8800015 	stw	r2,0(sp)
   12e2c:	e0800317 	ldw	r2,12(fp)
   12e30:	d8800115 	stw	r2,4(sp)
   12e34:	e17ffc17 	ldw	r5,-16(fp)
   12e38:	e1fffc17 	ldw	r7,-16(fp)
   12e3c:	00118e80 	call	118e8 <LCD_draw_line>
   12e40:	e0fffb17 	ldw	r3,-20(fp)
   12e44:	e0800217 	ldw	r2,8(fp)
   12e48:	1889883a 	add	r4,r3,r2
   12e4c:	e0fffd17 	ldw	r3,-12(fp)
   12e50:	e0800217 	ldw	r2,8(fp)
   12e54:	188dc83a 	sub	r6,r3,r2
   12e58:	00800044 	movi	r2,1
   12e5c:	d8800015 	stw	r2,0(sp)
   12e60:	e0800317 	ldw	r2,12(fp)
   12e64:	d8800115 	stw	r2,4(sp)
   12e68:	e17ffe17 	ldw	r5,-8(fp)
   12e6c:	e1fffe17 	ldw	r7,-8(fp)
   12e70:	00118e80 	call	118e8 <LCD_draw_line>
   12e74:	0005883a 	mov	r2,zero
   12e78:	e037883a 	mov	sp,fp
   12e7c:	dfc00117 	ldw	ra,4(sp)
   12e80:	df000017 	ldw	fp,0(sp)
   12e84:	dec00204 	addi	sp,sp,8
   12e88:	f800283a 	ret

00012e8c <LCD_round_corner_points>:
   12e8c:	defff704 	addi	sp,sp,-36
   12e90:	dfc00815 	stw	ra,32(sp)
   12e94:	df000715 	stw	fp,28(sp)
   12e98:	df000704 	addi	fp,sp,28
   12e9c:	e13ffb15 	stw	r4,-20(fp)
   12ea0:	e17ffc15 	stw	r5,-16(fp)
   12ea4:	e1bffd15 	stw	r6,-12(fp)
   12ea8:	e1fffe15 	stw	r7,-8(fp)
   12eac:	e0800517 	ldw	r2,20(fp)
   12eb0:	e0bfff05 	stb	r2,-4(fp)
   12eb4:	e0bffd17 	ldw	r2,-12(fp)
   12eb8:	1004c03a 	cmpne	r2,r2,zero
   12ebc:	1000671e 	bne	r2,zero,1305c <LCD_round_corner_points+0x1d0>
   12ec0:	e0fffc17 	ldw	r3,-16(fp)
   12ec4:	e0bffe17 	ldw	r2,-8(fp)
   12ec8:	1887883a 	add	r3,r3,r2
   12ecc:	e0800317 	ldw	r2,12(fp)
   12ed0:	188b883a 	add	r5,r3,r2
   12ed4:	e1800417 	ldw	r6,16(fp)
   12ed8:	e13ffb17 	ldw	r4,-20(fp)
   12edc:	0011cfc0 	call	11cfc <LCD_set_pixel>
   12ee0:	e0fffb17 	ldw	r3,-20(fp)
   12ee4:	e0800217 	ldw	r2,8(fp)
   12ee8:	1889883a 	add	r4,r3,r2
   12eec:	e0fffc17 	ldw	r3,-16(fp)
   12ef0:	e0bffe17 	ldw	r2,-8(fp)
   12ef4:	1887883a 	add	r3,r3,r2
   12ef8:	e0800317 	ldw	r2,12(fp)
   12efc:	188b883a 	add	r5,r3,r2
   12f00:	e1800417 	ldw	r6,16(fp)
   12f04:	0011cfc0 	call	11cfc <LCD_set_pixel>
   12f08:	e0fffc17 	ldw	r3,-16(fp)
   12f0c:	e0bffe17 	ldw	r2,-8(fp)
   12f10:	188bc83a 	sub	r5,r3,r2
   12f14:	e1800417 	ldw	r6,16(fp)
   12f18:	e13ffb17 	ldw	r4,-20(fp)
   12f1c:	0011cfc0 	call	11cfc <LCD_set_pixel>
   12f20:	e0fffb17 	ldw	r3,-20(fp)
   12f24:	e0800217 	ldw	r2,8(fp)
   12f28:	1889883a 	add	r4,r3,r2
   12f2c:	e0fffc17 	ldw	r3,-16(fp)
   12f30:	e0bffe17 	ldw	r2,-8(fp)
   12f34:	188bc83a 	sub	r5,r3,r2
   12f38:	e1800417 	ldw	r6,16(fp)
   12f3c:	0011cfc0 	call	11cfc <LCD_set_pixel>
   12f40:	e0bfff07 	ldb	r2,-4(fp)
   12f44:	1005003a 	cmpeq	r2,r2,zero
   12f48:	1000231e 	bne	r2,zero,12fd8 <LCD_round_corner_points+0x14c>
   12f4c:	e0fffb17 	ldw	r3,-20(fp)
   12f50:	e0bffe17 	ldw	r2,-8(fp)
   12f54:	1889c83a 	sub	r4,r3,r2
   12f58:	e0fffb17 	ldw	r3,-20(fp)
   12f5c:	e0bffe17 	ldw	r2,-8(fp)
   12f60:	1887883a 	add	r3,r3,r2
   12f64:	e0800217 	ldw	r2,8(fp)
   12f68:	188d883a 	add	r6,r3,r2
   12f6c:	00800044 	movi	r2,1
   12f70:	d8800015 	stw	r2,0(sp)
   12f74:	e0800417 	ldw	r2,16(fp)
   12f78:	d8800115 	stw	r2,4(sp)
   12f7c:	e17ffc17 	ldw	r5,-16(fp)
   12f80:	e1fffc17 	ldw	r7,-16(fp)
   12f84:	00118e80 	call	118e8 <LCD_draw_line>
   12f88:	e0fffb17 	ldw	r3,-20(fp)
   12f8c:	e0bffe17 	ldw	r2,-8(fp)
   12f90:	1889c83a 	sub	r4,r3,r2
   12f94:	e0fffc17 	ldw	r3,-16(fp)
   12f98:	e0800317 	ldw	r2,12(fp)
   12f9c:	188b883a 	add	r5,r3,r2
   12fa0:	e0fffb17 	ldw	r3,-20(fp)
   12fa4:	e0bffe17 	ldw	r2,-8(fp)
   12fa8:	1887883a 	add	r3,r3,r2
   12fac:	e0800217 	ldw	r2,8(fp)
   12fb0:	188d883a 	add	r6,r3,r2
   12fb4:	e0fffc17 	ldw	r3,-16(fp)
   12fb8:	e0800317 	ldw	r2,12(fp)
   12fbc:	188f883a 	add	r7,r3,r2
   12fc0:	00800044 	movi	r2,1
   12fc4:	d8800015 	stw	r2,0(sp)
   12fc8:	e0800417 	ldw	r2,16(fp)
   12fcc:	d8800115 	stw	r2,4(sp)
   12fd0:	00118e80 	call	118e8 <LCD_draw_line>
   12fd4:	00012606 	br	13470 <LCD_round_corner_points+0x5e4>
   12fd8:	e0fffb17 	ldw	r3,-20(fp)
   12fdc:	e0bffe17 	ldw	r2,-8(fp)
   12fe0:	1887883a 	add	r3,r3,r2
   12fe4:	e0800217 	ldw	r2,8(fp)
   12fe8:	1889883a 	add	r4,r3,r2
   12fec:	e1800417 	ldw	r6,16(fp)
   12ff0:	e17ffc17 	ldw	r5,-16(fp)
   12ff4:	0011cfc0 	call	11cfc <LCD_set_pixel>
   12ff8:	e0fffb17 	ldw	r3,-20(fp)
   12ffc:	e0bffe17 	ldw	r2,-8(fp)
   13000:	1887883a 	add	r3,r3,r2
   13004:	e0800217 	ldw	r2,8(fp)
   13008:	1889883a 	add	r4,r3,r2
   1300c:	e0fffc17 	ldw	r3,-16(fp)
   13010:	e0800317 	ldw	r2,12(fp)
   13014:	188b883a 	add	r5,r3,r2
   13018:	e1800417 	ldw	r6,16(fp)
   1301c:	0011cfc0 	call	11cfc <LCD_set_pixel>
   13020:	e0fffb17 	ldw	r3,-20(fp)
   13024:	e0bffe17 	ldw	r2,-8(fp)
   13028:	1889c83a 	sub	r4,r3,r2
   1302c:	e1800417 	ldw	r6,16(fp)
   13030:	e17ffc17 	ldw	r5,-16(fp)
   13034:	0011cfc0 	call	11cfc <LCD_set_pixel>
   13038:	e0fffb17 	ldw	r3,-20(fp)
   1303c:	e0bffe17 	ldw	r2,-8(fp)
   13040:	1889c83a 	sub	r4,r3,r2
   13044:	e0fffc17 	ldw	r3,-16(fp)
   13048:	e0800317 	ldw	r2,12(fp)
   1304c:	188b883a 	add	r5,r3,r2
   13050:	e1800417 	ldw	r6,16(fp)
   13054:	0011cfc0 	call	11cfc <LCD_set_pixel>
   13058:	00010506 	br	13470 <LCD_round_corner_points+0x5e4>
   1305c:	e0fffd17 	ldw	r3,-12(fp)
   13060:	e0bffe17 	ldw	r2,-8(fp)
   13064:	1880571e 	bne	r3,r2,131c4 <LCD_round_corner_points+0x338>
   13068:	e0bfff07 	ldb	r2,-4(fp)
   1306c:	1005003a 	cmpeq	r2,r2,zero
   13070:	10002b1e 	bne	r2,zero,13120 <LCD_round_corner_points+0x294>
   13074:	e0fffb17 	ldw	r3,-20(fp)
   13078:	e0bffd17 	ldw	r2,-12(fp)
   1307c:	1889c83a 	sub	r4,r3,r2
   13080:	e0fffc17 	ldw	r3,-16(fp)
   13084:	e0bffe17 	ldw	r2,-8(fp)
   13088:	1887883a 	add	r3,r3,r2
   1308c:	e0800317 	ldw	r2,12(fp)
   13090:	188b883a 	add	r5,r3,r2
   13094:	e0fffb17 	ldw	r3,-20(fp)
   13098:	e0bffd17 	ldw	r2,-12(fp)
   1309c:	1887883a 	add	r3,r3,r2
   130a0:	e0800217 	ldw	r2,8(fp)
   130a4:	188d883a 	add	r6,r3,r2
   130a8:	e0fffc17 	ldw	r3,-16(fp)
   130ac:	e0bffe17 	ldw	r2,-8(fp)
   130b0:	1887883a 	add	r3,r3,r2
   130b4:	e0800317 	ldw	r2,12(fp)
   130b8:	188f883a 	add	r7,r3,r2
   130bc:	00800044 	movi	r2,1
   130c0:	d8800015 	stw	r2,0(sp)
   130c4:	e0800417 	ldw	r2,16(fp)
   130c8:	d8800115 	stw	r2,4(sp)
   130cc:	00118e80 	call	118e8 <LCD_draw_line>
   130d0:	e0fffb17 	ldw	r3,-20(fp)
   130d4:	e0bffd17 	ldw	r2,-12(fp)
   130d8:	1889c83a 	sub	r4,r3,r2
   130dc:	e0fffc17 	ldw	r3,-16(fp)
   130e0:	e0bffe17 	ldw	r2,-8(fp)
   130e4:	188bc83a 	sub	r5,r3,r2
   130e8:	e0fffb17 	ldw	r3,-20(fp)
   130ec:	e0bffd17 	ldw	r2,-12(fp)
   130f0:	1887883a 	add	r3,r3,r2
   130f4:	e0800217 	ldw	r2,8(fp)
   130f8:	188d883a 	add	r6,r3,r2
   130fc:	e0fffc17 	ldw	r3,-16(fp)
   13100:	e0bffe17 	ldw	r2,-8(fp)
   13104:	188fc83a 	sub	r7,r3,r2
   13108:	00800044 	movi	r2,1
   1310c:	d8800015 	stw	r2,0(sp)
   13110:	e0800417 	ldw	r2,16(fp)
   13114:	d8800115 	stw	r2,4(sp)
   13118:	00118e80 	call	118e8 <LCD_draw_line>
   1311c:	0000d406 	br	13470 <LCD_round_corner_points+0x5e4>
   13120:	e0fffb17 	ldw	r3,-20(fp)
   13124:	e0bffd17 	ldw	r2,-12(fp)
   13128:	1887883a 	add	r3,r3,r2
   1312c:	e0800217 	ldw	r2,8(fp)
   13130:	1889883a 	add	r4,r3,r2
   13134:	e0fffc17 	ldw	r3,-16(fp)
   13138:	e0bffe17 	ldw	r2,-8(fp)
   1313c:	1887883a 	add	r3,r3,r2
   13140:	e0800317 	ldw	r2,12(fp)
   13144:	188b883a 	add	r5,r3,r2
   13148:	e1800417 	ldw	r6,16(fp)
   1314c:	0011cfc0 	call	11cfc <LCD_set_pixel>
   13150:	e0fffb17 	ldw	r3,-20(fp)
   13154:	e0bffd17 	ldw	r2,-12(fp)
   13158:	1889c83a 	sub	r4,r3,r2
   1315c:	e0fffc17 	ldw	r3,-16(fp)
   13160:	e0bffe17 	ldw	r2,-8(fp)
   13164:	1887883a 	add	r3,r3,r2
   13168:	e0800317 	ldw	r2,12(fp)
   1316c:	188b883a 	add	r5,r3,r2
   13170:	e1800417 	ldw	r6,16(fp)
   13174:	0011cfc0 	call	11cfc <LCD_set_pixel>
   13178:	e0fffb17 	ldw	r3,-20(fp)
   1317c:	e0bffd17 	ldw	r2,-12(fp)
   13180:	1887883a 	add	r3,r3,r2
   13184:	e0800217 	ldw	r2,8(fp)
   13188:	1889883a 	add	r4,r3,r2
   1318c:	e0fffc17 	ldw	r3,-16(fp)
   13190:	e0bffe17 	ldw	r2,-8(fp)
   13194:	188bc83a 	sub	r5,r3,r2
   13198:	e1800417 	ldw	r6,16(fp)
   1319c:	0011cfc0 	call	11cfc <LCD_set_pixel>
   131a0:	e0fffb17 	ldw	r3,-20(fp)
   131a4:	e0bffd17 	ldw	r2,-12(fp)
   131a8:	1889c83a 	sub	r4,r3,r2
   131ac:	e0fffc17 	ldw	r3,-16(fp)
   131b0:	e0bffe17 	ldw	r2,-8(fp)
   131b4:	188bc83a 	sub	r5,r3,r2
   131b8:	e1800417 	ldw	r6,16(fp)
   131bc:	0011cfc0 	call	11cfc <LCD_set_pixel>
   131c0:	0000ab06 	br	13470 <LCD_round_corner_points+0x5e4>
   131c4:	e0fffd17 	ldw	r3,-12(fp)
   131c8:	e0bffe17 	ldw	r2,-8(fp)
   131cc:	1880a80e 	bge	r3,r2,13470 <LCD_round_corner_points+0x5e4>
   131d0:	e0bfff07 	ldb	r2,-4(fp)
   131d4:	1005003a 	cmpeq	r2,r2,zero
   131d8:	1000551e 	bne	r2,zero,13330 <LCD_round_corner_points+0x4a4>
   131dc:	e0fffb17 	ldw	r3,-20(fp)
   131e0:	e0bffd17 	ldw	r2,-12(fp)
   131e4:	1889c83a 	sub	r4,r3,r2
   131e8:	e0fffc17 	ldw	r3,-16(fp)
   131ec:	e0bffe17 	ldw	r2,-8(fp)
   131f0:	1887883a 	add	r3,r3,r2
   131f4:	e0800317 	ldw	r2,12(fp)
   131f8:	188b883a 	add	r5,r3,r2
   131fc:	e0fffb17 	ldw	r3,-20(fp)
   13200:	e0bffd17 	ldw	r2,-12(fp)
   13204:	1887883a 	add	r3,r3,r2
   13208:	e0800217 	ldw	r2,8(fp)
   1320c:	188d883a 	add	r6,r3,r2
   13210:	e0fffc17 	ldw	r3,-16(fp)
   13214:	e0bffe17 	ldw	r2,-8(fp)
   13218:	1887883a 	add	r3,r3,r2
   1321c:	e0800317 	ldw	r2,12(fp)
   13220:	188f883a 	add	r7,r3,r2
   13224:	00800044 	movi	r2,1
   13228:	d8800015 	stw	r2,0(sp)
   1322c:	e0800417 	ldw	r2,16(fp)
   13230:	d8800115 	stw	r2,4(sp)
   13234:	00118e80 	call	118e8 <LCD_draw_line>
   13238:	e0fffb17 	ldw	r3,-20(fp)
   1323c:	e0bffe17 	ldw	r2,-8(fp)
   13240:	1889c83a 	sub	r4,r3,r2
   13244:	e0fffc17 	ldw	r3,-16(fp)
   13248:	e0bffd17 	ldw	r2,-12(fp)
   1324c:	1887883a 	add	r3,r3,r2
   13250:	e0800317 	ldw	r2,12(fp)
   13254:	188b883a 	add	r5,r3,r2
   13258:	e0fffb17 	ldw	r3,-20(fp)
   1325c:	e0bffe17 	ldw	r2,-8(fp)
   13260:	1887883a 	add	r3,r3,r2
   13264:	e0800217 	ldw	r2,8(fp)
   13268:	188d883a 	add	r6,r3,r2
   1326c:	e0fffc17 	ldw	r3,-16(fp)
   13270:	e0bffd17 	ldw	r2,-12(fp)
   13274:	1887883a 	add	r3,r3,r2
   13278:	e0800317 	ldw	r2,12(fp)
   1327c:	188f883a 	add	r7,r3,r2
   13280:	00800044 	movi	r2,1
   13284:	d8800015 	stw	r2,0(sp)
   13288:	e0800417 	ldw	r2,16(fp)
   1328c:	d8800115 	stw	r2,4(sp)
   13290:	00118e80 	call	118e8 <LCD_draw_line>
   13294:	e0fffb17 	ldw	r3,-20(fp)
   13298:	e0bffe17 	ldw	r2,-8(fp)
   1329c:	1889c83a 	sub	r4,r3,r2
   132a0:	e0fffc17 	ldw	r3,-16(fp)
   132a4:	e0bffd17 	ldw	r2,-12(fp)
   132a8:	188bc83a 	sub	r5,r3,r2
   132ac:	e0fffb17 	ldw	r3,-20(fp)
   132b0:	e0bffe17 	ldw	r2,-8(fp)
   132b4:	1887883a 	add	r3,r3,r2
   132b8:	e0800217 	ldw	r2,8(fp)
   132bc:	188d883a 	add	r6,r3,r2
   132c0:	e0fffc17 	ldw	r3,-16(fp)
   132c4:	e0bffd17 	ldw	r2,-12(fp)
   132c8:	188fc83a 	sub	r7,r3,r2
   132cc:	00800044 	movi	r2,1
   132d0:	d8800015 	stw	r2,0(sp)
   132d4:	e0800417 	ldw	r2,16(fp)
   132d8:	d8800115 	stw	r2,4(sp)
   132dc:	00118e80 	call	118e8 <LCD_draw_line>
   132e0:	e0fffb17 	ldw	r3,-20(fp)
   132e4:	e0bffd17 	ldw	r2,-12(fp)
   132e8:	1889c83a 	sub	r4,r3,r2
   132ec:	e0fffc17 	ldw	r3,-16(fp)
   132f0:	e0bffe17 	ldw	r2,-8(fp)
   132f4:	188bc83a 	sub	r5,r3,r2
   132f8:	e0fffb17 	ldw	r3,-20(fp)
   132fc:	e0bffd17 	ldw	r2,-12(fp)
   13300:	1887883a 	add	r3,r3,r2
   13304:	e0800217 	ldw	r2,8(fp)
   13308:	188d883a 	add	r6,r3,r2
   1330c:	e0fffc17 	ldw	r3,-16(fp)
   13310:	e0bffe17 	ldw	r2,-8(fp)
   13314:	188fc83a 	sub	r7,r3,r2
   13318:	00800044 	movi	r2,1
   1331c:	d8800015 	stw	r2,0(sp)
   13320:	e0800417 	ldw	r2,16(fp)
   13324:	d8800115 	stw	r2,4(sp)
   13328:	00118e80 	call	118e8 <LCD_draw_line>
   1332c:	00005006 	br	13470 <LCD_round_corner_points+0x5e4>
   13330:	e0fffb17 	ldw	r3,-20(fp)
   13334:	e0bffd17 	ldw	r2,-12(fp)
   13338:	1887883a 	add	r3,r3,r2
   1333c:	e0800217 	ldw	r2,8(fp)
   13340:	1889883a 	add	r4,r3,r2
   13344:	e0fffc17 	ldw	r3,-16(fp)
   13348:	e0bffe17 	ldw	r2,-8(fp)
   1334c:	1887883a 	add	r3,r3,r2
   13350:	e0800317 	ldw	r2,12(fp)
   13354:	188b883a 	add	r5,r3,r2
   13358:	e1800417 	ldw	r6,16(fp)
   1335c:	0011cfc0 	call	11cfc <LCD_set_pixel>
   13360:	e0fffb17 	ldw	r3,-20(fp)
   13364:	e0bffd17 	ldw	r2,-12(fp)
   13368:	1889c83a 	sub	r4,r3,r2
   1336c:	e0fffc17 	ldw	r3,-16(fp)
   13370:	e0bffe17 	ldw	r2,-8(fp)
   13374:	1887883a 	add	r3,r3,r2
   13378:	e0800317 	ldw	r2,12(fp)
   1337c:	188b883a 	add	r5,r3,r2
   13380:	e1800417 	ldw	r6,16(fp)
   13384:	0011cfc0 	call	11cfc <LCD_set_pixel>
   13388:	e0fffb17 	ldw	r3,-20(fp)
   1338c:	e0bffd17 	ldw	r2,-12(fp)
   13390:	1887883a 	add	r3,r3,r2
   13394:	e0800217 	ldw	r2,8(fp)
   13398:	1889883a 	add	r4,r3,r2
   1339c:	e0fffc17 	ldw	r3,-16(fp)
   133a0:	e0bffe17 	ldw	r2,-8(fp)
   133a4:	188bc83a 	sub	r5,r3,r2
   133a8:	e1800417 	ldw	r6,16(fp)
   133ac:	0011cfc0 	call	11cfc <LCD_set_pixel>
   133b0:	e0fffb17 	ldw	r3,-20(fp)
   133b4:	e0bffd17 	ldw	r2,-12(fp)
   133b8:	1889c83a 	sub	r4,r3,r2
   133bc:	e0fffc17 	ldw	r3,-16(fp)
   133c0:	e0bffe17 	ldw	r2,-8(fp)
   133c4:	188bc83a 	sub	r5,r3,r2
   133c8:	e1800417 	ldw	r6,16(fp)
   133cc:	0011cfc0 	call	11cfc <LCD_set_pixel>
   133d0:	e0fffb17 	ldw	r3,-20(fp)
   133d4:	e0bffe17 	ldw	r2,-8(fp)
   133d8:	1887883a 	add	r3,r3,r2
   133dc:	e0800217 	ldw	r2,8(fp)
   133e0:	1889883a 	add	r4,r3,r2
   133e4:	e0fffc17 	ldw	r3,-16(fp)
   133e8:	e0bffd17 	ldw	r2,-12(fp)
   133ec:	1887883a 	add	r3,r3,r2
   133f0:	e0800317 	ldw	r2,12(fp)
   133f4:	188b883a 	add	r5,r3,r2
   133f8:	e1800417 	ldw	r6,16(fp)
   133fc:	0011cfc0 	call	11cfc <LCD_set_pixel>
   13400:	e0fffb17 	ldw	r3,-20(fp)
   13404:	e0bffe17 	ldw	r2,-8(fp)
   13408:	1889c83a 	sub	r4,r3,r2
   1340c:	e0fffc17 	ldw	r3,-16(fp)
   13410:	e0bffd17 	ldw	r2,-12(fp)
   13414:	1887883a 	add	r3,r3,r2
   13418:	e0800317 	ldw	r2,12(fp)
   1341c:	188b883a 	add	r5,r3,r2
   13420:	e1800417 	ldw	r6,16(fp)
   13424:	0011cfc0 	call	11cfc <LCD_set_pixel>
   13428:	e0fffb17 	ldw	r3,-20(fp)
   1342c:	e0bffe17 	ldw	r2,-8(fp)
   13430:	1887883a 	add	r3,r3,r2
   13434:	e0800217 	ldw	r2,8(fp)
   13438:	1889883a 	add	r4,r3,r2
   1343c:	e0fffc17 	ldw	r3,-16(fp)
   13440:	e0bffd17 	ldw	r2,-12(fp)
   13444:	188bc83a 	sub	r5,r3,r2
   13448:	e1800417 	ldw	r6,16(fp)
   1344c:	0011cfc0 	call	11cfc <LCD_set_pixel>
   13450:	e0fffb17 	ldw	r3,-20(fp)
   13454:	e0bffe17 	ldw	r2,-8(fp)
   13458:	1889c83a 	sub	r4,r3,r2
   1345c:	e0fffc17 	ldw	r3,-16(fp)
   13460:	e0bffd17 	ldw	r2,-12(fp)
   13464:	188bc83a 	sub	r5,r3,r2
   13468:	e1800417 	ldw	r6,16(fp)
   1346c:	0011cfc0 	call	11cfc <LCD_set_pixel>
   13470:	e037883a 	mov	sp,fp
   13474:	dfc00117 	ldw	ra,4(sp)
   13478:	df000017 	ldw	fp,0(sp)
   1347c:	dec00204 	addi	sp,sp,8
   13480:	f800283a 	ret

00013484 <__fixunssfsi>:
   13484:	defffd04 	addi	sp,sp,-12
   13488:	dc000015 	stw	r16,0(sp)
   1348c:	0413c034 	movhi	r16,20224
   13490:	800b883a 	mov	r5,r16
   13494:	dc400115 	stw	r17,4(sp)
   13498:	dfc00215 	stw	ra,8(sp)
   1349c:	2023883a 	mov	r17,r4
   134a0:	0013b000 	call	13b00 <__gesf2>
   134a4:	800b883a 	mov	r5,r16
   134a8:	8809883a 	mov	r4,r17
   134ac:	10000a16 	blt	r2,zero,134d8 <__fixunssfsi+0x54>
   134b0:	00136d80 	call	136d8 <__subsf3>
   134b4:	1009883a 	mov	r4,r2
   134b8:	0013b780 	call	13b78 <__fixsfsi>
   134bc:	00e00034 	movhi	r3,32768
   134c0:	10c5883a 	add	r2,r2,r3
   134c4:	dfc00217 	ldw	ra,8(sp)
   134c8:	dc400117 	ldw	r17,4(sp)
   134cc:	dc000017 	ldw	r16,0(sp)
   134d0:	dec00304 	addi	sp,sp,12
   134d4:	f800283a 	ret
   134d8:	8809883a 	mov	r4,r17
   134dc:	0013b780 	call	13b78 <__fixsfsi>
   134e0:	dfc00217 	ldw	ra,8(sp)
   134e4:	dc400117 	ldw	r17,4(sp)
   134e8:	dc000017 	ldw	r16,0(sp)
   134ec:	dec00304 	addi	sp,sp,12
   134f0:	f800283a 	ret

000134f4 <_fpadd_parts>:
   134f4:	21c00017 	ldw	r7,0(r4)
   134f8:	02000044 	movi	r8,1
   134fc:	41c0332e 	bgeu	r8,r7,135cc <_fpadd_parts+0xd8>
   13500:	28800017 	ldw	r2,0(r5)
   13504:	4080462e 	bgeu	r8,r2,13620 <_fpadd_parts+0x12c>
   13508:	00c00104 	movi	r3,4
   1350c:	38c06b26 	beq	r7,r3,136bc <_fpadd_parts+0x1c8>
   13510:	10c04326 	beq	r2,r3,13620 <_fpadd_parts+0x12c>
   13514:	00c00084 	movi	r3,2
   13518:	10c02e26 	beq	r2,r3,135d4 <_fpadd_parts+0xe0>
   1351c:	38c04026 	beq	r7,r3,13620 <_fpadd_parts+0x12c>
   13520:	22800217 	ldw	r10,8(r4)
   13524:	28c00217 	ldw	r3,8(r5)
   13528:	23000317 	ldw	r12,12(r4)
   1352c:	2a400317 	ldw	r9,12(r5)
   13530:	50cfc83a 	sub	r7,r10,r3
   13534:	3817883a 	mov	r11,r7
   13538:	38004f16 	blt	r7,zero,13678 <_fpadd_parts+0x184>
   1353c:	008007c4 	movi	r2,31
   13540:	11c03316 	blt	r2,r7,13610 <_fpadd_parts+0x11c>
   13544:	02c0540e 	bge	zero,r11,13698 <_fpadd_parts+0x1a4>
   13548:	41c4983a 	sll	r2,r8,r7
   1354c:	49c6d83a 	srl	r3,r9,r7
   13550:	10bfffc4 	addi	r2,r2,-1
   13554:	4884703a 	and	r2,r9,r2
   13558:	1004c03a 	cmpne	r2,r2,zero
   1355c:	1892b03a 	or	r9,r3,r2
   13560:	20c00117 	ldw	r3,4(r4)
   13564:	28800117 	ldw	r2,4(r5)
   13568:	18803c26 	beq	r3,r2,1365c <_fpadd_parts+0x168>
   1356c:	18002f26 	beq	r3,zero,1362c <_fpadd_parts+0x138>
   13570:	4b05c83a 	sub	r2,r9,r12
   13574:	10004216 	blt	r2,zero,13680 <_fpadd_parts+0x18c>
   13578:	32800215 	stw	r10,8(r6)
   1357c:	30800315 	stw	r2,12(r6)
   13580:	30000115 	stw	zero,4(r6)
   13584:	31000317 	ldw	r4,12(r6)
   13588:	01d00034 	movhi	r7,16384
   1358c:	39ffff84 	addi	r7,r7,-2
   13590:	20bfffc4 	addi	r2,r4,-1
   13594:	2007883a 	mov	r3,r4
   13598:	38800836 	bltu	r7,r2,135bc <_fpadd_parts+0xc8>
   1359c:	31400217 	ldw	r5,8(r6)
   135a0:	18c9883a 	add	r4,r3,r3
   135a4:	20bfffc4 	addi	r2,r4,-1
   135a8:	297fffc4 	addi	r5,r5,-1
   135ac:	2007883a 	mov	r3,r4
   135b0:	38bffb2e 	bgeu	r7,r2,135a0 <_fpadd_parts+0xac>
   135b4:	31400215 	stw	r5,8(r6)
   135b8:	31000315 	stw	r4,12(r6)
   135bc:	008000c4 	movi	r2,3
   135c0:	30800015 	stw	r2,0(r6)
   135c4:	20001b16 	blt	r4,zero,13634 <_fpadd_parts+0x140>
   135c8:	3009883a 	mov	r4,r6
   135cc:	2005883a 	mov	r2,r4
   135d0:	f800283a 	ret
   135d4:	38fffd1e 	bne	r7,r3,135cc <_fpadd_parts+0xd8>
   135d8:	31c00015 	stw	r7,0(r6)
   135dc:	20800117 	ldw	r2,4(r4)
   135e0:	30800115 	stw	r2,4(r6)
   135e4:	20c00217 	ldw	r3,8(r4)
   135e8:	30c00215 	stw	r3,8(r6)
   135ec:	20800317 	ldw	r2,12(r4)
   135f0:	30800315 	stw	r2,12(r6)
   135f4:	20c00117 	ldw	r3,4(r4)
   135f8:	28800117 	ldw	r2,4(r5)
   135fc:	3009883a 	mov	r4,r6
   13600:	1886703a 	and	r3,r3,r2
   13604:	2005883a 	mov	r2,r4
   13608:	30c00115 	stw	r3,4(r6)
   1360c:	f800283a 	ret
   13610:	1a801716 	blt	r3,r10,13670 <_fpadd_parts+0x17c>
   13614:	1815883a 	mov	r10,r3
   13618:	0019883a 	mov	r12,zero
   1361c:	003fd006 	br	13560 <_fpadd_parts+0x6c>
   13620:	2809883a 	mov	r4,r5
   13624:	2005883a 	mov	r2,r4
   13628:	f800283a 	ret
   1362c:	6245c83a 	sub	r2,r12,r9
   13630:	003fd006 	br	13574 <_fpadd_parts+0x80>
   13634:	30800217 	ldw	r2,8(r6)
   13638:	2006d07a 	srli	r3,r4,1
   1363c:	2100004c 	andi	r4,r4,1
   13640:	10800044 	addi	r2,r2,1
   13644:	1906b03a 	or	r3,r3,r4
   13648:	3009883a 	mov	r4,r6
   1364c:	30800215 	stw	r2,8(r6)
   13650:	2005883a 	mov	r2,r4
   13654:	30c00315 	stw	r3,12(r6)
   13658:	f800283a 	ret
   1365c:	4b09883a 	add	r4,r9,r12
   13660:	30c00115 	stw	r3,4(r6)
   13664:	32800215 	stw	r10,8(r6)
   13668:	31000315 	stw	r4,12(r6)
   1366c:	003fd306 	br	135bc <_fpadd_parts+0xc8>
   13670:	0013883a 	mov	r9,zero
   13674:	003fba06 	br	13560 <_fpadd_parts+0x6c>
   13678:	01cfc83a 	sub	r7,zero,r7
   1367c:	003faf06 	br	1353c <_fpadd_parts+0x48>
   13680:	0089c83a 	sub	r4,zero,r2
   13684:	00800044 	movi	r2,1
   13688:	30800115 	stw	r2,4(r6)
   1368c:	32800215 	stw	r10,8(r6)
   13690:	31000315 	stw	r4,12(r6)
   13694:	003fbb06 	br	13584 <_fpadd_parts+0x90>
   13698:	583fb126 	beq	r11,zero,13560 <_fpadd_parts+0x6c>
   1369c:	41c4983a 	sll	r2,r8,r7
   136a0:	61c6d83a 	srl	r3,r12,r7
   136a4:	51d5883a 	add	r10,r10,r7
   136a8:	10bfffc4 	addi	r2,r2,-1
   136ac:	6084703a 	and	r2,r12,r2
   136b0:	1004c03a 	cmpne	r2,r2,zero
   136b4:	1898b03a 	or	r12,r3,r2
   136b8:	003fa906 	br	13560 <_fpadd_parts+0x6c>
   136bc:	11ffc31e 	bne	r2,r7,135cc <_fpadd_parts+0xd8>
   136c0:	28c00117 	ldw	r3,4(r5)
   136c4:	20800117 	ldw	r2,4(r4)
   136c8:	10ffc026 	beq	r2,r3,135cc <_fpadd_parts+0xd8>
   136cc:	01000074 	movhi	r4,1
   136d0:	211c0a04 	addi	r4,r4,28712
   136d4:	003fbd06 	br	135cc <_fpadd_parts+0xd8>

000136d8 <__subsf3>:
   136d8:	deffef04 	addi	sp,sp,-68
   136dc:	dcc00f15 	stw	r19,60(sp)
   136e0:	dcc00204 	addi	r19,sp,8
   136e4:	dc400e15 	stw	r17,56(sp)
   136e8:	d9000015 	stw	r4,0(sp)
   136ec:	d9400115 	stw	r5,4(sp)
   136f0:	d809883a 	mov	r4,sp
   136f4:	980b883a 	mov	r5,r19
   136f8:	dc400604 	addi	r17,sp,24
   136fc:	dfc01015 	stw	ra,64(sp)
   13700:	0014aa00 	call	14aa0 <__unpack_f>
   13704:	d9000104 	addi	r4,sp,4
   13708:	880b883a 	mov	r5,r17
   1370c:	0014aa00 	call	14aa0 <__unpack_f>
   13710:	d8800717 	ldw	r2,28(sp)
   13714:	9809883a 	mov	r4,r19
   13718:	880b883a 	mov	r5,r17
   1371c:	d9800a04 	addi	r6,sp,40
   13720:	1080005c 	xori	r2,r2,1
   13724:	d8800715 	stw	r2,28(sp)
   13728:	00134f40 	call	134f4 <_fpadd_parts>
   1372c:	1009883a 	mov	r4,r2
   13730:	00149400 	call	14940 <__pack_f>
   13734:	dfc01017 	ldw	ra,64(sp)
   13738:	dcc00f17 	ldw	r19,60(sp)
   1373c:	dc400e17 	ldw	r17,56(sp)
   13740:	dec01104 	addi	sp,sp,68
   13744:	f800283a 	ret

00013748 <__addsf3>:
   13748:	deffef04 	addi	sp,sp,-68
   1374c:	dcc00f15 	stw	r19,60(sp)
   13750:	dcc00204 	addi	r19,sp,8
   13754:	dc400e15 	stw	r17,56(sp)
   13758:	d9000015 	stw	r4,0(sp)
   1375c:	d9400115 	stw	r5,4(sp)
   13760:	d809883a 	mov	r4,sp
   13764:	980b883a 	mov	r5,r19
   13768:	dc400604 	addi	r17,sp,24
   1376c:	dfc01015 	stw	ra,64(sp)
   13770:	0014aa00 	call	14aa0 <__unpack_f>
   13774:	d9000104 	addi	r4,sp,4
   13778:	880b883a 	mov	r5,r17
   1377c:	0014aa00 	call	14aa0 <__unpack_f>
   13780:	d9800a04 	addi	r6,sp,40
   13784:	9809883a 	mov	r4,r19
   13788:	880b883a 	mov	r5,r17
   1378c:	00134f40 	call	134f4 <_fpadd_parts>
   13790:	1009883a 	mov	r4,r2
   13794:	00149400 	call	14940 <__pack_f>
   13798:	dfc01017 	ldw	ra,64(sp)
   1379c:	dcc00f17 	ldw	r19,60(sp)
   137a0:	dc400e17 	ldw	r17,56(sp)
   137a4:	dec01104 	addi	sp,sp,68
   137a8:	f800283a 	ret

000137ac <__mulsf3>:
   137ac:	deffef04 	addi	sp,sp,-68
   137b0:	dc400f15 	stw	r17,60(sp)
   137b4:	dc400204 	addi	r17,sp,8
   137b8:	dc000e15 	stw	r16,56(sp)
   137bc:	d9000015 	stw	r4,0(sp)
   137c0:	d9400115 	stw	r5,4(sp)
   137c4:	d809883a 	mov	r4,sp
   137c8:	880b883a 	mov	r5,r17
   137cc:	dc000604 	addi	r16,sp,24
   137d0:	dfc01015 	stw	ra,64(sp)
   137d4:	0014aa00 	call	14aa0 <__unpack_f>
   137d8:	d9000104 	addi	r4,sp,4
   137dc:	800b883a 	mov	r5,r16
   137e0:	0014aa00 	call	14aa0 <__unpack_f>
   137e4:	d9000217 	ldw	r4,8(sp)
   137e8:	00800044 	movi	r2,1
   137ec:	01400104 	movi	r5,4
   137f0:	1100142e 	bgeu	r2,r4,13844 <__mulsf3+0x98>
   137f4:	d8c00617 	ldw	r3,24(sp)
   137f8:	10c0052e 	bgeu	r2,r3,13810 <__mulsf3+0x64>
   137fc:	21400f26 	beq	r4,r5,1383c <__mulsf3+0x90>
   13800:	19405d26 	beq	r3,r5,13978 <__mulsf3+0x1cc>
   13804:	00800084 	movi	r2,2
   13808:	20800e26 	beq	r4,r2,13844 <__mulsf3+0x98>
   1380c:	1880181e 	bne	r3,r2,13870 <__mulsf3+0xc4>
   13810:	d8c00717 	ldw	r3,28(sp)
   13814:	d8800317 	ldw	r2,12(sp)
   13818:	8009883a 	mov	r4,r16
   1381c:	10c4c03a 	cmpne	r2,r2,r3
   13820:	d8800715 	stw	r2,28(sp)
   13824:	00149400 	call	14940 <__pack_f>
   13828:	dfc01017 	ldw	ra,64(sp)
   1382c:	dc400f17 	ldw	r17,60(sp)
   13830:	dc000e17 	ldw	r16,56(sp)
   13834:	dec01104 	addi	sp,sp,68
   13838:	f800283a 	ret
   1383c:	00800084 	movi	r2,2
   13840:	18804f26 	beq	r3,r2,13980 <__mulsf3+0x1d4>
   13844:	d8800317 	ldw	r2,12(sp)
   13848:	d8c00717 	ldw	r3,28(sp)
   1384c:	8809883a 	mov	r4,r17
   13850:	10c4c03a 	cmpne	r2,r2,r3
   13854:	d8800315 	stw	r2,12(sp)
   13858:	00149400 	call	14940 <__pack_f>
   1385c:	dfc01017 	ldw	ra,64(sp)
   13860:	dc400f17 	ldw	r17,60(sp)
   13864:	dc000e17 	ldw	r16,56(sp)
   13868:	dec01104 	addi	sp,sp,68
   1386c:	f800283a 	ret
   13870:	d8800517 	ldw	r2,20(sp)
   13874:	da000917 	ldw	r8,36(sp)
   13878:	0013883a 	mov	r9,zero
   1387c:	0007883a 	mov	r3,zero
   13880:	480f883a 	mov	r7,r9
   13884:	180b883a 	mov	r5,r3
   13888:	400d883a 	mov	r6,r8
   1388c:	1009883a 	mov	r4,r2
   13890:	001479c0 	call	1479c <__muldi3>
   13894:	da800417 	ldw	r10,16(sp)
   13898:	d9800817 	ldw	r6,32(sp)
   1389c:	da400317 	ldw	r9,12(sp)
   138a0:	52800084 	addi	r10,r10,2
   138a4:	3295883a 	add	r10,r6,r10
   138a8:	d9800717 	ldw	r6,28(sp)
   138ac:	180b883a 	mov	r5,r3
   138b0:	180f883a 	mov	r7,r3
   138b4:	4992c03a 	cmpne	r9,r9,r6
   138b8:	da400b15 	stw	r9,44(sp)
   138bc:	1007883a 	mov	r3,r2
   138c0:	da800c15 	stw	r10,48(sp)
   138c4:	2800070e 	bge	r5,zero,138e4 <__mulsf3+0x138>
   138c8:	2880004c 	andi	r2,r5,1
   138cc:	1005003a 	cmpeq	r2,r2,zero
   138d0:	500d883a 	mov	r6,r10
   138d4:	10001e26 	beq	r2,zero,13950 <__mulsf3+0x1a4>
   138d8:	380ed07a 	srli	r7,r7,1
   138dc:	31800044 	addi	r6,r6,1
   138e0:	d9800c15 	stw	r6,48(sp)
   138e4:	01100034 	movhi	r4,16384
   138e8:	213fffc4 	addi	r4,r4,-1
   138ec:	21c00b36 	bltu	r4,r7,1391c <__mulsf3+0x170>
   138f0:	d8800c17 	ldw	r2,48(sp)
   138f4:	00000206 	br	13900 <__mulsf3+0x154>
   138f8:	18c7883a 	add	r3,r3,r3
   138fc:	21c00636 	bltu	r4,r7,13918 <__mulsf3+0x16c>
   13900:	10bfffc4 	addi	r2,r2,-1
   13904:	39cf883a 	add	r7,r7,r7
   13908:	183ffb0e 	bge	r3,zero,138f8 <__mulsf3+0x14c>
   1390c:	39c00054 	ori	r7,r7,1
   13910:	18c7883a 	add	r3,r3,r3
   13914:	21fffa2e 	bgeu	r4,r7,13900 <__mulsf3+0x154>
   13918:	d8800c15 	stw	r2,48(sp)
   1391c:	39001fcc 	andi	r4,r7,127
   13920:	00801004 	movi	r2,64
   13924:	20800d26 	beq	r4,r2,1395c <__mulsf3+0x1b0>
   13928:	008000c4 	movi	r2,3
   1392c:	d9000a04 	addi	r4,sp,40
   13930:	d9c00d15 	stw	r7,52(sp)
   13934:	d8800a15 	stw	r2,40(sp)
   13938:	00149400 	call	14940 <__pack_f>
   1393c:	dfc01017 	ldw	ra,64(sp)
   13940:	dc400f17 	ldw	r17,60(sp)
   13944:	dc000e17 	ldw	r16,56(sp)
   13948:	dec01104 	addi	sp,sp,68
   1394c:	f800283a 	ret
   13950:	1804d07a 	srli	r2,r3,1
   13954:	10e00034 	orhi	r3,r2,32768
   13958:	003fdf06 	br	138d8 <__mulsf3+0x12c>
   1395c:	3880200c 	andi	r2,r7,128
   13960:	103ff11e 	bne	r2,zero,13928 <__mulsf3+0x17c>
   13964:	183ff026 	beq	r3,zero,13928 <__mulsf3+0x17c>
   13968:	3907883a 	add	r3,r7,r4
   1396c:	00bfe004 	movi	r2,-128
   13970:	188e703a 	and	r7,r3,r2
   13974:	003fec06 	br	13928 <__mulsf3+0x17c>
   13978:	00800084 	movi	r2,2
   1397c:	20bfa41e 	bne	r4,r2,13810 <__mulsf3+0x64>
   13980:	01000074 	movhi	r4,1
   13984:	211c0a04 	addi	r4,r4,28712
   13988:	003fb306 	br	13858 <__mulsf3+0xac>

0001398c <__divsf3>:
   1398c:	defff304 	addi	sp,sp,-52
   13990:	dc400b15 	stw	r17,44(sp)
   13994:	dc400204 	addi	r17,sp,8
   13998:	dc000a15 	stw	r16,40(sp)
   1399c:	d9000015 	stw	r4,0(sp)
   139a0:	d9400115 	stw	r5,4(sp)
   139a4:	d809883a 	mov	r4,sp
   139a8:	880b883a 	mov	r5,r17
   139ac:	dc000604 	addi	r16,sp,24
   139b0:	dfc00c15 	stw	ra,48(sp)
   139b4:	0014aa00 	call	14aa0 <__unpack_f>
   139b8:	d9000104 	addi	r4,sp,4
   139bc:	800b883a 	mov	r5,r16
   139c0:	0014aa00 	call	14aa0 <__unpack_f>
   139c4:	d9000217 	ldw	r4,8(sp)
   139c8:	00800044 	movi	r2,1
   139cc:	01800104 	movi	r6,4
   139d0:	11000a2e 	bgeu	r2,r4,139fc <__divsf3+0x70>
   139d4:	d9400617 	ldw	r5,24(sp)
   139d8:	1140432e 	bgeu	r2,r5,13ae8 <__divsf3+0x15c>
   139dc:	d8800317 	ldw	r2,12(sp)
   139e0:	d8c00717 	ldw	r3,28(sp)
   139e4:	10c4f03a 	xor	r2,r2,r3
   139e8:	d8800315 	stw	r2,12(sp)
   139ec:	21800226 	beq	r4,r6,139f8 <__divsf3+0x6c>
   139f0:	00800084 	movi	r2,2
   139f4:	2080101e 	bne	r4,r2,13a38 <__divsf3+0xac>
   139f8:	29000726 	beq	r5,r4,13a18 <__divsf3+0x8c>
   139fc:	8809883a 	mov	r4,r17
   13a00:	00149400 	call	14940 <__pack_f>
   13a04:	dfc00c17 	ldw	ra,48(sp)
   13a08:	dc400b17 	ldw	r17,44(sp)
   13a0c:	dc000a17 	ldw	r16,40(sp)
   13a10:	dec00d04 	addi	sp,sp,52
   13a14:	f800283a 	ret
   13a18:	01000074 	movhi	r4,1
   13a1c:	211c0a04 	addi	r4,r4,28712
   13a20:	00149400 	call	14940 <__pack_f>
   13a24:	dfc00c17 	ldw	ra,48(sp)
   13a28:	dc400b17 	ldw	r17,44(sp)
   13a2c:	dc000a17 	ldw	r16,40(sp)
   13a30:	dec00d04 	addi	sp,sp,52
   13a34:	f800283a 	ret
   13a38:	29802d26 	beq	r5,r6,13af0 <__divsf3+0x164>
   13a3c:	28801a26 	beq	r5,r2,13aa8 <__divsf3+0x11c>
   13a40:	d8c00417 	ldw	r3,16(sp)
   13a44:	d8800817 	ldw	r2,32(sp)
   13a48:	d9000517 	ldw	r4,20(sp)
   13a4c:	d9800917 	ldw	r6,36(sp)
   13a50:	1885c83a 	sub	r2,r3,r2
   13a54:	d8800415 	stw	r2,16(sp)
   13a58:	2180032e 	bgeu	r4,r6,13a68 <__divsf3+0xdc>
   13a5c:	10bfffc4 	addi	r2,r2,-1
   13a60:	d8800415 	stw	r2,16(sp)
   13a64:	2109883a 	add	r4,r4,r4
   13a68:	01500034 	movhi	r5,16384
   13a6c:	0007883a 	mov	r3,zero
   13a70:	0005883a 	mov	r2,zero
   13a74:	01c007c4 	movi	r7,31
   13a78:	10800044 	addi	r2,r2,1
   13a7c:	21800236 	bltu	r4,r6,13a88 <__divsf3+0xfc>
   13a80:	1946b03a 	or	r3,r3,r5
   13a84:	2189c83a 	sub	r4,r4,r6
   13a88:	280ad07a 	srli	r5,r5,1
   13a8c:	2109883a 	add	r4,r4,r4
   13a90:	11fff91e 	bne	r2,r7,13a78 <__divsf3+0xec>
   13a94:	19401fcc 	andi	r5,r3,127
   13a98:	00801004 	movi	r2,64
   13a9c:	28800a26 	beq	r5,r2,13ac8 <__divsf3+0x13c>
   13aa0:	d8c00515 	stw	r3,20(sp)
   13aa4:	003fd506 	br	139fc <__divsf3+0x70>
   13aa8:	8809883a 	mov	r4,r17
   13aac:	d9800215 	stw	r6,8(sp)
   13ab0:	00149400 	call	14940 <__pack_f>
   13ab4:	dfc00c17 	ldw	ra,48(sp)
   13ab8:	dc400b17 	ldw	r17,44(sp)
   13abc:	dc000a17 	ldw	r16,40(sp)
   13ac0:	dec00d04 	addi	sp,sp,52
   13ac4:	f800283a 	ret
   13ac8:	1880200c 	andi	r2,r3,128
   13acc:	103ff41e 	bne	r2,zero,13aa0 <__divsf3+0x114>
   13ad0:	203ff326 	beq	r4,zero,13aa0 <__divsf3+0x114>
   13ad4:	1947883a 	add	r3,r3,r5
   13ad8:	00bfe004 	movi	r2,-128
   13adc:	1886703a 	and	r3,r3,r2
   13ae0:	d8c00515 	stw	r3,20(sp)
   13ae4:	003fc506 	br	139fc <__divsf3+0x70>
   13ae8:	8009883a 	mov	r4,r16
   13aec:	003fc406 	br	13a00 <__divsf3+0x74>
   13af0:	8809883a 	mov	r4,r17
   13af4:	d8000515 	stw	zero,20(sp)
   13af8:	d8000415 	stw	zero,16(sp)
   13afc:	003fc006 	br	13a00 <__divsf3+0x74>

00013b00 <__gesf2>:
   13b00:	defff304 	addi	sp,sp,-52
   13b04:	dc400b15 	stw	r17,44(sp)
   13b08:	dc400204 	addi	r17,sp,8
   13b0c:	dc000a15 	stw	r16,40(sp)
   13b10:	d9000015 	stw	r4,0(sp)
   13b14:	d9400115 	stw	r5,4(sp)
   13b18:	d809883a 	mov	r4,sp
   13b1c:	880b883a 	mov	r5,r17
   13b20:	dc000604 	addi	r16,sp,24
   13b24:	dfc00c15 	stw	ra,48(sp)
   13b28:	0014aa00 	call	14aa0 <__unpack_f>
   13b2c:	d9000104 	addi	r4,sp,4
   13b30:	800b883a 	mov	r5,r16
   13b34:	0014aa00 	call	14aa0 <__unpack_f>
   13b38:	d8800217 	ldw	r2,8(sp)
   13b3c:	00c00044 	movi	r3,1
   13b40:	01bfffc4 	movi	r6,-1
   13b44:	1880062e 	bgeu	r3,r2,13b60 <__gesf2+0x60>
   13b48:	d8800617 	ldw	r2,24(sp)
   13b4c:	8809883a 	mov	r4,r17
   13b50:	800b883a 	mov	r5,r16
   13b54:	1880022e 	bgeu	r3,r2,13b60 <__gesf2+0x60>
   13b58:	0014b680 	call	14b68 <__fpcmp_parts_f>
   13b5c:	100d883a 	mov	r6,r2
   13b60:	3005883a 	mov	r2,r6
   13b64:	dfc00c17 	ldw	ra,48(sp)
   13b68:	dc400b17 	ldw	r17,44(sp)
   13b6c:	dc000a17 	ldw	r16,40(sp)
   13b70:	dec00d04 	addi	sp,sp,52
   13b74:	f800283a 	ret

00013b78 <__fixsfsi>:
   13b78:	defffa04 	addi	sp,sp,-24
   13b7c:	d9000015 	stw	r4,0(sp)
   13b80:	d9400104 	addi	r5,sp,4
   13b84:	d809883a 	mov	r4,sp
   13b88:	dfc00515 	stw	ra,20(sp)
   13b8c:	0014aa00 	call	14aa0 <__unpack_f>
   13b90:	d8c00117 	ldw	r3,4(sp)
   13b94:	00800084 	movi	r2,2
   13b98:	1880041e 	bne	r3,r2,13bac <__fixsfsi+0x34>
   13b9c:	0005883a 	mov	r2,zero
   13ba0:	dfc00517 	ldw	ra,20(sp)
   13ba4:	dec00604 	addi	sp,sp,24
   13ba8:	f800283a 	ret
   13bac:	00800044 	movi	r2,1
   13bb0:	10fffa2e 	bgeu	r2,r3,13b9c <__fixsfsi+0x24>
   13bb4:	00800104 	movi	r2,4
   13bb8:	18800426 	beq	r3,r2,13bcc <__fixsfsi+0x54>
   13bbc:	d8800317 	ldw	r2,12(sp)
   13bc0:	103ff616 	blt	r2,zero,13b9c <__fixsfsi+0x24>
   13bc4:	00c00784 	movi	r3,30
   13bc8:	1880070e 	bge	r3,r2,13be8 <__fixsfsi+0x70>
   13bcc:	d8800217 	ldw	r2,8(sp)
   13bd0:	10000c1e 	bne	r2,zero,13c04 <__fixsfsi+0x8c>
   13bd4:	00a00034 	movhi	r2,32768
   13bd8:	10bfffc4 	addi	r2,r2,-1
   13bdc:	dfc00517 	ldw	ra,20(sp)
   13be0:	dec00604 	addi	sp,sp,24
   13be4:	f800283a 	ret
   13be8:	1885c83a 	sub	r2,r3,r2
   13bec:	d9000217 	ldw	r4,8(sp)
   13bf0:	d8c00417 	ldw	r3,16(sp)
   13bf4:	1884d83a 	srl	r2,r3,r2
   13bf8:	203fe926 	beq	r4,zero,13ba0 <__fixsfsi+0x28>
   13bfc:	0085c83a 	sub	r2,zero,r2
   13c00:	003fe706 	br	13ba0 <__fixsfsi+0x28>
   13c04:	00a00034 	movhi	r2,32768
   13c08:	003fe506 	br	13ba0 <__fixsfsi+0x28>

00013c0c <__floatunsisf>:
   13c0c:	defff904 	addi	sp,sp,-28
   13c10:	dc400515 	stw	r17,20(sp)
   13c14:	dc000415 	stw	r16,16(sp)
   13c18:	dfc00615 	stw	ra,24(sp)
   13c1c:	04400784 	movi	r17,30
   13c20:	2021883a 	mov	r16,r4
   13c24:	d8000115 	stw	zero,4(sp)
   13c28:	2000091e 	bne	r4,zero,13c50 <__floatunsisf+0x44>
   13c2c:	00800084 	movi	r2,2
   13c30:	d8800015 	stw	r2,0(sp)
   13c34:	d809883a 	mov	r4,sp
   13c38:	00149400 	call	14940 <__pack_f>
   13c3c:	dfc00617 	ldw	ra,24(sp)
   13c40:	dc400517 	ldw	r17,20(sp)
   13c44:	dc000417 	ldw	r16,16(sp)
   13c48:	dec00704 	addi	sp,sp,28
   13c4c:	f800283a 	ret
   13c50:	008000c4 	movi	r2,3
   13c54:	d9000315 	stw	r4,12(sp)
   13c58:	d8800015 	stw	r2,0(sp)
   13c5c:	dc400215 	stw	r17,8(sp)
   13c60:	00148c00 	call	148c0 <__clzsi2>
   13c64:	117fffc4 	addi	r5,r2,-1
   13c68:	0147c83a 	sub	r3,zero,r5
   13c6c:	00800044 	movi	r2,1
   13c70:	10c4983a 	sll	r2,r2,r3
   13c74:	80c6d83a 	srl	r3,r16,r3
   13c78:	8949c83a 	sub	r4,r17,r5
   13c7c:	10bfffc4 	addi	r2,r2,-1
   13c80:	8084703a 	and	r2,r16,r2
   13c84:	1004c03a 	cmpne	r2,r2,zero
   13c88:	1886b03a 	or	r3,r3,r2
   13c8c:	28000c16 	blt	r5,zero,13cc0 <__floatunsisf+0xb4>
   13c90:	8144983a 	sll	r2,r16,r5
   13c94:	8947c83a 	sub	r3,r17,r5
   13c98:	283fe626 	beq	r5,zero,13c34 <__floatunsisf+0x28>
   13c9c:	d809883a 	mov	r4,sp
   13ca0:	d8800315 	stw	r2,12(sp)
   13ca4:	d8c00215 	stw	r3,8(sp)
   13ca8:	00149400 	call	14940 <__pack_f>
   13cac:	dfc00617 	ldw	ra,24(sp)
   13cb0:	dc400517 	ldw	r17,20(sp)
   13cb4:	dc000417 	ldw	r16,16(sp)
   13cb8:	dec00704 	addi	sp,sp,28
   13cbc:	f800283a 	ret
   13cc0:	d8c00315 	stw	r3,12(sp)
   13cc4:	d9000215 	stw	r4,8(sp)
   13cc8:	003fda06 	br	13c34 <__floatunsisf+0x28>

00013ccc <_fpadd_parts>:
   13ccc:	defff804 	addi	sp,sp,-32
   13cd0:	dcc00315 	stw	r19,12(sp)
   13cd4:	2027883a 	mov	r19,r4
   13cd8:	21000017 	ldw	r4,0(r4)
   13cdc:	00c00044 	movi	r3,1
   13ce0:	dd400515 	stw	r21,20(sp)
   13ce4:	dd000415 	stw	r20,16(sp)
   13ce8:	ddc00715 	stw	r23,28(sp)
   13cec:	dd800615 	stw	r22,24(sp)
   13cf0:	dc800215 	stw	r18,8(sp)
   13cf4:	dc400115 	stw	r17,4(sp)
   13cf8:	dc000015 	stw	r16,0(sp)
   13cfc:	282b883a 	mov	r21,r5
   13d00:	3029883a 	mov	r20,r6
   13d04:	1900632e 	bgeu	r3,r4,13e94 <_fpadd_parts+0x1c8>
   13d08:	28800017 	ldw	r2,0(r5)
   13d0c:	1880812e 	bgeu	r3,r2,13f14 <_fpadd_parts+0x248>
   13d10:	00c00104 	movi	r3,4
   13d14:	20c0dc26 	beq	r4,r3,14088 <_fpadd_parts+0x3bc>
   13d18:	10c07e26 	beq	r2,r3,13f14 <_fpadd_parts+0x248>
   13d1c:	00c00084 	movi	r3,2
   13d20:	10c06726 	beq	r2,r3,13ec0 <_fpadd_parts+0x1f4>
   13d24:	20c07b26 	beq	r4,r3,13f14 <_fpadd_parts+0x248>
   13d28:	9dc00217 	ldw	r23,8(r19)
   13d2c:	28c00217 	ldw	r3,8(r5)
   13d30:	9c400317 	ldw	r17,12(r19)
   13d34:	2bc00317 	ldw	r15,12(r5)
   13d38:	b8cdc83a 	sub	r6,r23,r3
   13d3c:	9c800417 	ldw	r18,16(r19)
   13d40:	2c000417 	ldw	r16,16(r5)
   13d44:	3009883a 	mov	r4,r6
   13d48:	30009716 	blt	r6,zero,13fa8 <_fpadd_parts+0x2dc>
   13d4c:	00800fc4 	movi	r2,63
   13d50:	11806b16 	blt	r2,r6,13f00 <_fpadd_parts+0x234>
   13d54:	0100a40e 	bge	zero,r4,13fe8 <_fpadd_parts+0x31c>
   13d58:	35bff804 	addi	r22,r6,-32
   13d5c:	b000bc16 	blt	r22,zero,14050 <_fpadd_parts+0x384>
   13d60:	8596d83a 	srl	r11,r16,r22
   13d64:	0019883a 	mov	r12,zero
   13d68:	0013883a 	mov	r9,zero
   13d6c:	01000044 	movi	r4,1
   13d70:	0015883a 	mov	r10,zero
   13d74:	b000be16 	blt	r22,zero,14070 <_fpadd_parts+0x3a4>
   13d78:	2590983a 	sll	r8,r4,r22
   13d7c:	000f883a 	mov	r7,zero
   13d80:	00bfffc4 	movi	r2,-1
   13d84:	3889883a 	add	r4,r7,r2
   13d88:	408b883a 	add	r5,r8,r2
   13d8c:	21cd803a 	cmpltu	r6,r4,r7
   13d90:	314b883a 	add	r5,r6,r5
   13d94:	7904703a 	and	r2,r15,r4
   13d98:	8146703a 	and	r3,r16,r5
   13d9c:	10c4b03a 	or	r2,r2,r3
   13da0:	10000226 	beq	r2,zero,13dac <_fpadd_parts+0xe0>
   13da4:	02400044 	movi	r9,1
   13da8:	0015883a 	mov	r10,zero
   13dac:	5a5eb03a 	or	r15,r11,r9
   13db0:	62a0b03a 	or	r16,r12,r10
   13db4:	99400117 	ldw	r5,4(r19)
   13db8:	a8800117 	ldw	r2,4(r21)
   13dbc:	28806e26 	beq	r5,r2,13f78 <_fpadd_parts+0x2ac>
   13dc0:	28006626 	beq	r5,zero,13f5c <_fpadd_parts+0x290>
   13dc4:	7c45c83a 	sub	r2,r15,r17
   13dc8:	7889803a 	cmpltu	r4,r15,r2
   13dcc:	8487c83a 	sub	r3,r16,r18
   13dd0:	1909c83a 	sub	r4,r3,r4
   13dd4:	100d883a 	mov	r6,r2
   13dd8:	200f883a 	mov	r7,r4
   13ddc:	38007716 	blt	r7,zero,13fbc <_fpadd_parts+0x2f0>
   13de0:	a5c00215 	stw	r23,8(r20)
   13de4:	a1c00415 	stw	r7,16(r20)
   13de8:	a0000115 	stw	zero,4(r20)
   13dec:	a1800315 	stw	r6,12(r20)
   13df0:	a2000317 	ldw	r8,12(r20)
   13df4:	a2400417 	ldw	r9,16(r20)
   13df8:	00bfffc4 	movi	r2,-1
   13dfc:	408b883a 	add	r5,r8,r2
   13e00:	2a09803a 	cmpltu	r4,r5,r8
   13e04:	488d883a 	add	r6,r9,r2
   13e08:	01c40034 	movhi	r7,4096
   13e0c:	39ffffc4 	addi	r7,r7,-1
   13e10:	218d883a 	add	r6,r4,r6
   13e14:	39801736 	bltu	r7,r6,13e74 <_fpadd_parts+0x1a8>
   13e18:	31c06526 	beq	r6,r7,13fb0 <_fpadd_parts+0x2e4>
   13e1c:	a3000217 	ldw	r12,8(r20)
   13e20:	4209883a 	add	r4,r8,r8
   13e24:	00bfffc4 	movi	r2,-1
   13e28:	220f803a 	cmpltu	r7,r4,r8
   13e2c:	4a4b883a 	add	r5,r9,r9
   13e30:	394f883a 	add	r7,r7,r5
   13e34:	2095883a 	add	r10,r4,r2
   13e38:	3897883a 	add	r11,r7,r2
   13e3c:	510d803a 	cmpltu	r6,r10,r4
   13e40:	6099883a 	add	r12,r12,r2
   13e44:	32d7883a 	add	r11,r6,r11
   13e48:	00840034 	movhi	r2,4096
   13e4c:	10bfffc4 	addi	r2,r2,-1
   13e50:	2011883a 	mov	r8,r4
   13e54:	3813883a 	mov	r9,r7
   13e58:	a1000315 	stw	r4,12(r20)
   13e5c:	a1c00415 	stw	r7,16(r20)
   13e60:	a3000215 	stw	r12,8(r20)
   13e64:	12c00336 	bltu	r2,r11,13e74 <_fpadd_parts+0x1a8>
   13e68:	58bfed1e 	bne	r11,r2,13e20 <_fpadd_parts+0x154>
   13e6c:	00bfff84 	movi	r2,-2
   13e70:	12bfeb2e 	bgeu	r2,r10,13e20 <_fpadd_parts+0x154>
   13e74:	a2800417 	ldw	r10,16(r20)
   13e78:	008000c4 	movi	r2,3
   13e7c:	00c80034 	movhi	r3,8192
   13e80:	18ffffc4 	addi	r3,r3,-1
   13e84:	a2400317 	ldw	r9,12(r20)
   13e88:	a0800015 	stw	r2,0(r20)
   13e8c:	1a802336 	bltu	r3,r10,13f1c <_fpadd_parts+0x250>
   13e90:	a027883a 	mov	r19,r20
   13e94:	9805883a 	mov	r2,r19
   13e98:	ddc00717 	ldw	r23,28(sp)
   13e9c:	dd800617 	ldw	r22,24(sp)
   13ea0:	dd400517 	ldw	r21,20(sp)
   13ea4:	dd000417 	ldw	r20,16(sp)
   13ea8:	dcc00317 	ldw	r19,12(sp)
   13eac:	dc800217 	ldw	r18,8(sp)
   13eb0:	dc400117 	ldw	r17,4(sp)
   13eb4:	dc000017 	ldw	r16,0(sp)
   13eb8:	dec00804 	addi	sp,sp,32
   13ebc:	f800283a 	ret
   13ec0:	20fff41e 	bne	r4,r3,13e94 <_fpadd_parts+0x1c8>
   13ec4:	31000015 	stw	r4,0(r6)
   13ec8:	98800117 	ldw	r2,4(r19)
   13ecc:	30800115 	stw	r2,4(r6)
   13ed0:	98c00217 	ldw	r3,8(r19)
   13ed4:	30c00215 	stw	r3,8(r6)
   13ed8:	98800317 	ldw	r2,12(r19)
   13edc:	30800315 	stw	r2,12(r6)
   13ee0:	98c00417 	ldw	r3,16(r19)
   13ee4:	30c00415 	stw	r3,16(r6)
   13ee8:	98800117 	ldw	r2,4(r19)
   13eec:	28c00117 	ldw	r3,4(r5)
   13ef0:	3027883a 	mov	r19,r6
   13ef4:	10c4703a 	and	r2,r2,r3
   13ef8:	30800115 	stw	r2,4(r6)
   13efc:	003fe506 	br	13e94 <_fpadd_parts+0x1c8>
   13f00:	1dc02616 	blt	r3,r23,13f9c <_fpadd_parts+0x2d0>
   13f04:	0023883a 	mov	r17,zero
   13f08:	182f883a 	mov	r23,r3
   13f0c:	0025883a 	mov	r18,zero
   13f10:	003fa806 	br	13db4 <_fpadd_parts+0xe8>
   13f14:	a827883a 	mov	r19,r21
   13f18:	003fde06 	br	13e94 <_fpadd_parts+0x1c8>
   13f1c:	01800044 	movi	r6,1
   13f20:	500497fa 	slli	r2,r10,31
   13f24:	4808d07a 	srli	r4,r9,1
   13f28:	518ad83a 	srl	r5,r10,r6
   13f2c:	a2000217 	ldw	r8,8(r20)
   13f30:	1108b03a 	or	r4,r2,r4
   13f34:	0007883a 	mov	r3,zero
   13f38:	4984703a 	and	r2,r9,r6
   13f3c:	208cb03a 	or	r6,r4,r2
   13f40:	28ceb03a 	or	r7,r5,r3
   13f44:	42000044 	addi	r8,r8,1
   13f48:	a027883a 	mov	r19,r20
   13f4c:	a1c00415 	stw	r7,16(r20)
   13f50:	a2000215 	stw	r8,8(r20)
   13f54:	a1800315 	stw	r6,12(r20)
   13f58:	003fce06 	br	13e94 <_fpadd_parts+0x1c8>
   13f5c:	8bc5c83a 	sub	r2,r17,r15
   13f60:	8889803a 	cmpltu	r4,r17,r2
   13f64:	9407c83a 	sub	r3,r18,r16
   13f68:	1909c83a 	sub	r4,r3,r4
   13f6c:	100d883a 	mov	r6,r2
   13f70:	200f883a 	mov	r7,r4
   13f74:	003f9906 	br	13ddc <_fpadd_parts+0x110>
   13f78:	7c45883a 	add	r2,r15,r17
   13f7c:	13c9803a 	cmpltu	r4,r2,r15
   13f80:	8487883a 	add	r3,r16,r18
   13f84:	20c9883a 	add	r4,r4,r3
   13f88:	a1400115 	stw	r5,4(r20)
   13f8c:	a5c00215 	stw	r23,8(r20)
   13f90:	a0800315 	stw	r2,12(r20)
   13f94:	a1000415 	stw	r4,16(r20)
   13f98:	003fb606 	br	13e74 <_fpadd_parts+0x1a8>
   13f9c:	001f883a 	mov	r15,zero
   13fa0:	0021883a 	mov	r16,zero
   13fa4:	003f8306 	br	13db4 <_fpadd_parts+0xe8>
   13fa8:	018dc83a 	sub	r6,zero,r6
   13fac:	003f6706 	br	13d4c <_fpadd_parts+0x80>
   13fb0:	00bfff84 	movi	r2,-2
   13fb4:	117faf36 	bltu	r2,r5,13e74 <_fpadd_parts+0x1a8>
   13fb8:	003f9806 	br	13e1c <_fpadd_parts+0x150>
   13fbc:	0005883a 	mov	r2,zero
   13fc0:	1189c83a 	sub	r4,r2,r6
   13fc4:	1105803a 	cmpltu	r2,r2,r4
   13fc8:	01cbc83a 	sub	r5,zero,r7
   13fcc:	2885c83a 	sub	r2,r5,r2
   13fd0:	01800044 	movi	r6,1
   13fd4:	a1800115 	stw	r6,4(r20)
   13fd8:	a5c00215 	stw	r23,8(r20)
   13fdc:	a1000315 	stw	r4,12(r20)
   13fe0:	a0800415 	stw	r2,16(r20)
   13fe4:	003f8206 	br	13df0 <_fpadd_parts+0x124>
   13fe8:	203f7226 	beq	r4,zero,13db4 <_fpadd_parts+0xe8>
   13fec:	35bff804 	addi	r22,r6,-32
   13ff0:	b9af883a 	add	r23,r23,r6
   13ff4:	b0003116 	blt	r22,zero,140bc <_fpadd_parts+0x3f0>
   13ff8:	959ad83a 	srl	r13,r18,r22
   13ffc:	001d883a 	mov	r14,zero
   14000:	000f883a 	mov	r7,zero
   14004:	01000044 	movi	r4,1
   14008:	0011883a 	mov	r8,zero
   1400c:	b0002516 	blt	r22,zero,140a4 <_fpadd_parts+0x3d8>
   14010:	2594983a 	sll	r10,r4,r22
   14014:	0013883a 	mov	r9,zero
   14018:	00bfffc4 	movi	r2,-1
   1401c:	4889883a 	add	r4,r9,r2
   14020:	508b883a 	add	r5,r10,r2
   14024:	224d803a 	cmpltu	r6,r4,r9
   14028:	314b883a 	add	r5,r6,r5
   1402c:	8904703a 	and	r2,r17,r4
   14030:	9146703a 	and	r3,r18,r5
   14034:	10c4b03a 	or	r2,r2,r3
   14038:	10000226 	beq	r2,zero,14044 <_fpadd_parts+0x378>
   1403c:	01c00044 	movi	r7,1
   14040:	0011883a 	mov	r8,zero
   14044:	69e2b03a 	or	r17,r13,r7
   14048:	7224b03a 	or	r18,r14,r8
   1404c:	003f5906 	br	13db4 <_fpadd_parts+0xe8>
   14050:	8407883a 	add	r3,r16,r16
   14054:	008007c4 	movi	r2,31
   14058:	1185c83a 	sub	r2,r2,r6
   1405c:	1886983a 	sll	r3,r3,r2
   14060:	7996d83a 	srl	r11,r15,r6
   14064:	8198d83a 	srl	r12,r16,r6
   14068:	1ad6b03a 	or	r11,r3,r11
   1406c:	003f3e06 	br	13d68 <_fpadd_parts+0x9c>
   14070:	2006d07a 	srli	r3,r4,1
   14074:	008007c4 	movi	r2,31
   14078:	1185c83a 	sub	r2,r2,r6
   1407c:	1890d83a 	srl	r8,r3,r2
   14080:	218e983a 	sll	r7,r4,r6
   14084:	003f3e06 	br	13d80 <_fpadd_parts+0xb4>
   14088:	113f821e 	bne	r2,r4,13e94 <_fpadd_parts+0x1c8>
   1408c:	28c00117 	ldw	r3,4(r5)
   14090:	98800117 	ldw	r2,4(r19)
   14094:	10ff7f26 	beq	r2,r3,13e94 <_fpadd_parts+0x1c8>
   14098:	04c00074 	movhi	r19,1
   1409c:	9cdc0e04 	addi	r19,r19,28728
   140a0:	003f7c06 	br	13e94 <_fpadd_parts+0x1c8>
   140a4:	2006d07a 	srli	r3,r4,1
   140a8:	008007c4 	movi	r2,31
   140ac:	1185c83a 	sub	r2,r2,r6
   140b0:	1894d83a 	srl	r10,r3,r2
   140b4:	2192983a 	sll	r9,r4,r6
   140b8:	003fd706 	br	14018 <_fpadd_parts+0x34c>
   140bc:	9487883a 	add	r3,r18,r18
   140c0:	008007c4 	movi	r2,31
   140c4:	1185c83a 	sub	r2,r2,r6
   140c8:	1886983a 	sll	r3,r3,r2
   140cc:	899ad83a 	srl	r13,r17,r6
   140d0:	919cd83a 	srl	r14,r18,r6
   140d4:	1b5ab03a 	or	r13,r3,r13
   140d8:	003fc906 	br	14000 <_fpadd_parts+0x334>

000140dc <__subdf3>:
   140dc:	deffea04 	addi	sp,sp,-88
   140e0:	dcc01415 	stw	r19,80(sp)
   140e4:	dcc00404 	addi	r19,sp,16
   140e8:	2011883a 	mov	r8,r4
   140ec:	2813883a 	mov	r9,r5
   140f0:	dc401315 	stw	r17,76(sp)
   140f4:	d809883a 	mov	r4,sp
   140f8:	980b883a 	mov	r5,r19
   140fc:	dc400904 	addi	r17,sp,36
   14100:	dfc01515 	stw	ra,84(sp)
   14104:	da400115 	stw	r9,4(sp)
   14108:	d9c00315 	stw	r7,12(sp)
   1410c:	da000015 	stw	r8,0(sp)
   14110:	d9800215 	stw	r6,8(sp)
   14114:	0014f240 	call	14f24 <__unpack_d>
   14118:	d9000204 	addi	r4,sp,8
   1411c:	880b883a 	mov	r5,r17
   14120:	0014f240 	call	14f24 <__unpack_d>
   14124:	d8800a17 	ldw	r2,40(sp)
   14128:	880b883a 	mov	r5,r17
   1412c:	9809883a 	mov	r4,r19
   14130:	d9800e04 	addi	r6,sp,56
   14134:	1080005c 	xori	r2,r2,1
   14138:	d8800a15 	stw	r2,40(sp)
   1413c:	0013ccc0 	call	13ccc <_fpadd_parts>
   14140:	1009883a 	mov	r4,r2
   14144:	0014c100 	call	14c10 <__pack_d>
   14148:	dfc01517 	ldw	ra,84(sp)
   1414c:	dcc01417 	ldw	r19,80(sp)
   14150:	dc401317 	ldw	r17,76(sp)
   14154:	dec01604 	addi	sp,sp,88
   14158:	f800283a 	ret

0001415c <__adddf3>:
   1415c:	deffea04 	addi	sp,sp,-88
   14160:	dcc01415 	stw	r19,80(sp)
   14164:	dcc00404 	addi	r19,sp,16
   14168:	2011883a 	mov	r8,r4
   1416c:	2813883a 	mov	r9,r5
   14170:	dc401315 	stw	r17,76(sp)
   14174:	d809883a 	mov	r4,sp
   14178:	980b883a 	mov	r5,r19
   1417c:	dc400904 	addi	r17,sp,36
   14180:	dfc01515 	stw	ra,84(sp)
   14184:	da400115 	stw	r9,4(sp)
   14188:	d9c00315 	stw	r7,12(sp)
   1418c:	da000015 	stw	r8,0(sp)
   14190:	d9800215 	stw	r6,8(sp)
   14194:	0014f240 	call	14f24 <__unpack_d>
   14198:	d9000204 	addi	r4,sp,8
   1419c:	880b883a 	mov	r5,r17
   141a0:	0014f240 	call	14f24 <__unpack_d>
   141a4:	d9800e04 	addi	r6,sp,56
   141a8:	9809883a 	mov	r4,r19
   141ac:	880b883a 	mov	r5,r17
   141b0:	0013ccc0 	call	13ccc <_fpadd_parts>
   141b4:	1009883a 	mov	r4,r2
   141b8:	0014c100 	call	14c10 <__pack_d>
   141bc:	dfc01517 	ldw	ra,84(sp)
   141c0:	dcc01417 	ldw	r19,80(sp)
   141c4:	dc401317 	ldw	r17,76(sp)
   141c8:	dec01604 	addi	sp,sp,88
   141cc:	f800283a 	ret

000141d0 <__muldf3>:
   141d0:	deffe004 	addi	sp,sp,-128
   141d4:	dc401815 	stw	r17,96(sp)
   141d8:	dc400404 	addi	r17,sp,16
   141dc:	2011883a 	mov	r8,r4
   141e0:	2813883a 	mov	r9,r5
   141e4:	dc001715 	stw	r16,92(sp)
   141e8:	d809883a 	mov	r4,sp
   141ec:	880b883a 	mov	r5,r17
   141f0:	dc000904 	addi	r16,sp,36
   141f4:	dfc01f15 	stw	ra,124(sp)
   141f8:	da400115 	stw	r9,4(sp)
   141fc:	d9c00315 	stw	r7,12(sp)
   14200:	da000015 	stw	r8,0(sp)
   14204:	d9800215 	stw	r6,8(sp)
   14208:	ddc01e15 	stw	r23,120(sp)
   1420c:	dd801d15 	stw	r22,116(sp)
   14210:	dd401c15 	stw	r21,112(sp)
   14214:	dd001b15 	stw	r20,108(sp)
   14218:	dcc01a15 	stw	r19,104(sp)
   1421c:	dc801915 	stw	r18,100(sp)
   14220:	0014f240 	call	14f24 <__unpack_d>
   14224:	d9000204 	addi	r4,sp,8
   14228:	800b883a 	mov	r5,r16
   1422c:	0014f240 	call	14f24 <__unpack_d>
   14230:	d9000417 	ldw	r4,16(sp)
   14234:	00800044 	movi	r2,1
   14238:	1100102e 	bgeu	r2,r4,1427c <__muldf3+0xac>
   1423c:	d8c00917 	ldw	r3,36(sp)
   14240:	10c0062e 	bgeu	r2,r3,1425c <__muldf3+0x8c>
   14244:	00800104 	movi	r2,4
   14248:	20800a26 	beq	r4,r2,14274 <__muldf3+0xa4>
   1424c:	1880cc26 	beq	r3,r2,14580 <__muldf3+0x3b0>
   14250:	00800084 	movi	r2,2
   14254:	20800926 	beq	r4,r2,1427c <__muldf3+0xac>
   14258:	1880191e 	bne	r3,r2,142c0 <__muldf3+0xf0>
   1425c:	d8c00a17 	ldw	r3,40(sp)
   14260:	d8800517 	ldw	r2,20(sp)
   14264:	8009883a 	mov	r4,r16
   14268:	10c4c03a 	cmpne	r2,r2,r3
   1426c:	d8800a15 	stw	r2,40(sp)
   14270:	00000706 	br	14290 <__muldf3+0xc0>
   14274:	00800084 	movi	r2,2
   14278:	1880c326 	beq	r3,r2,14588 <__muldf3+0x3b8>
   1427c:	d8800517 	ldw	r2,20(sp)
   14280:	d8c00a17 	ldw	r3,40(sp)
   14284:	8809883a 	mov	r4,r17
   14288:	10c4c03a 	cmpne	r2,r2,r3
   1428c:	d8800515 	stw	r2,20(sp)
   14290:	0014c100 	call	14c10 <__pack_d>
   14294:	dfc01f17 	ldw	ra,124(sp)
   14298:	ddc01e17 	ldw	r23,120(sp)
   1429c:	dd801d17 	ldw	r22,116(sp)
   142a0:	dd401c17 	ldw	r21,112(sp)
   142a4:	dd001b17 	ldw	r20,108(sp)
   142a8:	dcc01a17 	ldw	r19,104(sp)
   142ac:	dc801917 	ldw	r18,100(sp)
   142b0:	dc401817 	ldw	r17,96(sp)
   142b4:	dc001717 	ldw	r16,92(sp)
   142b8:	dec02004 	addi	sp,sp,128
   142bc:	f800283a 	ret
   142c0:	dd800717 	ldw	r22,28(sp)
   142c4:	dc800c17 	ldw	r18,48(sp)
   142c8:	002b883a 	mov	r21,zero
   142cc:	0023883a 	mov	r17,zero
   142d0:	a80b883a 	mov	r5,r21
   142d4:	b00d883a 	mov	r6,r22
   142d8:	880f883a 	mov	r7,r17
   142dc:	ddc00817 	ldw	r23,32(sp)
   142e0:	dcc00d17 	ldw	r19,52(sp)
   142e4:	9009883a 	mov	r4,r18
   142e8:	001479c0 	call	1479c <__muldi3>
   142ec:	001b883a 	mov	r13,zero
   142f0:	680f883a 	mov	r7,r13
   142f4:	b009883a 	mov	r4,r22
   142f8:	000b883a 	mov	r5,zero
   142fc:	980d883a 	mov	r6,r19
   14300:	b82d883a 	mov	r22,r23
   14304:	002f883a 	mov	r23,zero
   14308:	db401615 	stw	r13,88(sp)
   1430c:	d8801315 	stw	r2,76(sp)
   14310:	d8c01415 	stw	r3,80(sp)
   14314:	dcc01515 	stw	r19,84(sp)
   14318:	001479c0 	call	1479c <__muldi3>
   1431c:	b00d883a 	mov	r6,r22
   14320:	000b883a 	mov	r5,zero
   14324:	9009883a 	mov	r4,r18
   14328:	b80f883a 	mov	r7,r23
   1432c:	1021883a 	mov	r16,r2
   14330:	1823883a 	mov	r17,r3
   14334:	001479c0 	call	1479c <__muldi3>
   14338:	8085883a 	add	r2,r16,r2
   1433c:	140d803a 	cmpltu	r6,r2,r16
   14340:	88c7883a 	add	r3,r17,r3
   14344:	30cd883a 	add	r6,r6,r3
   14348:	1029883a 	mov	r20,r2
   1434c:	302b883a 	mov	r21,r6
   14350:	da801317 	ldw	r10,76(sp)
   14354:	dac01417 	ldw	r11,80(sp)
   14358:	db001517 	ldw	r12,84(sp)
   1435c:	db401617 	ldw	r13,88(sp)
   14360:	3440612e 	bgeu	r6,r17,144e8 <__muldf3+0x318>
   14364:	0009883a 	mov	r4,zero
   14368:	5105883a 	add	r2,r10,r4
   1436c:	128d803a 	cmpltu	r6,r2,r10
   14370:	5d07883a 	add	r3,r11,r20
   14374:	30cd883a 	add	r6,r6,r3
   14378:	0021883a 	mov	r16,zero
   1437c:	04400044 	movi	r17,1
   14380:	1025883a 	mov	r18,r2
   14384:	3027883a 	mov	r19,r6
   14388:	32c06236 	bltu	r6,r11,14514 <__muldf3+0x344>
   1438c:	59807a26 	beq	r11,r6,14578 <__muldf3+0x3a8>
   14390:	680b883a 	mov	r5,r13
   14394:	b80f883a 	mov	r7,r23
   14398:	6009883a 	mov	r4,r12
   1439c:	b00d883a 	mov	r6,r22
   143a0:	001479c0 	call	1479c <__muldi3>
   143a4:	1009883a 	mov	r4,r2
   143a8:	000f883a 	mov	r7,zero
   143ac:	1545883a 	add	r2,r2,r21
   143b0:	1111803a 	cmpltu	r8,r2,r4
   143b4:	19c7883a 	add	r3,r3,r7
   143b8:	40c7883a 	add	r3,r8,r3
   143bc:	88cb883a 	add	r5,r17,r3
   143c0:	d8c00617 	ldw	r3,24(sp)
   143c4:	8089883a 	add	r4,r16,r2
   143c8:	d8800b17 	ldw	r2,44(sp)
   143cc:	18c00104 	addi	r3,r3,4
   143d0:	240d803a 	cmpltu	r6,r4,r16
   143d4:	10c7883a 	add	r3,r2,r3
   143d8:	2013883a 	mov	r9,r4
   143dc:	d8800a17 	ldw	r2,40(sp)
   143e0:	d9000517 	ldw	r4,20(sp)
   143e4:	314d883a 	add	r6,r6,r5
   143e8:	3015883a 	mov	r10,r6
   143ec:	2088c03a 	cmpne	r4,r4,r2
   143f0:	00880034 	movhi	r2,8192
   143f4:	10bfffc4 	addi	r2,r2,-1
   143f8:	d9000f15 	stw	r4,60(sp)
   143fc:	d8c01015 	stw	r3,64(sp)
   14400:	1180162e 	bgeu	r2,r6,1445c <__muldf3+0x28c>
   14404:	1811883a 	mov	r8,r3
   14408:	101f883a 	mov	r15,r2
   1440c:	980497fa 	slli	r2,r19,31
   14410:	9016d07a 	srli	r11,r18,1
   14414:	500697fa 	slli	r3,r10,31
   14418:	480cd07a 	srli	r6,r9,1
   1441c:	500ed07a 	srli	r7,r10,1
   14420:	12d6b03a 	or	r11,r2,r11
   14424:	00800044 	movi	r2,1
   14428:	198cb03a 	or	r6,r3,r6
   1442c:	4888703a 	and	r4,r9,r2
   14430:	9818d07a 	srli	r12,r19,1
   14434:	001b883a 	mov	r13,zero
   14438:	03a00034 	movhi	r14,32768
   1443c:	3013883a 	mov	r9,r6
   14440:	3815883a 	mov	r10,r7
   14444:	4091883a 	add	r8,r8,r2
   14448:	20000226 	beq	r4,zero,14454 <__muldf3+0x284>
   1444c:	5b64b03a 	or	r18,r11,r13
   14450:	63a6b03a 	or	r19,r12,r14
   14454:	7abfed36 	bltu	r15,r10,1440c <__muldf3+0x23c>
   14458:	da001015 	stw	r8,64(sp)
   1445c:	00840034 	movhi	r2,4096
   14460:	10bfffc4 	addi	r2,r2,-1
   14464:	12801436 	bltu	r2,r10,144b8 <__muldf3+0x2e8>
   14468:	da001017 	ldw	r8,64(sp)
   1446c:	101f883a 	mov	r15,r2
   14470:	4a45883a 	add	r2,r9,r9
   14474:	124d803a 	cmpltu	r6,r2,r9
   14478:	5287883a 	add	r3,r10,r10
   1447c:	9497883a 	add	r11,r18,r18
   14480:	5c8f803a 	cmpltu	r7,r11,r18
   14484:	9cd9883a 	add	r12,r19,r19
   14488:	01000044 	movi	r4,1
   1448c:	30cd883a 	add	r6,r6,r3
   14490:	3b0f883a 	add	r7,r7,r12
   14494:	423fffc4 	addi	r8,r8,-1
   14498:	1013883a 	mov	r9,r2
   1449c:	3015883a 	mov	r10,r6
   144a0:	111ab03a 	or	r13,r2,r4
   144a4:	98003016 	blt	r19,zero,14568 <__muldf3+0x398>
   144a8:	5825883a 	mov	r18,r11
   144ac:	3827883a 	mov	r19,r7
   144b0:	7abfef2e 	bgeu	r15,r10,14470 <__muldf3+0x2a0>
   144b4:	da001015 	stw	r8,64(sp)
   144b8:	00803fc4 	movi	r2,255
   144bc:	488e703a 	and	r7,r9,r2
   144c0:	00802004 	movi	r2,128
   144c4:	0007883a 	mov	r3,zero
   144c8:	0011883a 	mov	r8,zero
   144cc:	38801826 	beq	r7,r2,14530 <__muldf3+0x360>
   144d0:	008000c4 	movi	r2,3
   144d4:	d9000e04 	addi	r4,sp,56
   144d8:	da801215 	stw	r10,72(sp)
   144dc:	d8800e15 	stw	r2,56(sp)
   144e0:	da401115 	stw	r9,68(sp)
   144e4:	003f6a06 	br	14290 <__muldf3+0xc0>
   144e8:	89802126 	beq	r17,r6,14570 <__muldf3+0x3a0>
   144ec:	0009883a 	mov	r4,zero
   144f0:	5105883a 	add	r2,r10,r4
   144f4:	128d803a 	cmpltu	r6,r2,r10
   144f8:	5d07883a 	add	r3,r11,r20
   144fc:	30cd883a 	add	r6,r6,r3
   14500:	0021883a 	mov	r16,zero
   14504:	0023883a 	mov	r17,zero
   14508:	1025883a 	mov	r18,r2
   1450c:	3027883a 	mov	r19,r6
   14510:	32ff9e2e 	bgeu	r6,r11,1438c <__muldf3+0x1bc>
   14514:	00800044 	movi	r2,1
   14518:	8089883a 	add	r4,r16,r2
   1451c:	240d803a 	cmpltu	r6,r4,r16
   14520:	344d883a 	add	r6,r6,r17
   14524:	2021883a 	mov	r16,r4
   14528:	3023883a 	mov	r17,r6
   1452c:	003f9806 	br	14390 <__muldf3+0x1c0>
   14530:	403fe71e 	bne	r8,zero,144d0 <__muldf3+0x300>
   14534:	01004004 	movi	r4,256
   14538:	4904703a 	and	r2,r9,r4
   1453c:	10c4b03a 	or	r2,r2,r3
   14540:	103fe31e 	bne	r2,zero,144d0 <__muldf3+0x300>
   14544:	94c4b03a 	or	r2,r18,r19
   14548:	103fe126 	beq	r2,zero,144d0 <__muldf3+0x300>
   1454c:	49c5883a 	add	r2,r9,r7
   14550:	1251803a 	cmpltu	r8,r2,r9
   14554:	4291883a 	add	r8,r8,r10
   14558:	013fc004 	movi	r4,-256
   1455c:	1112703a 	and	r9,r2,r4
   14560:	4015883a 	mov	r10,r8
   14564:	003fda06 	br	144d0 <__muldf3+0x300>
   14568:	6813883a 	mov	r9,r13
   1456c:	003fce06 	br	144a8 <__muldf3+0x2d8>
   14570:	143f7c36 	bltu	r2,r16,14364 <__muldf3+0x194>
   14574:	003fdd06 	br	144ec <__muldf3+0x31c>
   14578:	12bf852e 	bgeu	r2,r10,14390 <__muldf3+0x1c0>
   1457c:	003fe506 	br	14514 <__muldf3+0x344>
   14580:	00800084 	movi	r2,2
   14584:	20bf351e 	bne	r4,r2,1425c <__muldf3+0x8c>
   14588:	01000074 	movhi	r4,1
   1458c:	211c0e04 	addi	r4,r4,28728
   14590:	003f3f06 	br	14290 <__muldf3+0xc0>

00014594 <__floatsidf>:
   14594:	2006d7fa 	srli	r3,r4,31
   14598:	defff604 	addi	sp,sp,-40
   1459c:	008000c4 	movi	r2,3
   145a0:	dfc00915 	stw	ra,36(sp)
   145a4:	dcc00815 	stw	r19,32(sp)
   145a8:	dc800715 	stw	r18,28(sp)
   145ac:	dc400615 	stw	r17,24(sp)
   145b0:	dc000515 	stw	r16,20(sp)
   145b4:	d8800015 	stw	r2,0(sp)
   145b8:	d8c00115 	stw	r3,4(sp)
   145bc:	20000f1e 	bne	r4,zero,145fc <__floatsidf+0x68>
   145c0:	00800084 	movi	r2,2
   145c4:	d8800015 	stw	r2,0(sp)
   145c8:	d809883a 	mov	r4,sp
   145cc:	0014c100 	call	14c10 <__pack_d>
   145d0:	1009883a 	mov	r4,r2
   145d4:	180b883a 	mov	r5,r3
   145d8:	2005883a 	mov	r2,r4
   145dc:	2807883a 	mov	r3,r5
   145e0:	dfc00917 	ldw	ra,36(sp)
   145e4:	dcc00817 	ldw	r19,32(sp)
   145e8:	dc800717 	ldw	r18,28(sp)
   145ec:	dc400617 	ldw	r17,24(sp)
   145f0:	dc000517 	ldw	r16,20(sp)
   145f4:	dec00a04 	addi	sp,sp,40
   145f8:	f800283a 	ret
   145fc:	00800f04 	movi	r2,60
   14600:	1807003a 	cmpeq	r3,r3,zero
   14604:	d8800215 	stw	r2,8(sp)
   14608:	18001126 	beq	r3,zero,14650 <__floatsidf+0xbc>
   1460c:	0027883a 	mov	r19,zero
   14610:	2025883a 	mov	r18,r4
   14614:	d9000315 	stw	r4,12(sp)
   14618:	dcc00415 	stw	r19,16(sp)
   1461c:	00148c00 	call	148c0 <__clzsi2>
   14620:	11000744 	addi	r4,r2,29
   14624:	013fe80e 	bge	zero,r4,145c8 <__floatsidf+0x34>
   14628:	10bfff44 	addi	r2,r2,-3
   1462c:	10000c16 	blt	r2,zero,14660 <__floatsidf+0xcc>
   14630:	90a2983a 	sll	r17,r18,r2
   14634:	0021883a 	mov	r16,zero
   14638:	d8800217 	ldw	r2,8(sp)
   1463c:	dc400415 	stw	r17,16(sp)
   14640:	dc000315 	stw	r16,12(sp)
   14644:	1105c83a 	sub	r2,r2,r4
   14648:	d8800215 	stw	r2,8(sp)
   1464c:	003fde06 	br	145c8 <__floatsidf+0x34>
   14650:	00a00034 	movhi	r2,32768
   14654:	20800a26 	beq	r4,r2,14680 <__floatsidf+0xec>
   14658:	0109c83a 	sub	r4,zero,r4
   1465c:	003feb06 	br	1460c <__floatsidf+0x78>
   14660:	9006d07a 	srli	r3,r18,1
   14664:	008007c4 	movi	r2,31
   14668:	1105c83a 	sub	r2,r2,r4
   1466c:	1886d83a 	srl	r3,r3,r2
   14670:	9922983a 	sll	r17,r19,r4
   14674:	9120983a 	sll	r16,r18,r4
   14678:	1c62b03a 	or	r17,r3,r17
   1467c:	003fee06 	br	14638 <__floatsidf+0xa4>
   14680:	0009883a 	mov	r4,zero
   14684:	01707834 	movhi	r5,49632
   14688:	003fd306 	br	145d8 <__floatsidf+0x44>

0001468c <__fixdfsi>:
   1468c:	defff804 	addi	sp,sp,-32
   14690:	2005883a 	mov	r2,r4
   14694:	2807883a 	mov	r3,r5
   14698:	d809883a 	mov	r4,sp
   1469c:	d9400204 	addi	r5,sp,8
   146a0:	d8c00115 	stw	r3,4(sp)
   146a4:	d8800015 	stw	r2,0(sp)
   146a8:	dfc00715 	stw	ra,28(sp)
   146ac:	0014f240 	call	14f24 <__unpack_d>
   146b0:	d8c00217 	ldw	r3,8(sp)
   146b4:	00800084 	movi	r2,2
   146b8:	1880051e 	bne	r3,r2,146d0 <__fixdfsi+0x44>
   146bc:	0007883a 	mov	r3,zero
   146c0:	1805883a 	mov	r2,r3
   146c4:	dfc00717 	ldw	ra,28(sp)
   146c8:	dec00804 	addi	sp,sp,32
   146cc:	f800283a 	ret
   146d0:	00800044 	movi	r2,1
   146d4:	10fff92e 	bgeu	r2,r3,146bc <__fixdfsi+0x30>
   146d8:	00800104 	movi	r2,4
   146dc:	18800426 	beq	r3,r2,146f0 <__fixdfsi+0x64>
   146e0:	d8c00417 	ldw	r3,16(sp)
   146e4:	183ff516 	blt	r3,zero,146bc <__fixdfsi+0x30>
   146e8:	00800784 	movi	r2,30
   146ec:	10c0080e 	bge	r2,r3,14710 <__fixdfsi+0x84>
   146f0:	d8800317 	ldw	r2,12(sp)
   146f4:	1000121e 	bne	r2,zero,14740 <__fixdfsi+0xb4>
   146f8:	00e00034 	movhi	r3,32768
   146fc:	18ffffc4 	addi	r3,r3,-1
   14700:	1805883a 	mov	r2,r3
   14704:	dfc00717 	ldw	ra,28(sp)
   14708:	dec00804 	addi	sp,sp,32
   1470c:	f800283a 	ret
   14710:	00800f04 	movi	r2,60
   14714:	10d1c83a 	sub	r8,r2,r3
   14718:	40bff804 	addi	r2,r8,-32
   1471c:	d9800517 	ldw	r6,20(sp)
   14720:	d9c00617 	ldw	r7,24(sp)
   14724:	10000816 	blt	r2,zero,14748 <__fixdfsi+0xbc>
   14728:	3888d83a 	srl	r4,r7,r2
   1472c:	d8800317 	ldw	r2,12(sp)
   14730:	2007883a 	mov	r3,r4
   14734:	103fe226 	beq	r2,zero,146c0 <__fixdfsi+0x34>
   14738:	0107c83a 	sub	r3,zero,r4
   1473c:	003fe006 	br	146c0 <__fixdfsi+0x34>
   14740:	00e00034 	movhi	r3,32768
   14744:	003fde06 	br	146c0 <__fixdfsi+0x34>
   14748:	39c7883a 	add	r3,r7,r7
   1474c:	008007c4 	movi	r2,31
   14750:	1205c83a 	sub	r2,r2,r8
   14754:	1886983a 	sll	r3,r3,r2
   14758:	3208d83a 	srl	r4,r6,r8
   1475c:	1908b03a 	or	r4,r3,r4
   14760:	003ff206 	br	1472c <__fixdfsi+0xa0>

00014764 <__mulsi3>:
   14764:	20000a26 	beq	r4,zero,14790 <__mulsi3+0x2c>
   14768:	0007883a 	mov	r3,zero
   1476c:	2080004c 	andi	r2,r4,1
   14770:	1005003a 	cmpeq	r2,r2,zero
   14774:	2008d07a 	srli	r4,r4,1
   14778:	1000011e 	bne	r2,zero,14780 <__mulsi3+0x1c>
   1477c:	1947883a 	add	r3,r3,r5
   14780:	294b883a 	add	r5,r5,r5
   14784:	203ff91e 	bne	r4,zero,1476c <__mulsi3+0x8>
   14788:	1805883a 	mov	r2,r3
   1478c:	f800283a 	ret
   14790:	0007883a 	mov	r3,zero
   14794:	1805883a 	mov	r2,r3
   14798:	f800283a 	ret

0001479c <__muldi3>:
   1479c:	defff204 	addi	sp,sp,-56
   147a0:	df000c15 	stw	fp,48(sp)
   147a4:	3038d43a 	srli	fp,r6,16
   147a8:	dd000815 	stw	r20,32(sp)
   147ac:	dc400515 	stw	r17,20(sp)
   147b0:	2028d43a 	srli	r20,r4,16
   147b4:	247fffcc 	andi	r17,r4,65535
   147b8:	dc000415 	stw	r16,16(sp)
   147bc:	343fffcc 	andi	r16,r6,65535
   147c0:	dcc00715 	stw	r19,28(sp)
   147c4:	d9000015 	stw	r4,0(sp)
   147c8:	2827883a 	mov	r19,r5
   147cc:	8809883a 	mov	r4,r17
   147d0:	d9400115 	stw	r5,4(sp)
   147d4:	800b883a 	mov	r5,r16
   147d8:	d9800215 	stw	r6,8(sp)
   147dc:	dfc00d15 	stw	ra,52(sp)
   147e0:	d9c00315 	stw	r7,12(sp)
   147e4:	dd800a15 	stw	r22,40(sp)
   147e8:	dd400915 	stw	r21,36(sp)
   147ec:	302d883a 	mov	r22,r6
   147f0:	ddc00b15 	stw	r23,44(sp)
   147f4:	dc800615 	stw	r18,24(sp)
   147f8:	00147640 	call	14764 <__mulsi3>
   147fc:	8809883a 	mov	r4,r17
   14800:	e00b883a 	mov	r5,fp
   14804:	102b883a 	mov	r21,r2
   14808:	00147640 	call	14764 <__mulsi3>
   1480c:	800b883a 	mov	r5,r16
   14810:	a009883a 	mov	r4,r20
   14814:	1023883a 	mov	r17,r2
   14818:	00147640 	call	14764 <__mulsi3>
   1481c:	a009883a 	mov	r4,r20
   14820:	e00b883a 	mov	r5,fp
   14824:	1021883a 	mov	r16,r2
   14828:	00147640 	call	14764 <__mulsi3>
   1482c:	a8ffffcc 	andi	r3,r21,65535
   14830:	a82ad43a 	srli	r21,r21,16
   14834:	8c23883a 	add	r17,r17,r16
   14838:	1011883a 	mov	r8,r2
   1483c:	ac6b883a 	add	r21,r21,r17
   14840:	a804943a 	slli	r2,r21,16
   14844:	b009883a 	mov	r4,r22
   14848:	980b883a 	mov	r5,r19
   1484c:	10c7883a 	add	r3,r2,r3
   14850:	a812d43a 	srli	r9,r21,16
   14854:	180d883a 	mov	r6,r3
   14858:	ac00022e 	bgeu	r21,r16,14864 <__muldi3+0xc8>
   1485c:	00800074 	movhi	r2,1
   14860:	4091883a 	add	r8,r8,r2
   14864:	4267883a 	add	r19,r8,r9
   14868:	302d883a 	mov	r22,r6
   1486c:	00147640 	call	14764 <__mulsi3>
   14870:	d9400317 	ldw	r5,12(sp)
   14874:	d9000017 	ldw	r4,0(sp)
   14878:	1023883a 	mov	r17,r2
   1487c:	00147640 	call	14764 <__mulsi3>
   14880:	14cb883a 	add	r5,r2,r19
   14884:	894b883a 	add	r5,r17,r5
   14888:	b005883a 	mov	r2,r22
   1488c:	2807883a 	mov	r3,r5
   14890:	dfc00d17 	ldw	ra,52(sp)
   14894:	df000c17 	ldw	fp,48(sp)
   14898:	ddc00b17 	ldw	r23,44(sp)
   1489c:	dd800a17 	ldw	r22,40(sp)
   148a0:	dd400917 	ldw	r21,36(sp)
   148a4:	dd000817 	ldw	r20,32(sp)
   148a8:	dcc00717 	ldw	r19,28(sp)
   148ac:	dc800617 	ldw	r18,24(sp)
   148b0:	dc400517 	ldw	r17,20(sp)
   148b4:	dc000417 	ldw	r16,16(sp)
   148b8:	dec00e04 	addi	sp,sp,56
   148bc:	f800283a 	ret

000148c0 <__clzsi2>:
   148c0:	00bfffd4 	movui	r2,65535
   148c4:	11000e36 	bltu	r2,r4,14900 <__clzsi2+0x40>
   148c8:	00803fc4 	movi	r2,255
   148cc:	01400204 	movi	r5,8
   148d0:	0007883a 	mov	r3,zero
   148d4:	11001036 	bltu	r2,r4,14918 <__clzsi2+0x58>
   148d8:	000b883a 	mov	r5,zero
   148dc:	20c6d83a 	srl	r3,r4,r3
   148e0:	00800074 	movhi	r2,1
   148e4:	109c1304 	addi	r2,r2,28748
   148e8:	1887883a 	add	r3,r3,r2
   148ec:	18800003 	ldbu	r2,0(r3)
   148f0:	00c00804 	movi	r3,32
   148f4:	2885883a 	add	r2,r5,r2
   148f8:	1885c83a 	sub	r2,r3,r2
   148fc:	f800283a 	ret
   14900:	01400404 	movi	r5,16
   14904:	00804034 	movhi	r2,256
   14908:	10bfffc4 	addi	r2,r2,-1
   1490c:	2807883a 	mov	r3,r5
   14910:	113ff22e 	bgeu	r2,r4,148dc <__clzsi2+0x1c>
   14914:	01400604 	movi	r5,24
   14918:	2807883a 	mov	r3,r5
   1491c:	20c6d83a 	srl	r3,r4,r3
   14920:	00800074 	movhi	r2,1
   14924:	109c1304 	addi	r2,r2,28748
   14928:	1887883a 	add	r3,r3,r2
   1492c:	18800003 	ldbu	r2,0(r3)
   14930:	00c00804 	movi	r3,32
   14934:	2885883a 	add	r2,r5,r2
   14938:	1885c83a 	sub	r2,r3,r2
   1493c:	f800283a 	ret

00014940 <__pack_f>:
   14940:	20c00017 	ldw	r3,0(r4)
   14944:	01c00044 	movi	r7,1
   14948:	21800317 	ldw	r6,12(r4)
   1494c:	21400117 	ldw	r5,4(r4)
   14950:	38c02d2e 	bgeu	r7,r3,14a08 <__pack_f+0xc8>
   14954:	00800104 	movi	r2,4
   14958:	18802826 	beq	r3,r2,149fc <__pack_f+0xbc>
   1495c:	00800084 	movi	r2,2
   14960:	18800126 	beq	r3,r2,14968 <__pack_f+0x28>
   14964:	3000101e 	bne	r6,zero,149a8 <__pack_f+0x68>
   14968:	000d883a 	mov	r6,zero
   1496c:	0007883a 	mov	r3,zero
   14970:	19003fcc 	andi	r4,r3,255
   14974:	200895fa 	slli	r4,r4,23
   14978:	00c02034 	movhi	r3,128
   1497c:	18ffffc4 	addi	r3,r3,-1
   14980:	30c6703a 	and	r3,r6,r3
   14984:	10a0002c 	andhi	r2,r2,32768
   14988:	10c4b03a 	or	r2,r2,r3
   1498c:	280a97fa 	slli	r5,r5,31
   14990:	1104b03a 	or	r2,r2,r4
   14994:	00e00034 	movhi	r3,32768
   14998:	18ffffc4 	addi	r3,r3,-1
   1499c:	10c4703a 	and	r2,r2,r3
   149a0:	1144b03a 	or	r2,r2,r5
   149a4:	f800283a 	ret
   149a8:	21000217 	ldw	r4,8(r4)
   149ac:	00bfe084 	movi	r2,-126
   149b0:	20801b16 	blt	r4,r2,14a20 <__pack_f+0xe0>
   149b4:	00801fc4 	movi	r2,127
   149b8:	11001016 	blt	r2,r4,149fc <__pack_f+0xbc>
   149bc:	308e703a 	and	r7,r6,r2
   149c0:	2087883a 	add	r3,r4,r2
   149c4:	00801004 	movi	r2,64
   149c8:	38800526 	beq	r7,r2,149e0 <__pack_f+0xa0>
   149cc:	31800fc4 	addi	r6,r6,63
   149d0:	30000716 	blt	r6,zero,149f0 <__pack_f+0xb0>
   149d4:	300490ba 	slli	r2,r6,2
   149d8:	100cd27a 	srli	r6,r2,9
   149dc:	003fe406 	br	14970 <__pack_f+0x30>
   149e0:	3080200c 	andi	r2,r6,128
   149e4:	103ffa26 	beq	r2,zero,149d0 <__pack_f+0x90>
   149e8:	31cd883a 	add	r6,r6,r7
   149ec:	003ff806 	br	149d0 <__pack_f+0x90>
   149f0:	300cd07a 	srli	r6,r6,1
   149f4:	18c00044 	addi	r3,r3,1
   149f8:	003ff606 	br	149d4 <__pack_f+0x94>
   149fc:	000d883a 	mov	r6,zero
   14a00:	00ffffc4 	movi	r3,-1
   14a04:	003fda06 	br	14970 <__pack_f+0x30>
   14a08:	31800434 	orhi	r6,r6,16
   14a0c:	00802034 	movhi	r2,128
   14a10:	10bfffc4 	addi	r2,r2,-1
   14a14:	308c703a 	and	r6,r6,r2
   14a18:	00ffffc4 	movi	r3,-1
   14a1c:	003fd406 	br	14970 <__pack_f+0x30>
   14a20:	1109c83a 	sub	r4,r2,r4
   14a24:	00800644 	movi	r2,25
   14a28:	11001216 	blt	r2,r4,14a74 <__pack_f+0x134>
   14a2c:	3904983a 	sll	r2,r7,r4
   14a30:	3106d83a 	srl	r3,r6,r4
   14a34:	10bfffc4 	addi	r2,r2,-1
   14a38:	3084703a 	and	r2,r6,r2
   14a3c:	1004c03a 	cmpne	r2,r2,zero
   14a40:	1886b03a 	or	r3,r3,r2
   14a44:	19001fcc 	andi	r4,r3,127
   14a48:	00801004 	movi	r2,64
   14a4c:	20800c26 	beq	r4,r2,14a80 <__pack_f+0x140>
   14a50:	18c00fc4 	addi	r3,r3,63
   14a54:	00900034 	movhi	r2,16384
   14a58:	10bfffc4 	addi	r2,r2,-1
   14a5c:	180cd1fa 	srli	r6,r3,7
   14a60:	10c7803a 	cmpltu	r3,r2,r3
   14a64:	00802034 	movhi	r2,128
   14a68:	10bfffc4 	addi	r2,r2,-1
   14a6c:	308c703a 	and	r6,r6,r2
   14a70:	003fbf06 	br	14970 <__pack_f+0x30>
   14a74:	0007883a 	mov	r3,zero
   14a78:	000d883a 	mov	r6,zero
   14a7c:	003ff906 	br	14a64 <__pack_f+0x124>
   14a80:	1880200c 	andi	r2,r3,128
   14a84:	10000126 	beq	r2,zero,14a8c <__pack_f+0x14c>
   14a88:	1907883a 	add	r3,r3,r4
   14a8c:	180cd1fa 	srli	r6,r3,7
   14a90:	00900034 	movhi	r2,16384
   14a94:	10bfffc4 	addi	r2,r2,-1
   14a98:	10c7803a 	cmpltu	r3,r2,r3
   14a9c:	003ff106 	br	14a64 <__pack_f+0x124>

00014aa0 <__unpack_f>:
   14aa0:	21800017 	ldw	r6,0(r4)
   14aa4:	00c02034 	movhi	r3,128
   14aa8:	18ffffc4 	addi	r3,r3,-1
   14aac:	3004d5fa 	srli	r2,r6,23
   14ab0:	3008d7fa 	srli	r4,r6,31
   14ab4:	30ce703a 	and	r7,r6,r3
   14ab8:	10c03fcc 	andi	r3,r2,255
   14abc:	29000115 	stw	r4,4(r5)
   14ac0:	1800131e 	bne	r3,zero,14b10 <__unpack_f+0x70>
   14ac4:	38000f26 	beq	r7,zero,14b04 <__unpack_f+0x64>
   14ac8:	380691fa 	slli	r3,r7,7
   14acc:	01bfe084 	movi	r6,-126
   14ad0:	008000c4 	movi	r2,3
   14ad4:	01100034 	movhi	r4,16384
   14ad8:	213fffc4 	addi	r4,r4,-1
   14adc:	28800015 	stw	r2,0(r5)
   14ae0:	29800215 	stw	r6,8(r5)
   14ae4:	20c00536 	bltu	r4,r3,14afc <__unpack_f+0x5c>
   14ae8:	3005883a 	mov	r2,r6
   14aec:	18c7883a 	add	r3,r3,r3
   14af0:	10bfffc4 	addi	r2,r2,-1
   14af4:	20fffd2e 	bgeu	r4,r3,14aec <__unpack_f+0x4c>
   14af8:	28800215 	stw	r2,8(r5)
   14afc:	28c00315 	stw	r3,12(r5)
   14b00:	f800283a 	ret
   14b04:	00800084 	movi	r2,2
   14b08:	28800015 	stw	r2,0(r5)
   14b0c:	f800283a 	ret
   14b10:	00803fc4 	movi	r2,255
   14b14:	18800826 	beq	r3,r2,14b38 <__unpack_f+0x98>
   14b18:	380491fa 	slli	r2,r7,7
   14b1c:	18ffe044 	addi	r3,r3,-127
   14b20:	28c00215 	stw	r3,8(r5)
   14b24:	10900034 	orhi	r2,r2,16384
   14b28:	28800315 	stw	r2,12(r5)
   14b2c:	008000c4 	movi	r2,3
   14b30:	28800015 	stw	r2,0(r5)
   14b34:	f800283a 	ret
   14b38:	3800031e 	bne	r7,zero,14b48 <__unpack_f+0xa8>
   14b3c:	00800104 	movi	r2,4
   14b40:	28800015 	stw	r2,0(r5)
   14b44:	f800283a 	ret
   14b48:	3080042c 	andhi	r2,r6,16
   14b4c:	10000426 	beq	r2,zero,14b60 <__unpack_f+0xc0>
   14b50:	00800044 	movi	r2,1
   14b54:	28800015 	stw	r2,0(r5)
   14b58:	29c00315 	stw	r7,12(r5)
   14b5c:	f800283a 	ret
   14b60:	28000015 	stw	zero,0(r5)
   14b64:	003ffc06 	br	14b58 <__unpack_f+0xb8>

00014b68 <__fpcmp_parts_f>:
   14b68:	21800017 	ldw	r6,0(r4)
   14b6c:	00c00044 	movi	r3,1
   14b70:	19800a2e 	bgeu	r3,r6,14b9c <__fpcmp_parts_f+0x34>
   14b74:	28800017 	ldw	r2,0(r5)
   14b78:	1880082e 	bgeu	r3,r2,14b9c <__fpcmp_parts_f+0x34>
   14b7c:	00c00104 	movi	r3,4
   14b80:	30c01e26 	beq	r6,r3,14bfc <__fpcmp_parts_f+0x94>
   14b84:	10c01a26 	beq	r2,r3,14bf0 <__fpcmp_parts_f+0x88>
   14b88:	00c00084 	movi	r3,2
   14b8c:	30c00526 	beq	r6,r3,14ba4 <__fpcmp_parts_f+0x3c>
   14b90:	10c0071e 	bne	r2,r3,14bb0 <__fpcmp_parts_f+0x48>
   14b94:	20800117 	ldw	r2,4(r4)
   14b98:	1000091e 	bne	r2,zero,14bc0 <__fpcmp_parts_f+0x58>
   14b9c:	00800044 	movi	r2,1
   14ba0:	f800283a 	ret
   14ba4:	10c0121e 	bne	r2,r3,14bf0 <__fpcmp_parts_f+0x88>
   14ba8:	0005883a 	mov	r2,zero
   14bac:	f800283a 	ret
   14bb0:	20c00117 	ldw	r3,4(r4)
   14bb4:	28800117 	ldw	r2,4(r5)
   14bb8:	18800326 	beq	r3,r2,14bc8 <__fpcmp_parts_f+0x60>
   14bbc:	183ff726 	beq	r3,zero,14b9c <__fpcmp_parts_f+0x34>
   14bc0:	00bfffc4 	movi	r2,-1
   14bc4:	f800283a 	ret
   14bc8:	21800217 	ldw	r6,8(r4)
   14bcc:	28800217 	ldw	r2,8(r5)
   14bd0:	11bffa16 	blt	r2,r6,14bbc <__fpcmp_parts_f+0x54>
   14bd4:	30800416 	blt	r6,r2,14be8 <__fpcmp_parts_f+0x80>
   14bd8:	21000317 	ldw	r4,12(r4)
   14bdc:	29400317 	ldw	r5,12(r5)
   14be0:	293ff636 	bltu	r5,r4,14bbc <__fpcmp_parts_f+0x54>
   14be4:	217ff02e 	bgeu	r4,r5,14ba8 <__fpcmp_parts_f+0x40>
   14be8:	183fec1e 	bne	r3,zero,14b9c <__fpcmp_parts_f+0x34>
   14bec:	003ff406 	br	14bc0 <__fpcmp_parts_f+0x58>
   14bf0:	28800117 	ldw	r2,4(r5)
   14bf4:	103fe91e 	bne	r2,zero,14b9c <__fpcmp_parts_f+0x34>
   14bf8:	003ff106 	br	14bc0 <__fpcmp_parts_f+0x58>
   14bfc:	11bfe51e 	bne	r2,r6,14b94 <__fpcmp_parts_f+0x2c>
   14c00:	28c00117 	ldw	r3,4(r5)
   14c04:	20800117 	ldw	r2,4(r4)
   14c08:	1885c83a 	sub	r2,r3,r2
   14c0c:	f800283a 	ret

00014c10 <__pack_d>:
   14c10:	20c00017 	ldw	r3,0(r4)
   14c14:	defffd04 	addi	sp,sp,-12
   14c18:	dc000015 	stw	r16,0(sp)
   14c1c:	dc800215 	stw	r18,8(sp)
   14c20:	dc400115 	stw	r17,4(sp)
   14c24:	00800044 	movi	r2,1
   14c28:	22000317 	ldw	r8,12(r4)
   14c2c:	001f883a 	mov	r15,zero
   14c30:	22400417 	ldw	r9,16(r4)
   14c34:	24000117 	ldw	r16,4(r4)
   14c38:	10c0552e 	bgeu	r2,r3,14d90 <__pack_d+0x180>
   14c3c:	00800104 	movi	r2,4
   14c40:	18804f26 	beq	r3,r2,14d80 <__pack_d+0x170>
   14c44:	00800084 	movi	r2,2
   14c48:	18800226 	beq	r3,r2,14c54 <__pack_d+0x44>
   14c4c:	4244b03a 	or	r2,r8,r9
   14c50:	10001a1e 	bne	r2,zero,14cbc <__pack_d+0xac>
   14c54:	000d883a 	mov	r6,zero
   14c58:	000f883a 	mov	r7,zero
   14c5c:	0011883a 	mov	r8,zero
   14c60:	00800434 	movhi	r2,16
   14c64:	10bfffc4 	addi	r2,r2,-1
   14c68:	301d883a 	mov	r14,r6
   14c6c:	3884703a 	and	r2,r7,r2
   14c70:	400a953a 	slli	r5,r8,20
   14c74:	79bffc2c 	andhi	r6,r15,65520
   14c78:	308cb03a 	or	r6,r6,r2
   14c7c:	00e00434 	movhi	r3,32784
   14c80:	18ffffc4 	addi	r3,r3,-1
   14c84:	800497fa 	slli	r2,r16,31
   14c88:	30c6703a 	and	r3,r6,r3
   14c8c:	1946b03a 	or	r3,r3,r5
   14c90:	01600034 	movhi	r5,32768
   14c94:	297fffc4 	addi	r5,r5,-1
   14c98:	194a703a 	and	r5,r3,r5
   14c9c:	288ab03a 	or	r5,r5,r2
   14ca0:	2807883a 	mov	r3,r5
   14ca4:	7005883a 	mov	r2,r14
   14ca8:	dc800217 	ldw	r18,8(sp)
   14cac:	dc400117 	ldw	r17,4(sp)
   14cb0:	dc000017 	ldw	r16,0(sp)
   14cb4:	dec00304 	addi	sp,sp,12
   14cb8:	f800283a 	ret
   14cbc:	21000217 	ldw	r4,8(r4)
   14cc0:	00bf0084 	movi	r2,-1022
   14cc4:	20803f16 	blt	r4,r2,14dc4 <__pack_d+0x1b4>
   14cc8:	0080ffc4 	movi	r2,1023
   14ccc:	11002c16 	blt	r2,r4,14d80 <__pack_d+0x170>
   14cd0:	00803fc4 	movi	r2,255
   14cd4:	408c703a 	and	r6,r8,r2
   14cd8:	00802004 	movi	r2,128
   14cdc:	0007883a 	mov	r3,zero
   14ce0:	000f883a 	mov	r7,zero
   14ce4:	2280ffc4 	addi	r10,r4,1023
   14ce8:	30801e26 	beq	r6,r2,14d64 <__pack_d+0x154>
   14cec:	00801fc4 	movi	r2,127
   14cf0:	4089883a 	add	r4,r8,r2
   14cf4:	220d803a 	cmpltu	r6,r4,r8
   14cf8:	324d883a 	add	r6,r6,r9
   14cfc:	2011883a 	mov	r8,r4
   14d00:	3013883a 	mov	r9,r6
   14d04:	00880034 	movhi	r2,8192
   14d08:	10bfffc4 	addi	r2,r2,-1
   14d0c:	12400d36 	bltu	r2,r9,14d44 <__pack_d+0x134>
   14d10:	4804963a 	slli	r2,r9,24
   14d14:	400cd23a 	srli	r6,r8,8
   14d18:	480ed23a 	srli	r7,r9,8
   14d1c:	013fffc4 	movi	r4,-1
   14d20:	118cb03a 	or	r6,r2,r6
   14d24:	01400434 	movhi	r5,16
   14d28:	297fffc4 	addi	r5,r5,-1
   14d2c:	3104703a 	and	r2,r6,r4
   14d30:	3946703a 	and	r3,r7,r5
   14d34:	5201ffcc 	andi	r8,r10,2047
   14d38:	100d883a 	mov	r6,r2
   14d3c:	180f883a 	mov	r7,r3
   14d40:	003fc706 	br	14c60 <__pack_d+0x50>
   14d44:	480897fa 	slli	r4,r9,31
   14d48:	4004d07a 	srli	r2,r8,1
   14d4c:	4806d07a 	srli	r3,r9,1
   14d50:	52800044 	addi	r10,r10,1
   14d54:	2084b03a 	or	r2,r4,r2
   14d58:	1011883a 	mov	r8,r2
   14d5c:	1813883a 	mov	r9,r3
   14d60:	003feb06 	br	14d10 <__pack_d+0x100>
   14d64:	383fe11e 	bne	r7,zero,14cec <__pack_d+0xdc>
   14d68:	01004004 	movi	r4,256
   14d6c:	4104703a 	and	r2,r8,r4
   14d70:	10c4b03a 	or	r2,r2,r3
   14d74:	103fe326 	beq	r2,zero,14d04 <__pack_d+0xf4>
   14d78:	3005883a 	mov	r2,r6
   14d7c:	003fdc06 	br	14cf0 <__pack_d+0xe0>
   14d80:	000d883a 	mov	r6,zero
   14d84:	000f883a 	mov	r7,zero
   14d88:	0201ffc4 	movi	r8,2047
   14d8c:	003fb406 	br	14c60 <__pack_d+0x50>
   14d90:	0005883a 	mov	r2,zero
   14d94:	00c00234 	movhi	r3,8
   14d98:	408cb03a 	or	r6,r8,r2
   14d9c:	48ceb03a 	or	r7,r9,r3
   14da0:	013fffc4 	movi	r4,-1
   14da4:	01400434 	movhi	r5,16
   14da8:	297fffc4 	addi	r5,r5,-1
   14dac:	3104703a 	and	r2,r6,r4
   14db0:	3946703a 	and	r3,r7,r5
   14db4:	100d883a 	mov	r6,r2
   14db8:	180f883a 	mov	r7,r3
   14dbc:	0201ffc4 	movi	r8,2047
   14dc0:	003fa706 	br	14c60 <__pack_d+0x50>
   14dc4:	1109c83a 	sub	r4,r2,r4
   14dc8:	00800e04 	movi	r2,56
   14dcc:	11004316 	blt	r2,r4,14edc <__pack_d+0x2cc>
   14dd0:	21fff804 	addi	r7,r4,-32
   14dd4:	38004516 	blt	r7,zero,14eec <__pack_d+0x2dc>
   14dd8:	49d8d83a 	srl	r12,r9,r7
   14ddc:	001b883a 	mov	r13,zero
   14de0:	0023883a 	mov	r17,zero
   14de4:	01400044 	movi	r5,1
   14de8:	0025883a 	mov	r18,zero
   14dec:	38004716 	blt	r7,zero,14f0c <__pack_d+0x2fc>
   14df0:	29d6983a 	sll	r11,r5,r7
   14df4:	0015883a 	mov	r10,zero
   14df8:	00bfffc4 	movi	r2,-1
   14dfc:	5089883a 	add	r4,r10,r2
   14e00:	588b883a 	add	r5,r11,r2
   14e04:	228d803a 	cmpltu	r6,r4,r10
   14e08:	314b883a 	add	r5,r6,r5
   14e0c:	4104703a 	and	r2,r8,r4
   14e10:	4946703a 	and	r3,r9,r5
   14e14:	10c4b03a 	or	r2,r2,r3
   14e18:	10000226 	beq	r2,zero,14e24 <__pack_d+0x214>
   14e1c:	04400044 	movi	r17,1
   14e20:	0025883a 	mov	r18,zero
   14e24:	00803fc4 	movi	r2,255
   14e28:	644eb03a 	or	r7,r12,r17
   14e2c:	3892703a 	and	r9,r7,r2
   14e30:	00802004 	movi	r2,128
   14e34:	6c90b03a 	or	r8,r13,r18
   14e38:	0015883a 	mov	r10,zero
   14e3c:	48801626 	beq	r9,r2,14e98 <__pack_d+0x288>
   14e40:	01001fc4 	movi	r4,127
   14e44:	3905883a 	add	r2,r7,r4
   14e48:	11cd803a 	cmpltu	r6,r2,r7
   14e4c:	320d883a 	add	r6,r6,r8
   14e50:	100f883a 	mov	r7,r2
   14e54:	00840034 	movhi	r2,4096
   14e58:	10bfffc4 	addi	r2,r2,-1
   14e5c:	3011883a 	mov	r8,r6
   14e60:	0007883a 	mov	r3,zero
   14e64:	11801b36 	bltu	r2,r6,14ed4 <__pack_d+0x2c4>
   14e68:	4004963a 	slli	r2,r8,24
   14e6c:	3808d23a 	srli	r4,r7,8
   14e70:	400ad23a 	srli	r5,r8,8
   14e74:	1813883a 	mov	r9,r3
   14e78:	1108b03a 	or	r4,r2,r4
   14e7c:	00bfffc4 	movi	r2,-1
   14e80:	00c00434 	movhi	r3,16
   14e84:	18ffffc4 	addi	r3,r3,-1
   14e88:	208c703a 	and	r6,r4,r2
   14e8c:	28ce703a 	and	r7,r5,r3
   14e90:	4a01ffcc 	andi	r8,r9,2047
   14e94:	003f7206 	br	14c60 <__pack_d+0x50>
   14e98:	503fe91e 	bne	r10,zero,14e40 <__pack_d+0x230>
   14e9c:	01004004 	movi	r4,256
   14ea0:	3904703a 	and	r2,r7,r4
   14ea4:	0007883a 	mov	r3,zero
   14ea8:	10c4b03a 	or	r2,r2,r3
   14eac:	10000626 	beq	r2,zero,14ec8 <__pack_d+0x2b8>
   14eb0:	3a45883a 	add	r2,r7,r9
   14eb4:	11cd803a 	cmpltu	r6,r2,r7
   14eb8:	320d883a 	add	r6,r6,r8
   14ebc:	100f883a 	mov	r7,r2
   14ec0:	3011883a 	mov	r8,r6
   14ec4:	0007883a 	mov	r3,zero
   14ec8:	00840034 	movhi	r2,4096
   14ecc:	10bfffc4 	addi	r2,r2,-1
   14ed0:	123fe52e 	bgeu	r2,r8,14e68 <__pack_d+0x258>
   14ed4:	00c00044 	movi	r3,1
   14ed8:	003fe306 	br	14e68 <__pack_d+0x258>
   14edc:	0009883a 	mov	r4,zero
   14ee0:	0013883a 	mov	r9,zero
   14ee4:	000b883a 	mov	r5,zero
   14ee8:	003fe406 	br	14e7c <__pack_d+0x26c>
   14eec:	4a47883a 	add	r3,r9,r9
   14ef0:	008007c4 	movi	r2,31
   14ef4:	1105c83a 	sub	r2,r2,r4
   14ef8:	1886983a 	sll	r3,r3,r2
   14efc:	4118d83a 	srl	r12,r8,r4
   14f00:	491ad83a 	srl	r13,r9,r4
   14f04:	1b18b03a 	or	r12,r3,r12
   14f08:	003fb506 	br	14de0 <__pack_d+0x1d0>
   14f0c:	2806d07a 	srli	r3,r5,1
   14f10:	008007c4 	movi	r2,31
   14f14:	1105c83a 	sub	r2,r2,r4
   14f18:	1896d83a 	srl	r11,r3,r2
   14f1c:	2914983a 	sll	r10,r5,r4
   14f20:	003fb506 	br	14df8 <__pack_d+0x1e8>

00014f24 <__unpack_d>:
   14f24:	20c00117 	ldw	r3,4(r4)
   14f28:	22400017 	ldw	r9,0(r4)
   14f2c:	00800434 	movhi	r2,16
   14f30:	10bfffc4 	addi	r2,r2,-1
   14f34:	1808d53a 	srli	r4,r3,20
   14f38:	180cd7fa 	srli	r6,r3,31
   14f3c:	1894703a 	and	r10,r3,r2
   14f40:	2201ffcc 	andi	r8,r4,2047
   14f44:	281b883a 	mov	r13,r5
   14f48:	4817883a 	mov	r11,r9
   14f4c:	29800115 	stw	r6,4(r5)
   14f50:	5019883a 	mov	r12,r10
   14f54:	40001e1e 	bne	r8,zero,14fd0 <__unpack_d+0xac>
   14f58:	4a84b03a 	or	r2,r9,r10
   14f5c:	10001926 	beq	r2,zero,14fc4 <__unpack_d+0xa0>
   14f60:	4804d63a 	srli	r2,r9,24
   14f64:	500c923a 	slli	r6,r10,8
   14f68:	013f0084 	movi	r4,-1022
   14f6c:	00c40034 	movhi	r3,4096
   14f70:	18ffffc4 	addi	r3,r3,-1
   14f74:	118cb03a 	or	r6,r2,r6
   14f78:	008000c4 	movi	r2,3
   14f7c:	480a923a 	slli	r5,r9,8
   14f80:	68800015 	stw	r2,0(r13)
   14f84:	69000215 	stw	r4,8(r13)
   14f88:	19800b36 	bltu	r3,r6,14fb8 <__unpack_d+0x94>
   14f8c:	200f883a 	mov	r7,r4
   14f90:	1811883a 	mov	r8,r3
   14f94:	2945883a 	add	r2,r5,r5
   14f98:	1149803a 	cmpltu	r4,r2,r5
   14f9c:	3187883a 	add	r3,r6,r6
   14fa0:	20c9883a 	add	r4,r4,r3
   14fa4:	100b883a 	mov	r5,r2
   14fa8:	200d883a 	mov	r6,r4
   14fac:	39ffffc4 	addi	r7,r7,-1
   14fb0:	413ff82e 	bgeu	r8,r4,14f94 <__unpack_d+0x70>
   14fb4:	69c00215 	stw	r7,8(r13)
   14fb8:	69800415 	stw	r6,16(r13)
   14fbc:	69400315 	stw	r5,12(r13)
   14fc0:	f800283a 	ret
   14fc4:	00800084 	movi	r2,2
   14fc8:	28800015 	stw	r2,0(r5)
   14fcc:	f800283a 	ret
   14fd0:	0081ffc4 	movi	r2,2047
   14fd4:	40800f26 	beq	r8,r2,15014 <__unpack_d+0xf0>
   14fd8:	480cd63a 	srli	r6,r9,24
   14fdc:	5006923a 	slli	r3,r10,8
   14fe0:	4804923a 	slli	r2,r9,8
   14fe4:	0009883a 	mov	r4,zero
   14fe8:	30c6b03a 	or	r3,r6,r3
   14fec:	01440034 	movhi	r5,4096
   14ff0:	110cb03a 	or	r6,r2,r4
   14ff4:	423f0044 	addi	r8,r8,-1023
   14ff8:	194eb03a 	or	r7,r3,r5
   14ffc:	008000c4 	movi	r2,3
   15000:	69c00415 	stw	r7,16(r13)
   15004:	6a000215 	stw	r8,8(r13)
   15008:	68800015 	stw	r2,0(r13)
   1500c:	69800315 	stw	r6,12(r13)
   15010:	f800283a 	ret
   15014:	4a84b03a 	or	r2,r9,r10
   15018:	1000031e 	bne	r2,zero,15028 <__unpack_d+0x104>
   1501c:	00800104 	movi	r2,4
   15020:	28800015 	stw	r2,0(r5)
   15024:	f800283a 	ret
   15028:	0009883a 	mov	r4,zero
   1502c:	01400234 	movhi	r5,8
   15030:	4904703a 	and	r2,r9,r4
   15034:	5146703a 	and	r3,r10,r5
   15038:	10c4b03a 	or	r2,r2,r3
   1503c:	10000526 	beq	r2,zero,15054 <__unpack_d+0x130>
   15040:	00800044 	movi	r2,1
   15044:	68800015 	stw	r2,0(r13)
   15048:	6b000415 	stw	r12,16(r13)
   1504c:	6ac00315 	stw	r11,12(r13)
   15050:	f800283a 	ret
   15054:	68000015 	stw	zero,0(r13)
   15058:	003ffb06 	br	15048 <__unpack_d+0x124>

0001505c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1505c:	deffef04 	addi	sp,sp,-68
   15060:	df001015 	stw	fp,64(sp)
   15064:	df001004 	addi	fp,sp,64
   15068:	e13ffc15 	stw	r4,-16(fp)
   1506c:	e17ffd15 	stw	r5,-12(fp)
   15070:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
   15074:	00bffa84 	movi	r2,-22
   15078:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1507c:	e0bffc17 	ldw	r2,-16(fp)
   15080:	10800828 	cmpgeui	r2,r2,32
   15084:	1000601e 	bne	r2,zero,15208 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15088:	0005303a 	rdctl	r2,status
   1508c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15090:	e0fff917 	ldw	r3,-28(fp)
   15094:	00bfff84 	movi	r2,-2
   15098:	1884703a 	and	r2,r3,r2
   1509c:	1001703a 	wrctl	status,r2
  
  return context;
   150a0:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   150a4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
   150a8:	e0bffc17 	ldw	r2,-16(fp)
   150ac:	00c00074 	movhi	r3,1
   150b0:	18de4f04 	addi	r3,r3,31036
   150b4:	100490fa 	slli	r2,r2,3
   150b8:	10c7883a 	add	r3,r2,r3
   150bc:	e0bffe17 	ldw	r2,-8(fp)
   150c0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
   150c4:	e0bffc17 	ldw	r2,-16(fp)
   150c8:	00c00074 	movhi	r3,1
   150cc:	18de4f04 	addi	r3,r3,31036
   150d0:	100490fa 	slli	r2,r2,3
   150d4:	10c5883a 	add	r2,r2,r3
   150d8:	10c00104 	addi	r3,r2,4
   150dc:	e0bffd17 	ldw	r2,-12(fp)
   150e0:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   150e4:	e0bffe17 	ldw	r2,-8(fp)
   150e8:	1005003a 	cmpeq	r2,r2,zero
   150ec:	1000201e 	bne	r2,zero,15170 <alt_irq_register+0x114>
   150f0:	e0bffc17 	ldw	r2,-16(fp)
   150f4:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   150f8:	0005303a 	rdctl	r2,status
   150fc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15100:	e0fff617 	ldw	r3,-40(fp)
   15104:	00bfff84 	movi	r2,-2
   15108:	1884703a 	and	r2,r3,r2
   1510c:	1001703a 	wrctl	status,r2
  
  return context;
   15110:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15114:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   15118:	e0fff717 	ldw	r3,-36(fp)
   1511c:	00800044 	movi	r2,1
   15120:	10c4983a 	sll	r2,r2,r3
   15124:	1007883a 	mov	r3,r2
   15128:	00800074 	movhi	r2,1
   1512c:	109e4804 	addi	r2,r2,31008
   15130:	10800017 	ldw	r2,0(r2)
   15134:	1886b03a 	or	r3,r3,r2
   15138:	00800074 	movhi	r2,1
   1513c:	109e4804 	addi	r2,r2,31008
   15140:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15144:	00800074 	movhi	r2,1
   15148:	109e4804 	addi	r2,r2,31008
   1514c:	10800017 	ldw	r2,0(r2)
   15150:	100170fa 	wrctl	ienable,r2
   15154:	e0bff817 	ldw	r2,-32(fp)
   15158:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1515c:	e0bff517 	ldw	r2,-44(fp)
   15160:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15164:	0005883a 	mov	r2,zero
   15168:	e0bfff15 	stw	r2,-4(fp)
   1516c:	00002006 	br	151f0 <alt_irq_register+0x194>
   15170:	e0bffc17 	ldw	r2,-16(fp)
   15174:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15178:	0005303a 	rdctl	r2,status
   1517c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15180:	e0fff217 	ldw	r3,-56(fp)
   15184:	00bfff84 	movi	r2,-2
   15188:	1884703a 	and	r2,r3,r2
   1518c:	1001703a 	wrctl	status,r2
  
  return context;
   15190:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15194:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
   15198:	e0fff317 	ldw	r3,-52(fp)
   1519c:	00800044 	movi	r2,1
   151a0:	10c4983a 	sll	r2,r2,r3
   151a4:	0084303a 	nor	r2,zero,r2
   151a8:	1007883a 	mov	r3,r2
   151ac:	00800074 	movhi	r2,1
   151b0:	109e4804 	addi	r2,r2,31008
   151b4:	10800017 	ldw	r2,0(r2)
   151b8:	1886703a 	and	r3,r3,r2
   151bc:	00800074 	movhi	r2,1
   151c0:	109e4804 	addi	r2,r2,31008
   151c4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   151c8:	00800074 	movhi	r2,1
   151cc:	109e4804 	addi	r2,r2,31008
   151d0:	10800017 	ldw	r2,0(r2)
   151d4:	100170fa 	wrctl	ienable,r2
   151d8:	e0bff417 	ldw	r2,-48(fp)
   151dc:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   151e0:	e0bff117 	ldw	r2,-60(fp)
   151e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   151e8:	0005883a 	mov	r2,zero
   151ec:	e0bfff15 	stw	r2,-4(fp)
   151f0:	e0bfff17 	ldw	r2,-4(fp)
   151f4:	e0bffb15 	stw	r2,-20(fp)
   151f8:	e0bffa17 	ldw	r2,-24(fp)
   151fc:	e0bff015 	stw	r2,-64(fp)
   15200:	e0bff017 	ldw	r2,-64(fp)
   15204:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   15208:	e0bffb17 	ldw	r2,-20(fp)
}
   1520c:	e037883a 	mov	sp,fp
   15210:	df000017 	ldw	fp,0(sp)
   15214:	dec00104 	addi	sp,sp,4
   15218:	f800283a 	ret

0001521c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1521c:	defffd04 	addi	sp,sp,-12
   15220:	dfc00215 	stw	ra,8(sp)
   15224:	df000115 	stw	fp,4(sp)
   15228:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1522c:	0009883a 	mov	r4,zero
   15230:	00152b80 	call	152b8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   15234:	00152ec0 	call	152ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   15238:	01000074 	movhi	r4,1
   1523c:	211c5304 	addi	r4,r4,29004
   15240:	01400074 	movhi	r5,1
   15244:	295c5304 	addi	r5,r5,29004
   15248:	01800074 	movhi	r6,1
   1524c:	319c5304 	addi	r6,r6,29004
   15250:	00162680 	call	16268 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   15254:	0015dfc0 	call	15dfc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   15258:	01000074 	movhi	r4,1
   1525c:	21179804 	addi	r4,r4,24160
   15260:	0016a840 	call	16a84 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   15264:	d1202a17 	ldw	r4,-32600(gp)
   15268:	d1602b17 	ldw	r5,-32596(gp)
   1526c:	d1a02c17 	ldw	r6,-32592(gp)
   15270:	0010fb00 	call	10fb0 <main>
   15274:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   15278:	01000044 	movi	r4,1
   1527c:	0015b5c0 	call	15b5c <close>
  exit (result);
   15280:	e13fff17 	ldw	r4,-4(fp)
   15284:	0016a980 	call	16a98 <exit>

00015288 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   15288:	defffd04 	addi	sp,sp,-12
   1528c:	dfc00215 	stw	ra,8(sp)
   15290:	df000115 	stw	fp,4(sp)
   15294:	df000104 	addi	fp,sp,4
   15298:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   1529c:	e13fff17 	ldw	r4,-4(fp)
   152a0:	0015a000 	call	15a00 <alt_busy_sleep>
}
   152a4:	e037883a 	mov	sp,fp
   152a8:	dfc00117 	ldw	ra,4(sp)
   152ac:	df000017 	ldw	fp,0(sp)
   152b0:	dec00204 	addi	sp,sp,8
   152b4:	f800283a 	ret

000152b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   152b8:	defffd04 	addi	sp,sp,-12
   152bc:	dfc00215 	stw	ra,8(sp)
   152c0:	df000115 	stw	fp,4(sp)
   152c4:	df000104 	addi	fp,sp,4
   152c8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   152cc:	00167e00 	call	167e0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   152d0:	00800044 	movi	r2,1
   152d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   152d8:	e037883a 	mov	sp,fp
   152dc:	dfc00117 	ldw	ra,4(sp)
   152e0:	df000017 	ldw	fp,0(sp)
   152e4:	dec00204 	addi	sp,sp,8
   152e8:	f800283a 	ret

000152ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   152ec:	defffe04 	addi	sp,sp,-8
   152f0:	dfc00115 	stw	ra,4(sp)
   152f4:	df000015 	stw	fp,0(sp)
   152f8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   152fc:	010000b4 	movhi	r4,2
   15300:	21080004 	addi	r4,r4,8192
   15304:	000b883a 	mov	r5,zero
   15308:	01800044 	movi	r6,1
   1530c:	01c0fa04 	movi	r7,1000
   15310:	00156400 	call	15640 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   15314:	01000074 	movhi	r4,1
   15318:	211d6704 	addi	r4,r4,30108
   1531c:	00153400 	call	15340 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( ST_CURRENT_SENSOR, st_current_sensor);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
   15320:	01000074 	movhi	r4,1
   15324:	211d7204 	addi	r4,r4,30152
   15328:	00153400 	call	15340 <alt_dev_reg>
}
   1532c:	e037883a 	mov	sp,fp
   15330:	dfc00117 	ldw	ra,4(sp)
   15334:	df000017 	ldw	fp,0(sp)
   15338:	dec00204 	addi	sp,sp,8
   1533c:	f800283a 	ret

00015340 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   15340:	defffd04 	addi	sp,sp,-12
   15344:	dfc00215 	stw	ra,8(sp)
   15348:	df000115 	stw	fp,4(sp)
   1534c:	df000104 	addi	fp,sp,4
   15350:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   15354:	e13fff17 	ldw	r4,-4(fp)
   15358:	01400074 	movhi	r5,1
   1535c:	295e2404 	addi	r5,r5,30864
   15360:	0015ce80 	call	15ce8 <alt_dev_llist_insert>
}
   15364:	e037883a 	mov	sp,fp
   15368:	dfc00117 	ldw	ra,4(sp)
   1536c:	df000017 	ldw	fp,0(sp)
   15370:	dec00204 	addi	sp,sp,8
   15374:	f800283a 	ret

00015378 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   15378:	defffa04 	addi	sp,sp,-24
   1537c:	dfc00515 	stw	ra,20(sp)
   15380:	df000415 	stw	fp,16(sp)
   15384:	df000404 	addi	fp,sp,16
   15388:	e13ffd15 	stw	r4,-12(fp)
   1538c:	e17ffe15 	stw	r5,-8(fp)
   15390:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   15394:	e0bffd17 	ldw	r2,-12(fp)
   15398:	10800017 	ldw	r2,0(r2)
   1539c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   153a0:	e0bffc17 	ldw	r2,-16(fp)
   153a4:	11000a04 	addi	r4,r2,40
   153a8:	e0bffd17 	ldw	r2,-12(fp)
   153ac:	11c00217 	ldw	r7,8(r2)
   153b0:	e17ffe17 	ldw	r5,-8(fp)
   153b4:	e1bfff17 	ldw	r6,-4(fp)
   153b8:	00154280 	call	15428 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   153bc:	e037883a 	mov	sp,fp
   153c0:	dfc00117 	ldw	ra,4(sp)
   153c4:	df000017 	ldw	fp,0(sp)
   153c8:	dec00204 	addi	sp,sp,8
   153cc:	f800283a 	ret

000153d0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   153d0:	defffa04 	addi	sp,sp,-24
   153d4:	dfc00515 	stw	ra,20(sp)
   153d8:	df000415 	stw	fp,16(sp)
   153dc:	df000404 	addi	fp,sp,16
   153e0:	e13ffd15 	stw	r4,-12(fp)
   153e4:	e17ffe15 	stw	r5,-8(fp)
   153e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   153ec:	e0bffd17 	ldw	r2,-12(fp)
   153f0:	10800017 	ldw	r2,0(r2)
   153f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   153f8:	e0bffc17 	ldw	r2,-16(fp)
   153fc:	11000a04 	addi	r4,r2,40
   15400:	e0bffd17 	ldw	r2,-12(fp)
   15404:	11c00217 	ldw	r7,8(r2)
   15408:	e17ffe17 	ldw	r5,-8(fp)
   1540c:	e1bfff17 	ldw	r6,-4(fp)
   15410:	001552c0 	call	1552c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   15414:	e037883a 	mov	sp,fp
   15418:	dfc00117 	ldw	ra,4(sp)
   1541c:	df000017 	ldw	fp,0(sp)
   15420:	dec00204 	addi	sp,sp,8
   15424:	f800283a 	ret

00015428 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   15428:	defff604 	addi	sp,sp,-40
   1542c:	df000915 	stw	fp,36(sp)
   15430:	df000904 	addi	fp,sp,36
   15434:	e13ffb15 	stw	r4,-20(fp)
   15438:	e17ffc15 	stw	r5,-16(fp)
   1543c:	e1bffd15 	stw	r6,-12(fp)
   15440:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
   15444:	e0bffb17 	ldw	r2,-20(fp)
   15448:	10800017 	ldw	r2,0(r2)
   1544c:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
   15450:	e0bffc17 	ldw	r2,-16(fp)
   15454:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
   15458:	e0bffd17 	ldw	r2,-12(fp)
   1545c:	1007883a 	mov	r3,r2
   15460:	e0bffc17 	ldw	r2,-16(fp)
   15464:	10c5883a 	add	r2,r2,r3
   15468:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
   1546c:	00001606 	br	154c8 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   15470:	e0bffa17 	ldw	r2,-24(fp)
   15474:	10800037 	ldwio	r2,0(r2)
   15478:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   1547c:	e0bff717 	ldw	r2,-36(fp)
   15480:	10a0000c 	andi	r2,r2,32768
   15484:	1005003a 	cmpeq	r2,r2,zero
   15488:	1000081e 	bne	r2,zero,154ac <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1548c:	e0bff717 	ldw	r2,-36(fp)
   15490:	1007883a 	mov	r3,r2
   15494:	e0bff917 	ldw	r2,-28(fp)
   15498:	10c00005 	stb	r3,0(r2)
   1549c:	e0bff917 	ldw	r2,-28(fp)
   154a0:	10800044 	addi	r2,r2,1
   154a4:	e0bff915 	stw	r2,-28(fp)
   154a8:	00000706 	br	154c8 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
   154ac:	e0fff917 	ldw	r3,-28(fp)
   154b0:	e0bffc17 	ldw	r2,-16(fp)
   154b4:	1880071e 	bne	r3,r2,154d4 <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
   154b8:	e0bffe17 	ldw	r2,-8(fp)
   154bc:	1090000c 	andi	r2,r2,16384
   154c0:	1004c03a 	cmpne	r2,r2,zero
   154c4:	1000031e 	bne	r2,zero,154d4 <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   154c8:	e0fff917 	ldw	r3,-28(fp)
   154cc:	e0bff817 	ldw	r2,-32(fp)
   154d0:	18bfe736 	bltu	r3,r2,15470 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   154d4:	e0fff917 	ldw	r3,-28(fp)
   154d8:	e0bffc17 	ldw	r2,-16(fp)
   154dc:	18800526 	beq	r3,r2,154f4 <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
   154e0:	e0fff917 	ldw	r3,-28(fp)
   154e4:	e0bffc17 	ldw	r2,-16(fp)
   154e8:	1887c83a 	sub	r3,r3,r2
   154ec:	e0ffff15 	stw	r3,-4(fp)
   154f0:	00000906 	br	15518 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
   154f4:	e0bffe17 	ldw	r2,-8(fp)
   154f8:	1090000c 	andi	r2,r2,16384
   154fc:	1005003a 	cmpeq	r2,r2,zero
   15500:	1000031e 	bne	r2,zero,15510 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
   15504:	00bffd44 	movi	r2,-11
   15508:	e0bfff15 	stw	r2,-4(fp)
   1550c:	00000206 	br	15518 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
   15510:	00bffec4 	movi	r2,-5
   15514:	e0bfff15 	stw	r2,-4(fp)
   15518:	e0bfff17 	ldw	r2,-4(fp)
}
   1551c:	e037883a 	mov	sp,fp
   15520:	df000017 	ldw	fp,0(sp)
   15524:	dec00104 	addi	sp,sp,4
   15528:	f800283a 	ret

0001552c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1552c:	defff904 	addi	sp,sp,-28
   15530:	df000615 	stw	fp,24(sp)
   15534:	df000604 	addi	fp,sp,24
   15538:	e13ffc15 	stw	r4,-16(fp)
   1553c:	e17ffd15 	stw	r5,-12(fp)
   15540:	e1bffe15 	stw	r6,-8(fp)
   15544:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   15548:	e0bffc17 	ldw	r2,-16(fp)
   1554c:	10800017 	ldw	r2,0(r2)
   15550:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
   15554:	e0bffe17 	ldw	r2,-8(fp)
   15558:	1007883a 	mov	r3,r2
   1555c:	e0bffd17 	ldw	r2,-12(fp)
   15560:	10c5883a 	add	r2,r2,r3
   15564:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   15568:	00001106 	br	155b0 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   1556c:	e0bffb17 	ldw	r2,-20(fp)
   15570:	10800104 	addi	r2,r2,4
   15574:	10800037 	ldwio	r2,0(r2)
   15578:	10bfffec 	andhi	r2,r2,65535
   1557c:	1005003a 	cmpeq	r2,r2,zero
   15580:	10000b1e 	bne	r2,zero,155b0 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   15584:	e13ffb17 	ldw	r4,-20(fp)
   15588:	e0bffd17 	ldw	r2,-12(fp)
   1558c:	10800003 	ldbu	r2,0(r2)
   15590:	10c03fcc 	andi	r3,r2,255
   15594:	18c0201c 	xori	r3,r3,128
   15598:	18ffe004 	addi	r3,r3,-128
   1559c:	e0bffd17 	ldw	r2,-12(fp)
   155a0:	10800044 	addi	r2,r2,1
   155a4:	e0bffd15 	stw	r2,-12(fp)
   155a8:	2005883a 	mov	r2,r4
   155ac:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   155b0:	e0fffd17 	ldw	r3,-12(fp)
   155b4:	e0bffa17 	ldw	r2,-24(fp)
   155b8:	18bfec36 	bltu	r3,r2,1556c <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   155bc:	e0bffe17 	ldw	r2,-8(fp)
}
   155c0:	e037883a 	mov	sp,fp
   155c4:	df000017 	ldw	fp,0(sp)
   155c8:	dec00104 	addi	sp,sp,4
   155cc:	f800283a 	ret

000155d0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   155d0:	defffa04 	addi	sp,sp,-24
   155d4:	dfc00515 	stw	ra,20(sp)
   155d8:	df000415 	stw	fp,16(sp)
   155dc:	df000404 	addi	fp,sp,16
   155e0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   155e4:	e0bfff17 	ldw	r2,-4(fp)
   155e8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   155ec:	e0bfff17 	ldw	r2,-4(fp)
   155f0:	10800104 	addi	r2,r2,4
   155f4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   155f8:	0005303a 	rdctl	r2,status
   155fc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15600:	e0fffd17 	ldw	r3,-12(fp)
   15604:	00bfff84 	movi	r2,-2
   15608:	1884703a 	and	r2,r3,r2
   1560c:	1001703a 	wrctl	status,r2
  
  return context;
   15610:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   15614:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   15618:	00166d40 	call	166d4 <alt_tick>
   1561c:	e0bffe17 	ldw	r2,-8(fp)
   15620:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15624:	e0bffc17 	ldw	r2,-16(fp)
   15628:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1562c:	e037883a 	mov	sp,fp
   15630:	dfc00117 	ldw	ra,4(sp)
   15634:	df000017 	ldw	fp,0(sp)
   15638:	dec00204 	addi	sp,sp,8
   1563c:	f800283a 	ret

00015640 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   15640:	defff804 	addi	sp,sp,-32
   15644:	dfc00715 	stw	ra,28(sp)
   15648:	df000615 	stw	fp,24(sp)
   1564c:	df000604 	addi	fp,sp,24
   15650:	e13ffc15 	stw	r4,-16(fp)
   15654:	e17ffd15 	stw	r5,-12(fp)
   15658:	e1bffe15 	stw	r6,-8(fp)
   1565c:	e1ffff15 	stw	r7,-4(fp)
   15660:	e0bfff17 	ldw	r2,-4(fp)
   15664:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   15668:	00800074 	movhi	r2,1
   1566c:	109e4c04 	addi	r2,r2,31024
   15670:	10800017 	ldw	r2,0(r2)
   15674:	1004c03a 	cmpne	r2,r2,zero
   15678:	1000041e 	bne	r2,zero,1568c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   1567c:	00c00074 	movhi	r3,1
   15680:	18de4c04 	addi	r3,r3,31024
   15684:	e0bffb17 	ldw	r2,-20(fp)
   15688:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1568c:	e0bffc17 	ldw	r2,-16(fp)
   15690:	10800104 	addi	r2,r2,4
   15694:	1007883a 	mov	r3,r2
   15698:	008001c4 	movi	r2,7
   1569c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   156a0:	d8000015 	stw	zero,0(sp)
   156a4:	e13ffd17 	ldw	r4,-12(fp)
   156a8:	e17ffe17 	ldw	r5,-8(fp)
   156ac:	01800074 	movhi	r6,1
   156b0:	31957404 	addi	r6,r6,21968
   156b4:	e1fffc17 	ldw	r7,-16(fp)
   156b8:	0015ec40 	call	15ec4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   156bc:	e037883a 	mov	sp,fp
   156c0:	dfc00117 	ldw	ra,4(sp)
   156c4:	df000017 	ldw	fp,0(sp)
   156c8:	dec00204 	addi	sp,sp,8
   156cc:	f800283a 	ret

000156d0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   156d0:	defffa04 	addi	sp,sp,-24
   156d4:	dfc00515 	stw	ra,20(sp)
   156d8:	df000415 	stw	fp,16(sp)
   156dc:	df000404 	addi	fp,sp,16
   156e0:	e13ffd15 	stw	r4,-12(fp)
   156e4:	e17ffe15 	stw	r5,-8(fp)
   156e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   156ec:	e0bffd17 	ldw	r2,-12(fp)
   156f0:	10800017 	ldw	r2,0(r2)
   156f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
   156f8:	e0bffc17 	ldw	r2,-16(fp)
   156fc:	11000a04 	addi	r4,r2,40
   15700:	e0bffd17 	ldw	r2,-12(fp)
   15704:	11c00217 	ldw	r7,8(r2)
   15708:	e17ffe17 	ldw	r5,-8(fp)
   1570c:	e1bfff17 	ldw	r6,-4(fp)
   15710:	00157800 	call	15780 <altera_avalon_uart_read>
      fd->fd_flags);
}
   15714:	e037883a 	mov	sp,fp
   15718:	dfc00117 	ldw	ra,4(sp)
   1571c:	df000017 	ldw	fp,0(sp)
   15720:	dec00204 	addi	sp,sp,8
   15724:	f800283a 	ret

00015728 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   15728:	defffa04 	addi	sp,sp,-24
   1572c:	dfc00515 	stw	ra,20(sp)
   15730:	df000415 	stw	fp,16(sp)
   15734:	df000404 	addi	fp,sp,16
   15738:	e13ffd15 	stw	r4,-12(fp)
   1573c:	e17ffe15 	stw	r5,-8(fp)
   15740:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
   15744:	e0bffd17 	ldw	r2,-12(fp)
   15748:	10800017 	ldw	r2,0(r2)
   1574c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
   15750:	e0bffc17 	ldw	r2,-16(fp)
   15754:	11000a04 	addi	r4,r2,40
   15758:	e0bffd17 	ldw	r2,-12(fp)
   1575c:	11c00217 	ldw	r7,8(r2)
   15760:	e17ffe17 	ldw	r5,-8(fp)
   15764:	e1bfff17 	ldw	r6,-4(fp)
   15768:	00158b00 	call	158b0 <altera_avalon_uart_write>
      fd->fd_flags);
}
   1576c:	e037883a 	mov	sp,fp
   15770:	dfc00117 	ldw	ra,4(sp)
   15774:	df000017 	ldw	fp,0(sp)
   15778:	dec00204 	addi	sp,sp,8
   1577c:	f800283a 	ret

00015780 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
   15780:	defff704 	addi	sp,sp,-36
   15784:	dfc00815 	stw	ra,32(sp)
   15788:	df000715 	stw	fp,28(sp)
   1578c:	df000704 	addi	fp,sp,28
   15790:	e13ffb15 	stw	r4,-20(fp)
   15794:	e17ffc15 	stw	r5,-16(fp)
   15798:	e1bffd15 	stw	r6,-12(fp)
   1579c:	e1fffe15 	stw	r7,-8(fp)
  int block;
  unsigned int status;

  block = !(flags & O_NONBLOCK);
   157a0:	e0bffe17 	ldw	r2,-8(fp)
   157a4:	1090000c 	andi	r2,r2,16384
   157a8:	1005003a 	cmpeq	r2,r2,zero
   157ac:	e0bffa15 	stw	r2,-24(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   157b0:	e0bffb17 	ldw	r2,-20(fp)
   157b4:	10800017 	ldw	r2,0(r2)
   157b8:	10800204 	addi	r2,r2,8
   157bc:	10800037 	ldwio	r2,0(r2)
   157c0:	e0bff915 	stw	r2,-28(fp)

    /* clear any error flags */

    IOWR_ALTERA_AVALON_UART_STATUS(sp->base, 0);
   157c4:	e0bffb17 	ldw	r2,-20(fp)
   157c8:	10800017 	ldw	r2,0(r2)
   157cc:	10800204 	addi	r2,r2,8
   157d0:	10000035 	stwio	zero,0(r2)

    if (status & ALTERA_AVALON_UART_CONTROL_RRDY_MSK)
   157d4:	e0bff917 	ldw	r2,-28(fp)
   157d8:	1080200c 	andi	r2,r2,128
   157dc:	1005003a 	cmpeq	r2,r2,zero
   157e0:	10000d1e 	bne	r2,zero,15818 <altera_avalon_uart_read+0x98>
    {
      ptr[0] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
   157e4:	e0bffb17 	ldw	r2,-20(fp)
   157e8:	10800017 	ldw	r2,0(r2)
   157ec:	10800037 	ldwio	r2,0(r2)
   157f0:	1007883a 	mov	r3,r2
   157f4:	e0bffc17 	ldw	r2,-16(fp)
   157f8:	10c00005 	stb	r3,0(r2)

      if (!(status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
   157fc:	e0bff917 	ldw	r2,-28(fp)
   15800:	108000cc 	andi	r2,r2,3
   15804:	1004c03a 	cmpne	r2,r2,zero
   15808:	1000031e 	bne	r2,zero,15818 <altera_avalon_uart_read+0x98>
      ALTERA_AVALON_UART_STATUS_FE_MSK)))
      {
        return 1;
   1580c:	00800044 	movi	r2,1
   15810:	e0bfff15 	stw	r2,-4(fp)
   15814:	00000806 	br	15838 <altera_avalon_uart_read+0xb8>
      }
    }
  }
  while (block);
   15818:	e0bffa17 	ldw	r2,-24(fp)
   1581c:	1004c03a 	cmpne	r2,r2,zero
   15820:	103fe31e 	bne	r2,zero,157b0 <altera_avalon_uart_read+0x30>

  ALT_ERRNO = EWOULDBLOCK;
   15824:	00158500 	call	15850 <alt_get_errno>
   15828:	1007883a 	mov	r3,r2
   1582c:	008002c4 	movi	r2,11
   15830:	18800015 	stw	r2,0(r3)
 
  return 0;
   15834:	e03fff15 	stw	zero,-4(fp)
   15838:	e0bfff17 	ldw	r2,-4(fp)
}
   1583c:	e037883a 	mov	sp,fp
   15840:	dfc00117 	ldw	ra,4(sp)
   15844:	df000017 	ldw	fp,0(sp)
   15848:	dec00204 	addi	sp,sp,8
   1584c:	f800283a 	ret

00015850 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15850:	defffd04 	addi	sp,sp,-12
   15854:	dfc00215 	stw	ra,8(sp)
   15858:	df000115 	stw	fp,4(sp)
   1585c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   15860:	00800074 	movhi	r2,1
   15864:	109e2704 	addi	r2,r2,30876
   15868:	10800017 	ldw	r2,0(r2)
   1586c:	1005003a 	cmpeq	r2,r2,zero
   15870:	1000061e 	bne	r2,zero,1588c <alt_get_errno+0x3c>
   15874:	00800074 	movhi	r2,1
   15878:	109e2704 	addi	r2,r2,30876
   1587c:	10800017 	ldw	r2,0(r2)
   15880:	103ee83a 	callr	r2
   15884:	e0bfff15 	stw	r2,-4(fp)
   15888:	00000306 	br	15898 <alt_get_errno+0x48>
   1588c:	00800074 	movhi	r2,1
   15890:	109e4e04 	addi	r2,r2,31032
   15894:	e0bfff15 	stw	r2,-4(fp)
   15898:	e0bfff17 	ldw	r2,-4(fp)
}
   1589c:	e037883a 	mov	sp,fp
   158a0:	dfc00117 	ldw	ra,4(sp)
   158a4:	df000017 	ldw	fp,0(sp)
   158a8:	dec00204 	addi	sp,sp,8
   158ac:	f800283a 	ret

000158b0 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
   158b0:	defff704 	addi	sp,sp,-36
   158b4:	dfc00815 	stw	ra,32(sp)
   158b8:	df000715 	stw	fp,28(sp)
   158bc:	df000704 	addi	fp,sp,28
   158c0:	e13ffc15 	stw	r4,-16(fp)
   158c4:	e17ffd15 	stw	r5,-12(fp)
   158c8:	e1bffe15 	stw	r6,-8(fp)
   158cc:	e1ffff15 	stw	r7,-4(fp)
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
   158d0:	e0bfff17 	ldw	r2,-4(fp)
   158d4:	1090000c 	andi	r2,r2,16384
   158d8:	1005003a 	cmpeq	r2,r2,zero
   158dc:	e0bffb15 	stw	r2,-20(fp)
  count = len;
   158e0:	e0bffe17 	ldw	r2,-8(fp)
   158e4:	e0bff915 	stw	r2,-28(fp)

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   158e8:	e0bffc17 	ldw	r2,-16(fp)
   158ec:	10800017 	ldw	r2,0(r2)
   158f0:	10800204 	addi	r2,r2,8
   158f4:	10800037 	ldwio	r2,0(r2)
   158f8:	e0bffa15 	stw	r2,-24(fp)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
   158fc:	e0bffa17 	ldw	r2,-24(fp)
   15900:	1080100c 	andi	r2,r2,64
   15904:	1005003a 	cmpeq	r2,r2,zero
   15908:	1000101e 	bne	r2,zero,1594c <altera_avalon_uart_write+0x9c>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
   1590c:	e0bffc17 	ldw	r2,-16(fp)
   15910:	10800017 	ldw	r2,0(r2)
   15914:	11000104 	addi	r4,r2,4
   15918:	e0bffd17 	ldw	r2,-12(fp)
   1591c:	10800003 	ldbu	r2,0(r2)
   15920:	10c03fcc 	andi	r3,r2,255
   15924:	18c0201c 	xori	r3,r3,128
   15928:	18ffe004 	addi	r3,r3,-128
   1592c:	e0bffd17 	ldw	r2,-12(fp)
   15930:	10800044 	addi	r2,r2,1
   15934:	e0bffd15 	stw	r2,-12(fp)
   15938:	2005883a 	mov	r2,r4
   1593c:	10c00035 	stwio	r3,0(r2)
      count--;
   15940:	e0bff917 	ldw	r2,-28(fp)
   15944:	10bfffc4 	addi	r2,r2,-1
   15948:	e0bff915 	stw	r2,-28(fp)
    }
  }
  while (block && count);
   1594c:	e0bffb17 	ldw	r2,-20(fp)
   15950:	1005003a 	cmpeq	r2,r2,zero
   15954:	1000031e 	bne	r2,zero,15964 <altera_avalon_uart_write+0xb4>
   15958:	e0bff917 	ldw	r2,-28(fp)
   1595c:	1004c03a 	cmpne	r2,r2,zero
   15960:	103fe11e 	bne	r2,zero,158e8 <altera_avalon_uart_write+0x38>

  if (count)
   15964:	e0bff917 	ldw	r2,-28(fp)
   15968:	1005003a 	cmpeq	r2,r2,zero
   1596c:	1000041e 	bne	r2,zero,15980 <altera_avalon_uart_write+0xd0>
  {
    ALT_ERRNO = EWOULDBLOCK;
   15970:	00159a00 	call	159a0 <alt_get_errno>
   15974:	1007883a 	mov	r3,r2
   15978:	008002c4 	movi	r2,11
   1597c:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
   15980:	e0fffe17 	ldw	r3,-8(fp)
   15984:	e0bff917 	ldw	r2,-28(fp)
   15988:	1885c83a 	sub	r2,r3,r2
}
   1598c:	e037883a 	mov	sp,fp
   15990:	dfc00117 	ldw	ra,4(sp)
   15994:	df000017 	ldw	fp,0(sp)
   15998:	dec00204 	addi	sp,sp,8
   1599c:	f800283a 	ret

000159a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   159a0:	defffd04 	addi	sp,sp,-12
   159a4:	dfc00215 	stw	ra,8(sp)
   159a8:	df000115 	stw	fp,4(sp)
   159ac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   159b0:	00800074 	movhi	r2,1
   159b4:	109e2704 	addi	r2,r2,30876
   159b8:	10800017 	ldw	r2,0(r2)
   159bc:	1005003a 	cmpeq	r2,r2,zero
   159c0:	1000061e 	bne	r2,zero,159dc <alt_get_errno+0x3c>
   159c4:	00800074 	movhi	r2,1
   159c8:	109e2704 	addi	r2,r2,30876
   159cc:	10800017 	ldw	r2,0(r2)
   159d0:	103ee83a 	callr	r2
   159d4:	e0bfff15 	stw	r2,-4(fp)
   159d8:	00000306 	br	159e8 <alt_get_errno+0x48>
   159dc:	00800074 	movhi	r2,1
   159e0:	109e4e04 	addi	r2,r2,31032
   159e4:	e0bfff15 	stw	r2,-4(fp)
   159e8:	e0bfff17 	ldw	r2,-4(fp)
}
   159ec:	e037883a 	mov	sp,fp
   159f0:	dfc00117 	ldw	ra,4(sp)
   159f4:	df000017 	ldw	fp,0(sp)
   159f8:	dec00204 	addi	sp,sp,8
   159fc:	f800283a 	ret

00015a00 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   15a00:	defffa04 	addi	sp,sp,-24
   15a04:	dfc00515 	stw	ra,20(sp)
   15a08:	df000415 	stw	fp,16(sp)
   15a0c:	df000404 	addi	fp,sp,16
   15a10:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   15a14:	00800244 	movi	r2,9
   15a18:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   15a1c:	e13ffc17 	ldw	r4,-16(fp)
   15a20:	014003f4 	movhi	r5,15
   15a24:	29509004 	addi	r5,r5,16960
   15a28:	00147640 	call	14764 <__mulsi3>
   15a2c:	100b883a 	mov	r5,r2
   15a30:	0100bef4 	movhi	r4,763
   15a34:	213c2004 	addi	r4,r4,-3968
   15a38:	0016f7c0 	call	16f7c <__udivsi3>
   15a3c:	100b883a 	mov	r5,r2
   15a40:	01200034 	movhi	r4,32768
   15a44:	213fffc4 	addi	r4,r4,-1
   15a48:	0016f7c0 	call	16f7c <__udivsi3>
   15a4c:	100b883a 	mov	r5,r2
   15a50:	e13fff17 	ldw	r4,-4(fp)
   15a54:	0016f7c0 	call	16f7c <__udivsi3>
   15a58:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   15a5c:	e0bffd17 	ldw	r2,-12(fp)
   15a60:	1005003a 	cmpeq	r2,r2,zero
   15a64:	10002a1e 	bne	r2,zero,15b10 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
   15a68:	e03ffe15 	stw	zero,-8(fp)
   15a6c:	00001706 	br	15acc <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   15a70:	00a00034 	movhi	r2,32768
   15a74:	10bfffc4 	addi	r2,r2,-1
   15a78:	10bfffc4 	addi	r2,r2,-1
   15a7c:	103ffe1e 	bne	r2,zero,15a78 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   15a80:	e13ffc17 	ldw	r4,-16(fp)
   15a84:	014003f4 	movhi	r5,15
   15a88:	29509004 	addi	r5,r5,16960
   15a8c:	00147640 	call	14764 <__mulsi3>
   15a90:	100b883a 	mov	r5,r2
   15a94:	0100bef4 	movhi	r4,763
   15a98:	213c2004 	addi	r4,r4,-3968
   15a9c:	0016f7c0 	call	16f7c <__udivsi3>
   15aa0:	100b883a 	mov	r5,r2
   15aa4:	01200034 	movhi	r4,32768
   15aa8:	213fffc4 	addi	r4,r4,-1
   15aac:	0016f7c0 	call	16f7c <__udivsi3>
   15ab0:	1007883a 	mov	r3,r2
   15ab4:	e0bfff17 	ldw	r2,-4(fp)
   15ab8:	10c5c83a 	sub	r2,r2,r3
   15abc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   15ac0:	e0bffe17 	ldw	r2,-8(fp)
   15ac4:	10800044 	addi	r2,r2,1
   15ac8:	e0bffe15 	stw	r2,-8(fp)
   15acc:	e0fffe17 	ldw	r3,-8(fp)
   15ad0:	e0bffd17 	ldw	r2,-12(fp)
   15ad4:	18bfe616 	blt	r3,r2,15a70 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   15ad8:	e13ffc17 	ldw	r4,-16(fp)
   15adc:	014003f4 	movhi	r5,15
   15ae0:	29509004 	addi	r5,r5,16960
   15ae4:	00147640 	call	14764 <__mulsi3>
   15ae8:	100b883a 	mov	r5,r2
   15aec:	0100bef4 	movhi	r4,763
   15af0:	213c2004 	addi	r4,r4,-3968
   15af4:	0016f7c0 	call	16f7c <__udivsi3>
   15af8:	1009883a 	mov	r4,r2
   15afc:	e17fff17 	ldw	r5,-4(fp)
   15b00:	00147640 	call	14764 <__mulsi3>
   15b04:	10bfffc4 	addi	r2,r2,-1
   15b08:	103ffe1e 	bne	r2,zero,15b04 <alt_busy_sleep+0x104>
   15b0c:	00000d06 	br	15b44 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   15b10:	e13ffc17 	ldw	r4,-16(fp)
   15b14:	014003f4 	movhi	r5,15
   15b18:	29509004 	addi	r5,r5,16960
   15b1c:	00147640 	call	14764 <__mulsi3>
   15b20:	100b883a 	mov	r5,r2
   15b24:	0100bef4 	movhi	r4,763
   15b28:	213c2004 	addi	r4,r4,-3968
   15b2c:	0016f7c0 	call	16f7c <__udivsi3>
   15b30:	1009883a 	mov	r4,r2
   15b34:	e17fff17 	ldw	r5,-4(fp)
   15b38:	00147640 	call	14764 <__mulsi3>
   15b3c:	10bfffc4 	addi	r2,r2,-1
   15b40:	00bffe16 	blt	zero,r2,15b3c <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   15b44:	0005883a 	mov	r2,zero
}
   15b48:	e037883a 	mov	sp,fp
   15b4c:	dfc00117 	ldw	ra,4(sp)
   15b50:	df000017 	ldw	fp,0(sp)
   15b54:	dec00204 	addi	sp,sp,8
   15b58:	f800283a 	ret

00015b5c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   15b5c:	defff804 	addi	sp,sp,-32
   15b60:	dfc00715 	stw	ra,28(sp)
   15b64:	df000615 	stw	fp,24(sp)
   15b68:	df000604 	addi	fp,sp,24
   15b6c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   15b70:	e0bffc17 	ldw	r2,-16(fp)
   15b74:	1004803a 	cmplt	r2,r2,zero
   15b78:	1000091e 	bne	r2,zero,15ba0 <close+0x44>
   15b7c:	e13ffc17 	ldw	r4,-16(fp)
   15b80:	01400304 	movi	r5,12
   15b84:	00147640 	call	14764 <__mulsi3>
   15b88:	1007883a 	mov	r3,r2
   15b8c:	00800074 	movhi	r2,1
   15b90:	109d8704 	addi	r2,r2,30236
   15b94:	1887883a 	add	r3,r3,r2
   15b98:	e0ffff15 	stw	r3,-4(fp)
   15b9c:	00000106 	br	15ba4 <close+0x48>
   15ba0:	e03fff15 	stw	zero,-4(fp)
   15ba4:	e0bfff17 	ldw	r2,-4(fp)
   15ba8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   15bac:	e0bffb17 	ldw	r2,-20(fp)
   15bb0:	1005003a 	cmpeq	r2,r2,zero
   15bb4:	10001d1e 	bne	r2,zero,15c2c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   15bb8:	e0bffb17 	ldw	r2,-20(fp)
   15bbc:	10800017 	ldw	r2,0(r2)
   15bc0:	10800417 	ldw	r2,16(r2)
   15bc4:	1005003a 	cmpeq	r2,r2,zero
   15bc8:	1000071e 	bne	r2,zero,15be8 <close+0x8c>
   15bcc:	e0bffb17 	ldw	r2,-20(fp)
   15bd0:	10800017 	ldw	r2,0(r2)
   15bd4:	10800417 	ldw	r2,16(r2)
   15bd8:	e13ffb17 	ldw	r4,-20(fp)
   15bdc:	103ee83a 	callr	r2
   15be0:	e0bffe15 	stw	r2,-8(fp)
   15be4:	00000106 	br	15bec <close+0x90>
   15be8:	e03ffe15 	stw	zero,-8(fp)
   15bec:	e0bffe17 	ldw	r2,-8(fp)
   15bf0:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   15bf4:	e13ffc17 	ldw	r4,-16(fp)
   15bf8:	00165c40 	call	165c4 <alt_release_fd>
    if (rval < 0)
   15bfc:	e0bffa17 	ldw	r2,-24(fp)
   15c00:	1004403a 	cmpge	r2,r2,zero
   15c04:	1000071e 	bne	r2,zero,15c24 <close+0xc8>
    {
      ALT_ERRNO = -rval;
   15c08:	0015c5c0 	call	15c5c <alt_get_errno>
   15c0c:	e0fffa17 	ldw	r3,-24(fp)
   15c10:	00c7c83a 	sub	r3,zero,r3
   15c14:	10c00015 	stw	r3,0(r2)
      return -1;
   15c18:	00bfffc4 	movi	r2,-1
   15c1c:	e0bffd15 	stw	r2,-12(fp)
   15c20:	00000806 	br	15c44 <close+0xe8>
    }
    return 0;
   15c24:	e03ffd15 	stw	zero,-12(fp)
   15c28:	00000606 	br	15c44 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   15c2c:	0015c5c0 	call	15c5c <alt_get_errno>
   15c30:	1007883a 	mov	r3,r2
   15c34:	00801444 	movi	r2,81
   15c38:	18800015 	stw	r2,0(r3)
    return -1;
   15c3c:	00bfffc4 	movi	r2,-1
   15c40:	e0bffd15 	stw	r2,-12(fp)
   15c44:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   15c48:	e037883a 	mov	sp,fp
   15c4c:	dfc00117 	ldw	ra,4(sp)
   15c50:	df000017 	ldw	fp,0(sp)
   15c54:	dec00204 	addi	sp,sp,8
   15c58:	f800283a 	ret

00015c5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15c5c:	defffd04 	addi	sp,sp,-12
   15c60:	dfc00215 	stw	ra,8(sp)
   15c64:	df000115 	stw	fp,4(sp)
   15c68:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   15c6c:	00800074 	movhi	r2,1
   15c70:	109e2704 	addi	r2,r2,30876
   15c74:	10800017 	ldw	r2,0(r2)
   15c78:	1005003a 	cmpeq	r2,r2,zero
   15c7c:	1000061e 	bne	r2,zero,15c98 <alt_get_errno+0x3c>
   15c80:	00800074 	movhi	r2,1
   15c84:	109e2704 	addi	r2,r2,30876
   15c88:	10800017 	ldw	r2,0(r2)
   15c8c:	103ee83a 	callr	r2
   15c90:	e0bfff15 	stw	r2,-4(fp)
   15c94:	00000306 	br	15ca4 <alt_get_errno+0x48>
   15c98:	00800074 	movhi	r2,1
   15c9c:	109e4e04 	addi	r2,r2,31032
   15ca0:	e0bfff15 	stw	r2,-4(fp)
   15ca4:	e0bfff17 	ldw	r2,-4(fp)
}
   15ca8:	e037883a 	mov	sp,fp
   15cac:	dfc00117 	ldw	ra,4(sp)
   15cb0:	df000017 	ldw	fp,0(sp)
   15cb4:	dec00204 	addi	sp,sp,8
   15cb8:	f800283a 	ret

00015cbc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   15cbc:	defffc04 	addi	sp,sp,-16
   15cc0:	df000315 	stw	fp,12(sp)
   15cc4:	df000304 	addi	fp,sp,12
   15cc8:	e13ffd15 	stw	r4,-12(fp)
   15ccc:	e17ffe15 	stw	r5,-8(fp)
   15cd0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   15cd4:	e0bfff17 	ldw	r2,-4(fp)
}
   15cd8:	e037883a 	mov	sp,fp
   15cdc:	df000017 	ldw	fp,0(sp)
   15ce0:	dec00104 	addi	sp,sp,4
   15ce4:	f800283a 	ret

00015ce8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   15ce8:	defff904 	addi	sp,sp,-28
   15cec:	dfc00615 	stw	ra,24(sp)
   15cf0:	df000515 	stw	fp,20(sp)
   15cf4:	df000504 	addi	fp,sp,20
   15cf8:	e13ffd15 	stw	r4,-12(fp)
   15cfc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   15d00:	e0bffd17 	ldw	r2,-12(fp)
   15d04:	1005003a 	cmpeq	r2,r2,zero
   15d08:	1000041e 	bne	r2,zero,15d1c <alt_dev_llist_insert+0x34>
   15d0c:	e0bffd17 	ldw	r2,-12(fp)
   15d10:	10800217 	ldw	r2,8(r2)
   15d14:	1004c03a 	cmpne	r2,r2,zero
   15d18:	1000071e 	bne	r2,zero,15d38 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   15d1c:	0015d9c0 	call	15d9c <alt_get_errno>
   15d20:	1007883a 	mov	r3,r2
   15d24:	00800584 	movi	r2,22
   15d28:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   15d2c:	00bffa84 	movi	r2,-22
   15d30:	e0bfff15 	stw	r2,-4(fp)
   15d34:	00001306 	br	15d84 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   15d38:	e0fffd17 	ldw	r3,-12(fp)
   15d3c:	e0bffe17 	ldw	r2,-8(fp)
   15d40:	e0bffb15 	stw	r2,-20(fp)
   15d44:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   15d48:	e0fffc17 	ldw	r3,-16(fp)
   15d4c:	e0bffb17 	ldw	r2,-20(fp)
   15d50:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   15d54:	e0bffb17 	ldw	r2,-20(fp)
   15d58:	10c00017 	ldw	r3,0(r2)
   15d5c:	e0bffc17 	ldw	r2,-16(fp)
   15d60:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   15d64:	e0bffb17 	ldw	r2,-20(fp)
   15d68:	10c00017 	ldw	r3,0(r2)
   15d6c:	e0bffc17 	ldw	r2,-16(fp)
   15d70:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   15d74:	e0fffb17 	ldw	r3,-20(fp)
   15d78:	e0bffc17 	ldw	r2,-16(fp)
   15d7c:	18800015 	stw	r2,0(r3)

  return 0;  
   15d80:	e03fff15 	stw	zero,-4(fp)
   15d84:	e0bfff17 	ldw	r2,-4(fp)
}
   15d88:	e037883a 	mov	sp,fp
   15d8c:	dfc00117 	ldw	ra,4(sp)
   15d90:	df000017 	ldw	fp,0(sp)
   15d94:	dec00204 	addi	sp,sp,8
   15d98:	f800283a 	ret

00015d9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   15d9c:	defffd04 	addi	sp,sp,-12
   15da0:	dfc00215 	stw	ra,8(sp)
   15da4:	df000115 	stw	fp,4(sp)
   15da8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   15dac:	00800074 	movhi	r2,1
   15db0:	109e2704 	addi	r2,r2,30876
   15db4:	10800017 	ldw	r2,0(r2)
   15db8:	1005003a 	cmpeq	r2,r2,zero
   15dbc:	1000061e 	bne	r2,zero,15dd8 <alt_get_errno+0x3c>
   15dc0:	00800074 	movhi	r2,1
   15dc4:	109e2704 	addi	r2,r2,30876
   15dc8:	10800017 	ldw	r2,0(r2)
   15dcc:	103ee83a 	callr	r2
   15dd0:	e0bfff15 	stw	r2,-4(fp)
   15dd4:	00000306 	br	15de4 <alt_get_errno+0x48>
   15dd8:	00800074 	movhi	r2,1
   15ddc:	109e4e04 	addi	r2,r2,31032
   15de0:	e0bfff15 	stw	r2,-4(fp)
   15de4:	e0bfff17 	ldw	r2,-4(fp)
}
   15de8:	e037883a 	mov	sp,fp
   15dec:	dfc00117 	ldw	ra,4(sp)
   15df0:	df000017 	ldw	fp,0(sp)
   15df4:	dec00204 	addi	sp,sp,8
   15df8:	f800283a 	ret

00015dfc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   15dfc:	defffd04 	addi	sp,sp,-12
   15e00:	dfc00215 	stw	ra,8(sp)
   15e04:	df000115 	stw	fp,4(sp)
   15e08:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15e0c:	00bfff04 	movi	r2,-4
   15e10:	00c00074 	movhi	r3,1
   15e14:	18dbfc04 	addi	r3,r3,28656
   15e18:	1885883a 	add	r2,r3,r2
   15e1c:	e0bfff15 	stw	r2,-4(fp)
   15e20:	00000606 	br	15e3c <_do_ctors+0x40>
        (*ctor) (); 
   15e24:	e0bfff17 	ldw	r2,-4(fp)
   15e28:	10800017 	ldw	r2,0(r2)
   15e2c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   15e30:	e0bfff17 	ldw	r2,-4(fp)
   15e34:	10bfff04 	addi	r2,r2,-4
   15e38:	e0bfff15 	stw	r2,-4(fp)
   15e3c:	e0ffff17 	ldw	r3,-4(fp)
   15e40:	00800074 	movhi	r2,1
   15e44:	109bfb04 	addi	r2,r2,28652
   15e48:	18bff62e 	bgeu	r3,r2,15e24 <_do_ctors+0x28>
        (*ctor) (); 
}
   15e4c:	e037883a 	mov	sp,fp
   15e50:	dfc00117 	ldw	ra,4(sp)
   15e54:	df000017 	ldw	fp,0(sp)
   15e58:	dec00204 	addi	sp,sp,8
   15e5c:	f800283a 	ret

00015e60 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   15e60:	defffd04 	addi	sp,sp,-12
   15e64:	dfc00215 	stw	ra,8(sp)
   15e68:	df000115 	stw	fp,4(sp)
   15e6c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15e70:	00bfff04 	movi	r2,-4
   15e74:	00c00074 	movhi	r3,1
   15e78:	18dbfc04 	addi	r3,r3,28656
   15e7c:	1885883a 	add	r2,r3,r2
   15e80:	e0bfff15 	stw	r2,-4(fp)
   15e84:	00000606 	br	15ea0 <_do_dtors+0x40>
        (*dtor) (); 
   15e88:	e0bfff17 	ldw	r2,-4(fp)
   15e8c:	10800017 	ldw	r2,0(r2)
   15e90:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   15e94:	e0bfff17 	ldw	r2,-4(fp)
   15e98:	10bfff04 	addi	r2,r2,-4
   15e9c:	e0bfff15 	stw	r2,-4(fp)
   15ea0:	e0ffff17 	ldw	r3,-4(fp)
   15ea4:	00800074 	movhi	r2,1
   15ea8:	109bfc04 	addi	r2,r2,28656
   15eac:	18bff62e 	bgeu	r3,r2,15e88 <_do_dtors+0x28>
        (*dtor) (); 
}
   15eb0:	e037883a 	mov	sp,fp
   15eb4:	dfc00117 	ldw	ra,4(sp)
   15eb8:	df000017 	ldw	fp,0(sp)
   15ebc:	dec00204 	addi	sp,sp,8
   15ec0:	f800283a 	ret

00015ec4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   15ec4:	defff904 	addi	sp,sp,-28
   15ec8:	dfc00615 	stw	ra,24(sp)
   15ecc:	df000515 	stw	fp,20(sp)
   15ed0:	df000504 	addi	fp,sp,20
   15ed4:	e13ffc15 	stw	r4,-16(fp)
   15ed8:	e17ffd15 	stw	r5,-12(fp)
   15edc:	e1bffe15 	stw	r6,-8(fp)
   15ee0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   15ee4:	e0800217 	ldw	r2,8(fp)
   15ee8:	d8800015 	stw	r2,0(sp)
   15eec:	e13ffc17 	ldw	r4,-16(fp)
   15ef0:	e17ffd17 	ldw	r5,-12(fp)
   15ef4:	e1bffe17 	ldw	r6,-8(fp)
   15ef8:	e1ffff17 	ldw	r7,-4(fp)
   15efc:	00160980 	call	16098 <alt_iic_isr_register>
}  
   15f00:	e037883a 	mov	sp,fp
   15f04:	dfc00117 	ldw	ra,4(sp)
   15f08:	df000017 	ldw	fp,0(sp)
   15f0c:	dec00204 	addi	sp,sp,8
   15f10:	f800283a 	ret

00015f14 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   15f14:	defff904 	addi	sp,sp,-28
   15f18:	df000615 	stw	fp,24(sp)
   15f1c:	df000604 	addi	fp,sp,24
   15f20:	e13ffe15 	stw	r4,-8(fp)
   15f24:	e17fff15 	stw	r5,-4(fp)
   15f28:	e0bfff17 	ldw	r2,-4(fp)
   15f2c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15f30:	0005303a 	rdctl	r2,status
   15f34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15f38:	e0fffb17 	ldw	r3,-20(fp)
   15f3c:	00bfff84 	movi	r2,-2
   15f40:	1884703a 	and	r2,r3,r2
   15f44:	1001703a 	wrctl	status,r2
  
  return context;
   15f48:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15f4c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   15f50:	e0fffc17 	ldw	r3,-16(fp)
   15f54:	00800044 	movi	r2,1
   15f58:	10c4983a 	sll	r2,r2,r3
   15f5c:	1007883a 	mov	r3,r2
   15f60:	00800074 	movhi	r2,1
   15f64:	109e4804 	addi	r2,r2,31008
   15f68:	10800017 	ldw	r2,0(r2)
   15f6c:	1886b03a 	or	r3,r3,r2
   15f70:	00800074 	movhi	r2,1
   15f74:	109e4804 	addi	r2,r2,31008
   15f78:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   15f7c:	00800074 	movhi	r2,1
   15f80:	109e4804 	addi	r2,r2,31008
   15f84:	10800017 	ldw	r2,0(r2)
   15f88:	100170fa 	wrctl	ienable,r2
   15f8c:	e0bffd17 	ldw	r2,-12(fp)
   15f90:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f94:	e0bffa17 	ldw	r2,-24(fp)
   15f98:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   15f9c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   15fa0:	e037883a 	mov	sp,fp
   15fa4:	df000017 	ldw	fp,0(sp)
   15fa8:	dec00104 	addi	sp,sp,4
   15fac:	f800283a 	ret

00015fb0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   15fb0:	defff904 	addi	sp,sp,-28
   15fb4:	df000615 	stw	fp,24(sp)
   15fb8:	df000604 	addi	fp,sp,24
   15fbc:	e13ffe15 	stw	r4,-8(fp)
   15fc0:	e17fff15 	stw	r5,-4(fp)
   15fc4:	e0bfff17 	ldw	r2,-4(fp)
   15fc8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15fcc:	0005303a 	rdctl	r2,status
   15fd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15fd4:	e0fffb17 	ldw	r3,-20(fp)
   15fd8:	00bfff84 	movi	r2,-2
   15fdc:	1884703a 	and	r2,r3,r2
   15fe0:	1001703a 	wrctl	status,r2
  
  return context;
   15fe4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   15fe8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   15fec:	e0fffc17 	ldw	r3,-16(fp)
   15ff0:	00800044 	movi	r2,1
   15ff4:	10c4983a 	sll	r2,r2,r3
   15ff8:	0084303a 	nor	r2,zero,r2
   15ffc:	1007883a 	mov	r3,r2
   16000:	00800074 	movhi	r2,1
   16004:	109e4804 	addi	r2,r2,31008
   16008:	10800017 	ldw	r2,0(r2)
   1600c:	1886703a 	and	r3,r3,r2
   16010:	00800074 	movhi	r2,1
   16014:	109e4804 	addi	r2,r2,31008
   16018:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1601c:	00800074 	movhi	r2,1
   16020:	109e4804 	addi	r2,r2,31008
   16024:	10800017 	ldw	r2,0(r2)
   16028:	100170fa 	wrctl	ienable,r2
   1602c:	e0bffd17 	ldw	r2,-12(fp)
   16030:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16034:	e0bffa17 	ldw	r2,-24(fp)
   16038:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1603c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   16040:	e037883a 	mov	sp,fp
   16044:	df000017 	ldw	fp,0(sp)
   16048:	dec00104 	addi	sp,sp,4
   1604c:	f800283a 	ret

00016050 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   16050:	defffc04 	addi	sp,sp,-16
   16054:	df000315 	stw	fp,12(sp)
   16058:	df000304 	addi	fp,sp,12
   1605c:	e13ffe15 	stw	r4,-8(fp)
   16060:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   16064:	000530fa 	rdctl	r2,ienable
   16068:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1606c:	e0ffff17 	ldw	r3,-4(fp)
   16070:	00800044 	movi	r2,1
   16074:	10c4983a 	sll	r2,r2,r3
   16078:	1007883a 	mov	r3,r2
   1607c:	e0bffd17 	ldw	r2,-12(fp)
   16080:	1884703a 	and	r2,r3,r2
   16084:	1004c03a 	cmpne	r2,r2,zero
}
   16088:	e037883a 	mov	sp,fp
   1608c:	df000017 	ldw	fp,0(sp)
   16090:	dec00104 	addi	sp,sp,4
   16094:	f800283a 	ret

00016098 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   16098:	defff404 	addi	sp,sp,-48
   1609c:	dfc00b15 	stw	ra,44(sp)
   160a0:	df000a15 	stw	fp,40(sp)
   160a4:	df000a04 	addi	fp,sp,40
   160a8:	e13ffb15 	stw	r4,-20(fp)
   160ac:	e17ffc15 	stw	r5,-16(fp)
   160b0:	e1bffd15 	stw	r6,-12(fp)
   160b4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   160b8:	00bffa84 	movi	r2,-22
   160bc:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   160c0:	e0bffc17 	ldw	r2,-16(fp)
   160c4:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   160c8:	e0bff917 	ldw	r2,-28(fp)
   160cc:	10800808 	cmpgei	r2,r2,32
   160d0:	1000291e 	bne	r2,zero,16178 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   160d4:	0005303a 	rdctl	r2,status
   160d8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   160dc:	e0fff717 	ldw	r3,-36(fp)
   160e0:	00bfff84 	movi	r2,-2
   160e4:	1884703a 	and	r2,r3,r2
   160e8:	1001703a 	wrctl	status,r2
  
  return context;
   160ec:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   160f0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   160f4:	e0bff917 	ldw	r2,-28(fp)
   160f8:	00c00074 	movhi	r3,1
   160fc:	18de4f04 	addi	r3,r3,31036
   16100:	100490fa 	slli	r2,r2,3
   16104:	10c7883a 	add	r3,r2,r3
   16108:	e0bffd17 	ldw	r2,-12(fp)
   1610c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   16110:	e0bff917 	ldw	r2,-28(fp)
   16114:	00c00074 	movhi	r3,1
   16118:	18de4f04 	addi	r3,r3,31036
   1611c:	100490fa 	slli	r2,r2,3
   16120:	10c5883a 	add	r2,r2,r3
   16124:	10c00104 	addi	r3,r2,4
   16128:	e0bffe17 	ldw	r2,-8(fp)
   1612c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   16130:	e0bffd17 	ldw	r2,-12(fp)
   16134:	1005003a 	cmpeq	r2,r2,zero
   16138:	1000051e 	bne	r2,zero,16150 <alt_iic_isr_register+0xb8>
   1613c:	e17ff917 	ldw	r5,-28(fp)
   16140:	e13ffb17 	ldw	r4,-20(fp)
   16144:	0015f140 	call	15f14 <alt_ic_irq_enable>
   16148:	e0bfff15 	stw	r2,-4(fp)
   1614c:	00000406 	br	16160 <alt_iic_isr_register+0xc8>
   16150:	e17ff917 	ldw	r5,-28(fp)
   16154:	e13ffb17 	ldw	r4,-20(fp)
   16158:	0015fb00 	call	15fb0 <alt_ic_irq_disable>
   1615c:	e0bfff15 	stw	r2,-4(fp)
   16160:	e0bfff17 	ldw	r2,-4(fp)
   16164:	e0bffa15 	stw	r2,-24(fp)
   16168:	e0bff817 	ldw	r2,-32(fp)
   1616c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16170:	e0bff617 	ldw	r2,-40(fp)
   16174:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   16178:	e0bffa17 	ldw	r2,-24(fp)
}
   1617c:	e037883a 	mov	sp,fp
   16180:	dfc00117 	ldw	ra,4(sp)
   16184:	df000017 	ldw	fp,0(sp)
   16188:	dec00204 	addi	sp,sp,8
   1618c:	f800283a 	ret

00016190 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   16190:	defff804 	addi	sp,sp,-32
   16194:	dfc00715 	stw	ra,28(sp)
   16198:	df000615 	stw	fp,24(sp)
   1619c:	dc000515 	stw	r16,20(sp)
   161a0:	df000504 	addi	fp,sp,20
   161a4:	e13ffc15 	stw	r4,-16(fp)
   161a8:	e17ffd15 	stw	r5,-12(fp)
   161ac:	e1bffe15 	stw	r6,-8(fp)
   161b0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   161b4:	e13ffd17 	ldw	r4,-12(fp)
   161b8:	e17ffe17 	ldw	r5,-8(fp)
   161bc:	e1bfff17 	ldw	r6,-4(fp)
   161c0:	00163d80 	call	163d8 <open>
   161c4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   161c8:	e0bffb17 	ldw	r2,-20(fp)
   161cc:	1004803a 	cmplt	r2,r2,zero
   161d0:	10001f1e 	bne	r2,zero,16250 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
   161d4:	e13ffb17 	ldw	r4,-20(fp)
   161d8:	04000074 	movhi	r16,1
   161dc:	841d8704 	addi	r16,r16,30236
   161e0:	01400304 	movi	r5,12
   161e4:	00147640 	call	14764 <__mulsi3>
   161e8:	1405883a 	add	r2,r2,r16
   161ec:	10c00017 	ldw	r3,0(r2)
   161f0:	e0bffc17 	ldw	r2,-16(fp)
   161f4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   161f8:	e13ffb17 	ldw	r4,-20(fp)
   161fc:	04000074 	movhi	r16,1
   16200:	841d8704 	addi	r16,r16,30236
   16204:	01400304 	movi	r5,12
   16208:	00147640 	call	14764 <__mulsi3>
   1620c:	1405883a 	add	r2,r2,r16
   16210:	10800104 	addi	r2,r2,4
   16214:	10c00017 	ldw	r3,0(r2)
   16218:	e0bffc17 	ldw	r2,-16(fp)
   1621c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   16220:	e13ffb17 	ldw	r4,-20(fp)
   16224:	04000074 	movhi	r16,1
   16228:	841d8704 	addi	r16,r16,30236
   1622c:	01400304 	movi	r5,12
   16230:	00147640 	call	14764 <__mulsi3>
   16234:	1405883a 	add	r2,r2,r16
   16238:	10800204 	addi	r2,r2,8
   1623c:	10c00017 	ldw	r3,0(r2)
   16240:	e0bffc17 	ldw	r2,-16(fp)
   16244:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   16248:	e13ffb17 	ldw	r4,-20(fp)
   1624c:	00165c40 	call	165c4 <alt_release_fd>
  }
} 
   16250:	e037883a 	mov	sp,fp
   16254:	dfc00217 	ldw	ra,8(sp)
   16258:	df000117 	ldw	fp,4(sp)
   1625c:	dc000017 	ldw	r16,0(sp)
   16260:	dec00304 	addi	sp,sp,12
   16264:	f800283a 	ret

00016268 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   16268:	defffb04 	addi	sp,sp,-20
   1626c:	dfc00415 	stw	ra,16(sp)
   16270:	df000315 	stw	fp,12(sp)
   16274:	df000304 	addi	fp,sp,12
   16278:	e13ffd15 	stw	r4,-12(fp)
   1627c:	e17ffe15 	stw	r5,-8(fp)
   16280:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   16284:	01000074 	movhi	r4,1
   16288:	211d8a04 	addi	r4,r4,30248
   1628c:	e17ffd17 	ldw	r5,-12(fp)
   16290:	01800044 	movi	r6,1
   16294:	01c07fc4 	movi	r7,511
   16298:	00161900 	call	16190 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1629c:	01000074 	movhi	r4,1
   162a0:	211d8704 	addi	r4,r4,30236
   162a4:	e17ffe17 	ldw	r5,-8(fp)
   162a8:	000d883a 	mov	r6,zero
   162ac:	01c07fc4 	movi	r7,511
   162b0:	00161900 	call	16190 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   162b4:	01000074 	movhi	r4,1
   162b8:	211d8d04 	addi	r4,r4,30260
   162bc:	e17fff17 	ldw	r5,-4(fp)
   162c0:	01800044 	movi	r6,1
   162c4:	01c07fc4 	movi	r7,511
   162c8:	00161900 	call	16190 <alt_open_fd>
}  
   162cc:	e037883a 	mov	sp,fp
   162d0:	dfc00117 	ldw	ra,4(sp)
   162d4:	df000017 	ldw	fp,0(sp)
   162d8:	dec00204 	addi	sp,sp,8
   162dc:	f800283a 	ret

000162e0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   162e0:	defffa04 	addi	sp,sp,-24
   162e4:	dfc00515 	stw	ra,20(sp)
   162e8:	df000415 	stw	fp,16(sp)
   162ec:	dc000315 	stw	r16,12(sp)
   162f0:	df000304 	addi	fp,sp,12
   162f4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   162f8:	e0bffe17 	ldw	r2,-8(fp)
   162fc:	10800217 	ldw	r2,8(r2)
   16300:	10d00034 	orhi	r3,r2,16384
   16304:	e0bffe17 	ldw	r2,-8(fp)
   16308:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1630c:	e03ffd15 	stw	zero,-12(fp)
   16310:	00002306 	br	163a0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   16314:	e13ffd17 	ldw	r4,-12(fp)
   16318:	04000074 	movhi	r16,1
   1631c:	841d8704 	addi	r16,r16,30236
   16320:	01400304 	movi	r5,12
   16324:	00147640 	call	14764 <__mulsi3>
   16328:	1405883a 	add	r2,r2,r16
   1632c:	10c00017 	ldw	r3,0(r2)
   16330:	e0bffe17 	ldw	r2,-8(fp)
   16334:	10800017 	ldw	r2,0(r2)
   16338:	1880161e 	bne	r3,r2,16394 <alt_file_locked+0xb4>
   1633c:	e13ffd17 	ldw	r4,-12(fp)
   16340:	04000074 	movhi	r16,1
   16344:	841d8704 	addi	r16,r16,30236
   16348:	01400304 	movi	r5,12
   1634c:	00147640 	call	14764 <__mulsi3>
   16350:	1405883a 	add	r2,r2,r16
   16354:	10800204 	addi	r2,r2,8
   16358:	10800017 	ldw	r2,0(r2)
   1635c:	1004403a 	cmpge	r2,r2,zero
   16360:	10000c1e 	bne	r2,zero,16394 <alt_file_locked+0xb4>
   16364:	e13ffd17 	ldw	r4,-12(fp)
   16368:	01400304 	movi	r5,12
   1636c:	00147640 	call	14764 <__mulsi3>
   16370:	1007883a 	mov	r3,r2
   16374:	00800074 	movhi	r2,1
   16378:	109d8704 	addi	r2,r2,30236
   1637c:	1887883a 	add	r3,r3,r2
   16380:	e0bffe17 	ldw	r2,-8(fp)
   16384:	18800326 	beq	r3,r2,16394 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   16388:	00bffcc4 	movi	r2,-13
   1638c:	e0bfff15 	stw	r2,-4(fp)
   16390:	00000a06 	br	163bc <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   16394:	e0bffd17 	ldw	r2,-12(fp)
   16398:	10800044 	addi	r2,r2,1
   1639c:	e0bffd15 	stw	r2,-12(fp)
   163a0:	00800074 	movhi	r2,1
   163a4:	109e2604 	addi	r2,r2,30872
   163a8:	10800017 	ldw	r2,0(r2)
   163ac:	1007883a 	mov	r3,r2
   163b0:	e0bffd17 	ldw	r2,-12(fp)
   163b4:	18bfd72e 	bgeu	r3,r2,16314 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   163b8:	e03fff15 	stw	zero,-4(fp)
   163bc:	e0bfff17 	ldw	r2,-4(fp)
}
   163c0:	e037883a 	mov	sp,fp
   163c4:	dfc00217 	ldw	ra,8(sp)
   163c8:	df000117 	ldw	fp,4(sp)
   163cc:	dc000017 	ldw	r16,0(sp)
   163d0:	dec00304 	addi	sp,sp,12
   163d4:	f800283a 	ret

000163d8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   163d8:	defff404 	addi	sp,sp,-48
   163dc:	dfc00b15 	stw	ra,44(sp)
   163e0:	df000a15 	stw	fp,40(sp)
   163e4:	df000a04 	addi	fp,sp,40
   163e8:	e13ffb15 	stw	r4,-20(fp)
   163ec:	e17ffc15 	stw	r5,-16(fp)
   163f0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   163f4:	00bfffc4 	movi	r2,-1
   163f8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   163fc:	00bffb44 	movi	r2,-19
   16400:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   16404:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   16408:	e13ffb17 	ldw	r4,-20(fp)
   1640c:	01400074 	movhi	r5,1
   16410:	295e2404 	addi	r5,r5,30864
   16414:	00168000 	call	16800 <alt_find_dev>
   16418:	e0bffa15 	stw	r2,-24(fp)
   1641c:	e0bffa17 	ldw	r2,-24(fp)
   16420:	1004c03a 	cmpne	r2,r2,zero
   16424:	1000051e 	bne	r2,zero,1643c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   16428:	e13ffb17 	ldw	r4,-20(fp)
   1642c:	00168940 	call	16894 <alt_find_file>
   16430:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   16434:	00800044 	movi	r2,1
   16438:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1643c:	e0bffa17 	ldw	r2,-24(fp)
   16440:	1005003a 	cmpeq	r2,r2,zero
   16444:	1000311e 	bne	r2,zero,1650c <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
   16448:	e13ffa17 	ldw	r4,-24(fp)
   1644c:	00169b40 	call	169b4 <alt_get_fd>
   16450:	e0bff815 	stw	r2,-32(fp)
   16454:	e0bff817 	ldw	r2,-32(fp)
   16458:	1004403a 	cmpge	r2,r2,zero
   1645c:	1000031e 	bne	r2,zero,1646c <open+0x94>
    {
      status = index;
   16460:	e0bff817 	ldw	r2,-32(fp)
   16464:	e0bff715 	stw	r2,-36(fp)
   16468:	00002a06 	br	16514 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
   1646c:	e13ff817 	ldw	r4,-32(fp)
   16470:	01400304 	movi	r5,12
   16474:	00147640 	call	14764 <__mulsi3>
   16478:	1007883a 	mov	r3,r2
   1647c:	00800074 	movhi	r2,1
   16480:	109d8704 	addi	r2,r2,30236
   16484:	1885883a 	add	r2,r3,r2
   16488:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1648c:	e0fffc17 	ldw	r3,-16(fp)
   16490:	00900034 	movhi	r2,16384
   16494:	10bfffc4 	addi	r2,r2,-1
   16498:	1886703a 	and	r3,r3,r2
   1649c:	e0bff917 	ldw	r2,-28(fp)
   164a0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   164a4:	e0bff617 	ldw	r2,-40(fp)
   164a8:	1004c03a 	cmpne	r2,r2,zero
   164ac:	1000061e 	bne	r2,zero,164c8 <open+0xf0>
   164b0:	e13ff917 	ldw	r4,-28(fp)
   164b4:	00162e00 	call	162e0 <alt_file_locked>
   164b8:	e0bff715 	stw	r2,-36(fp)
   164bc:	e0bff717 	ldw	r2,-36(fp)
   164c0:	1004803a 	cmplt	r2,r2,zero
   164c4:	1000131e 	bne	r2,zero,16514 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   164c8:	e0bffa17 	ldw	r2,-24(fp)
   164cc:	10800317 	ldw	r2,12(r2)
   164d0:	1005003a 	cmpeq	r2,r2,zero
   164d4:	1000091e 	bne	r2,zero,164fc <open+0x124>
   164d8:	e0bffa17 	ldw	r2,-24(fp)
   164dc:	10800317 	ldw	r2,12(r2)
   164e0:	e13ff917 	ldw	r4,-28(fp)
   164e4:	e17ffb17 	ldw	r5,-20(fp)
   164e8:	e1bffc17 	ldw	r6,-16(fp)
   164ec:	e1fffd17 	ldw	r7,-12(fp)
   164f0:	103ee83a 	callr	r2
   164f4:	e0bfff15 	stw	r2,-4(fp)
   164f8:	00000106 	br	16500 <open+0x128>
   164fc:	e03fff15 	stw	zero,-4(fp)
   16500:	e0bfff17 	ldw	r2,-4(fp)
   16504:	e0bff715 	stw	r2,-36(fp)
   16508:	00000206 	br	16514 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1650c:	00bffb44 	movi	r2,-19
   16510:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   16514:	e0bff717 	ldw	r2,-36(fp)
   16518:	1004403a 	cmpge	r2,r2,zero
   1651c:	1000091e 	bne	r2,zero,16544 <open+0x16c>
  {
    alt_release_fd (index);  
   16520:	e13ff817 	ldw	r4,-32(fp)
   16524:	00165c40 	call	165c4 <alt_release_fd>
    ALT_ERRNO = -status;
   16528:	00165640 	call	16564 <alt_get_errno>
   1652c:	e0fff717 	ldw	r3,-36(fp)
   16530:	00c7c83a 	sub	r3,zero,r3
   16534:	10c00015 	stw	r3,0(r2)
    return -1;
   16538:	00bfffc4 	movi	r2,-1
   1653c:	e0bffe15 	stw	r2,-8(fp)
   16540:	00000206 	br	1654c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
   16544:	e0bff817 	ldw	r2,-32(fp)
   16548:	e0bffe15 	stw	r2,-8(fp)
   1654c:	e0bffe17 	ldw	r2,-8(fp)
}
   16550:	e037883a 	mov	sp,fp
   16554:	dfc00117 	ldw	ra,4(sp)
   16558:	df000017 	ldw	fp,0(sp)
   1655c:	dec00204 	addi	sp,sp,8
   16560:	f800283a 	ret

00016564 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   16564:	defffd04 	addi	sp,sp,-12
   16568:	dfc00215 	stw	ra,8(sp)
   1656c:	df000115 	stw	fp,4(sp)
   16570:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   16574:	00800074 	movhi	r2,1
   16578:	109e2704 	addi	r2,r2,30876
   1657c:	10800017 	ldw	r2,0(r2)
   16580:	1005003a 	cmpeq	r2,r2,zero
   16584:	1000061e 	bne	r2,zero,165a0 <alt_get_errno+0x3c>
   16588:	00800074 	movhi	r2,1
   1658c:	109e2704 	addi	r2,r2,30876
   16590:	10800017 	ldw	r2,0(r2)
   16594:	103ee83a 	callr	r2
   16598:	e0bfff15 	stw	r2,-4(fp)
   1659c:	00000306 	br	165ac <alt_get_errno+0x48>
   165a0:	00800074 	movhi	r2,1
   165a4:	109e4e04 	addi	r2,r2,31032
   165a8:	e0bfff15 	stw	r2,-4(fp)
   165ac:	e0bfff17 	ldw	r2,-4(fp)
}
   165b0:	e037883a 	mov	sp,fp
   165b4:	dfc00117 	ldw	ra,4(sp)
   165b8:	df000017 	ldw	fp,0(sp)
   165bc:	dec00204 	addi	sp,sp,8
   165c0:	f800283a 	ret

000165c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   165c4:	defffc04 	addi	sp,sp,-16
   165c8:	dfc00315 	stw	ra,12(sp)
   165cc:	df000215 	stw	fp,8(sp)
   165d0:	dc000115 	stw	r16,4(sp)
   165d4:	df000104 	addi	fp,sp,4
   165d8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   165dc:	e0bfff17 	ldw	r2,-4(fp)
   165e0:	108000d0 	cmplti	r2,r2,3
   165e4:	10000f1e 	bne	r2,zero,16624 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
   165e8:	e13fff17 	ldw	r4,-4(fp)
   165ec:	04000074 	movhi	r16,1
   165f0:	841d8704 	addi	r16,r16,30236
   165f4:	01400304 	movi	r5,12
   165f8:	00147640 	call	14764 <__mulsi3>
   165fc:	1405883a 	add	r2,r2,r16
   16600:	10800204 	addi	r2,r2,8
   16604:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   16608:	e13fff17 	ldw	r4,-4(fp)
   1660c:	04000074 	movhi	r16,1
   16610:	841d8704 	addi	r16,r16,30236
   16614:	01400304 	movi	r5,12
   16618:	00147640 	call	14764 <__mulsi3>
   1661c:	1405883a 	add	r2,r2,r16
   16620:	10000015 	stw	zero,0(r2)
  }
}
   16624:	e037883a 	mov	sp,fp
   16628:	dfc00217 	ldw	ra,8(sp)
   1662c:	df000117 	ldw	fp,4(sp)
   16630:	dc000017 	ldw	r16,0(sp)
   16634:	dec00304 	addi	sp,sp,12
   16638:	f800283a 	ret

0001663c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1663c:	defffa04 	addi	sp,sp,-24
   16640:	df000515 	stw	fp,20(sp)
   16644:	df000504 	addi	fp,sp,20
   16648:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1664c:	0005303a 	rdctl	r2,status
   16650:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16654:	e0fffd17 	ldw	r3,-12(fp)
   16658:	00bfff84 	movi	r2,-2
   1665c:	1884703a 	and	r2,r3,r2
   16660:	1001703a 	wrctl	status,r2
  
  return context;
   16664:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   16668:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   1666c:	e0bfff17 	ldw	r2,-4(fp)
   16670:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   16674:	e0bffc17 	ldw	r2,-16(fp)
   16678:	10c00017 	ldw	r3,0(r2)
   1667c:	e0bffc17 	ldw	r2,-16(fp)
   16680:	10800117 	ldw	r2,4(r2)
   16684:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   16688:	e0bffc17 	ldw	r2,-16(fp)
   1668c:	10c00117 	ldw	r3,4(r2)
   16690:	e0bffc17 	ldw	r2,-16(fp)
   16694:	10800017 	ldw	r2,0(r2)
   16698:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1669c:	e0fffc17 	ldw	r3,-16(fp)
   166a0:	e0bffc17 	ldw	r2,-16(fp)
   166a4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   166a8:	e0fffc17 	ldw	r3,-16(fp)
   166ac:	e0bffc17 	ldw	r2,-16(fp)
   166b0:	18800015 	stw	r2,0(r3)
   166b4:	e0bffe17 	ldw	r2,-8(fp)
   166b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   166bc:	e0bffb17 	ldw	r2,-20(fp)
   166c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   166c4:	e037883a 	mov	sp,fp
   166c8:	df000017 	ldw	fp,0(sp)
   166cc:	dec00104 	addi	sp,sp,4
   166d0:	f800283a 	ret

000166d4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   166d4:	defffb04 	addi	sp,sp,-20
   166d8:	dfc00415 	stw	ra,16(sp)
   166dc:	df000315 	stw	fp,12(sp)
   166e0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   166e4:	d0a00917 	ldw	r2,-32732(gp)
   166e8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   166ec:	d0a02e17 	ldw	r2,-32584(gp)
   166f0:	10800044 	addi	r2,r2,1
   166f4:	d0a02e15 	stw	r2,-32584(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   166f8:	00003106 	br	167c0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   166fc:	e0bffe17 	ldw	r2,-8(fp)
   16700:	10800017 	ldw	r2,0(r2)
   16704:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   16708:	e0bffe17 	ldw	r2,-8(fp)
   1670c:	10800403 	ldbu	r2,16(r2)
   16710:	10803fcc 	andi	r2,r2,255
   16714:	1005003a 	cmpeq	r2,r2,zero
   16718:	1000051e 	bne	r2,zero,16730 <alt_tick+0x5c>
   1671c:	d0a02e17 	ldw	r2,-32584(gp)
   16720:	1004c03a 	cmpne	r2,r2,zero
   16724:	1000021e 	bne	r2,zero,16730 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   16728:	e0bffe17 	ldw	r2,-8(fp)
   1672c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   16730:	e0bffe17 	ldw	r2,-8(fp)
   16734:	10c00217 	ldw	r3,8(r2)
   16738:	d0a02e17 	ldw	r2,-32584(gp)
   1673c:	10c01e36 	bltu	r2,r3,167b8 <alt_tick+0xe4>
   16740:	e0bffe17 	ldw	r2,-8(fp)
   16744:	10800403 	ldbu	r2,16(r2)
   16748:	10803fcc 	andi	r2,r2,255
   1674c:	1004c03a 	cmpne	r2,r2,zero
   16750:	1000191e 	bne	r2,zero,167b8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   16754:	e0bffe17 	ldw	r2,-8(fp)
   16758:	10c00317 	ldw	r3,12(r2)
   1675c:	e0bffe17 	ldw	r2,-8(fp)
   16760:	11000517 	ldw	r4,20(r2)
   16764:	183ee83a 	callr	r3
   16768:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1676c:	e0bffd17 	ldw	r2,-12(fp)
   16770:	1004c03a 	cmpne	r2,r2,zero
   16774:	1000031e 	bne	r2,zero,16784 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   16778:	e13ffe17 	ldw	r4,-8(fp)
   1677c:	001663c0 	call	1663c <alt_alarm_stop>
   16780:	00000d06 	br	167b8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   16784:	e0bffe17 	ldw	r2,-8(fp)
   16788:	10c00217 	ldw	r3,8(r2)
   1678c:	e0bffd17 	ldw	r2,-12(fp)
   16790:	1887883a 	add	r3,r3,r2
   16794:	e0bffe17 	ldw	r2,-8(fp)
   16798:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1679c:	e0bffe17 	ldw	r2,-8(fp)
   167a0:	10c00217 	ldw	r3,8(r2)
   167a4:	d0a02e17 	ldw	r2,-32584(gp)
   167a8:	1880032e 	bgeu	r3,r2,167b8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   167ac:	e0fffe17 	ldw	r3,-8(fp)
   167b0:	00800044 	movi	r2,1
   167b4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   167b8:	e0bfff17 	ldw	r2,-4(fp)
   167bc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   167c0:	d0e00904 	addi	r3,gp,-32732
   167c4:	e0bffe17 	ldw	r2,-8(fp)
   167c8:	10ffcc1e 	bne	r2,r3,166fc <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   167cc:	e037883a 	mov	sp,fp
   167d0:	dfc00117 	ldw	ra,4(sp)
   167d4:	df000017 	ldw	fp,0(sp)
   167d8:	dec00204 	addi	sp,sp,8
   167dc:	f800283a 	ret

000167e0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   167e0:	deffff04 	addi	sp,sp,-4
   167e4:	df000015 	stw	fp,0(sp)
   167e8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   167ec:	000170fa 	wrctl	ienable,zero
}
   167f0:	e037883a 	mov	sp,fp
   167f4:	df000017 	ldw	fp,0(sp)
   167f8:	dec00104 	addi	sp,sp,4
   167fc:	f800283a 	ret

00016800 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   16800:	defff904 	addi	sp,sp,-28
   16804:	dfc00615 	stw	ra,24(sp)
   16808:	df000515 	stw	fp,20(sp)
   1680c:	df000504 	addi	fp,sp,20
   16810:	e13ffd15 	stw	r4,-12(fp)
   16814:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   16818:	e0bffe17 	ldw	r2,-8(fp)
   1681c:	10800017 	ldw	r2,0(r2)
   16820:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   16824:	e13ffd17 	ldw	r4,-12(fp)
   16828:	0016af40 	call	16af4 <strlen>
   1682c:	10800044 	addi	r2,r2,1
   16830:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   16834:	00000d06 	br	1686c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   16838:	e0bffc17 	ldw	r2,-16(fp)
   1683c:	11000217 	ldw	r4,8(r2)
   16840:	e1bffb17 	ldw	r6,-20(fp)
   16844:	e17ffd17 	ldw	r5,-12(fp)
   16848:	0016ab80 	call	16ab8 <memcmp>
   1684c:	1004c03a 	cmpne	r2,r2,zero
   16850:	1000031e 	bne	r2,zero,16860 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   16854:	e0bffc17 	ldw	r2,-16(fp)
   16858:	e0bfff15 	stw	r2,-4(fp)
   1685c:	00000706 	br	1687c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   16860:	e0bffc17 	ldw	r2,-16(fp)
   16864:	10800017 	ldw	r2,0(r2)
   16868:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1686c:	e0fffe17 	ldw	r3,-8(fp)
   16870:	e0bffc17 	ldw	r2,-16(fp)
   16874:	10fff01e 	bne	r2,r3,16838 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   16878:	e03fff15 	stw	zero,-4(fp)
   1687c:	e0bfff17 	ldw	r2,-4(fp)
}
   16880:	e037883a 	mov	sp,fp
   16884:	dfc00117 	ldw	ra,4(sp)
   16888:	df000017 	ldw	fp,0(sp)
   1688c:	dec00204 	addi	sp,sp,8
   16890:	f800283a 	ret

00016894 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   16894:	defffa04 	addi	sp,sp,-24
   16898:	dfc00515 	stw	ra,20(sp)
   1689c:	df000415 	stw	fp,16(sp)
   168a0:	df000404 	addi	fp,sp,16
   168a4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   168a8:	00800074 	movhi	r2,1
   168ac:	109e2204 	addi	r2,r2,30856
   168b0:	10800017 	ldw	r2,0(r2)
   168b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   168b8:	00003306 	br	16988 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   168bc:	e0bffd17 	ldw	r2,-12(fp)
   168c0:	11000217 	ldw	r4,8(r2)
   168c4:	0016af40 	call	16af4 <strlen>
   168c8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   168cc:	e0bffd17 	ldw	r2,-12(fp)
   168d0:	10c00217 	ldw	r3,8(r2)
   168d4:	e0bffc17 	ldw	r2,-16(fp)
   168d8:	1885883a 	add	r2,r3,r2
   168dc:	10bfffc4 	addi	r2,r2,-1
   168e0:	10800003 	ldbu	r2,0(r2)
   168e4:	10803fcc 	andi	r2,r2,255
   168e8:	1080201c 	xori	r2,r2,128
   168ec:	10bfe004 	addi	r2,r2,-128
   168f0:	10800bd8 	cmpnei	r2,r2,47
   168f4:	1000031e 	bne	r2,zero,16904 <alt_find_file+0x70>
    {
      len -= 1;
   168f8:	e0bffc17 	ldw	r2,-16(fp)
   168fc:	10bfffc4 	addi	r2,r2,-1
   16900:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   16904:	e0bffc17 	ldw	r2,-16(fp)
   16908:	1007883a 	mov	r3,r2
   1690c:	e0bffe17 	ldw	r2,-8(fp)
   16910:	1885883a 	add	r2,r3,r2
   16914:	10800003 	ldbu	r2,0(r2)
   16918:	10803fcc 	andi	r2,r2,255
   1691c:	1080201c 	xori	r2,r2,128
   16920:	10bfe004 	addi	r2,r2,-128
   16924:	10800be0 	cmpeqi	r2,r2,47
   16928:	10000a1e 	bne	r2,zero,16954 <alt_find_file+0xc0>
   1692c:	e0bffc17 	ldw	r2,-16(fp)
   16930:	1007883a 	mov	r3,r2
   16934:	e0bffe17 	ldw	r2,-8(fp)
   16938:	1885883a 	add	r2,r3,r2
   1693c:	10800003 	ldbu	r2,0(r2)
   16940:	10803fcc 	andi	r2,r2,255
   16944:	1080201c 	xori	r2,r2,128
   16948:	10bfe004 	addi	r2,r2,-128
   1694c:	1004c03a 	cmpne	r2,r2,zero
   16950:	10000a1e 	bne	r2,zero,1697c <alt_find_file+0xe8>
   16954:	e0bffd17 	ldw	r2,-12(fp)
   16958:	11000217 	ldw	r4,8(r2)
   1695c:	e1bffc17 	ldw	r6,-16(fp)
   16960:	e17ffe17 	ldw	r5,-8(fp)
   16964:	0016ab80 	call	16ab8 <memcmp>
   16968:	1004c03a 	cmpne	r2,r2,zero
   1696c:	1000031e 	bne	r2,zero,1697c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   16970:	e0bffd17 	ldw	r2,-12(fp)
   16974:	e0bfff15 	stw	r2,-4(fp)
   16978:	00000806 	br	1699c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   1697c:	e0bffd17 	ldw	r2,-12(fp)
   16980:	10800017 	ldw	r2,0(r2)
   16984:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   16988:	00c00074 	movhi	r3,1
   1698c:	18de2204 	addi	r3,r3,30856
   16990:	e0bffd17 	ldw	r2,-12(fp)
   16994:	10ffc91e 	bne	r2,r3,168bc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   16998:	e03fff15 	stw	zero,-4(fp)
   1699c:	e0bfff17 	ldw	r2,-4(fp)
}
   169a0:	e037883a 	mov	sp,fp
   169a4:	dfc00117 	ldw	ra,4(sp)
   169a8:	df000017 	ldw	fp,0(sp)
   169ac:	dec00204 	addi	sp,sp,8
   169b0:	f800283a 	ret

000169b4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   169b4:	defffa04 	addi	sp,sp,-24
   169b8:	dfc00515 	stw	ra,20(sp)
   169bc:	df000415 	stw	fp,16(sp)
   169c0:	dc000315 	stw	r16,12(sp)
   169c4:	df000304 	addi	fp,sp,12
   169c8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   169cc:	00bffa04 	movi	r2,-24
   169d0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   169d4:	e03ffe15 	stw	zero,-8(fp)
   169d8:	00002006 	br	16a5c <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
   169dc:	e13ffe17 	ldw	r4,-8(fp)
   169e0:	04000074 	movhi	r16,1
   169e4:	841d8704 	addi	r16,r16,30236
   169e8:	01400304 	movi	r5,12
   169ec:	00147640 	call	14764 <__mulsi3>
   169f0:	1405883a 	add	r2,r2,r16
   169f4:	10800017 	ldw	r2,0(r2)
   169f8:	1004c03a 	cmpne	r2,r2,zero
   169fc:	1000141e 	bne	r2,zero,16a50 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
   16a00:	e13ffe17 	ldw	r4,-8(fp)
   16a04:	04000074 	movhi	r16,1
   16a08:	841d8704 	addi	r16,r16,30236
   16a0c:	01400304 	movi	r5,12
   16a10:	00147640 	call	14764 <__mulsi3>
   16a14:	1407883a 	add	r3,r2,r16
   16a18:	e0bfff17 	ldw	r2,-4(fp)
   16a1c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   16a20:	00800074 	movhi	r2,1
   16a24:	109e2604 	addi	r2,r2,30872
   16a28:	10c00017 	ldw	r3,0(r2)
   16a2c:	e0bffe17 	ldw	r2,-8(fp)
   16a30:	1880040e 	bge	r3,r2,16a44 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
   16a34:	00c00074 	movhi	r3,1
   16a38:	18de2604 	addi	r3,r3,30872
   16a3c:	e0bffe17 	ldw	r2,-8(fp)
   16a40:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   16a44:	e0bffe17 	ldw	r2,-8(fp)
   16a48:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   16a4c:	00000606 	br	16a68 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   16a50:	e0bffe17 	ldw	r2,-8(fp)
   16a54:	10800044 	addi	r2,r2,1
   16a58:	e0bffe15 	stw	r2,-8(fp)
   16a5c:	e0bffe17 	ldw	r2,-8(fp)
   16a60:	10800810 	cmplti	r2,r2,32
   16a64:	103fdd1e 	bne	r2,zero,169dc <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   16a68:	e0bffd17 	ldw	r2,-12(fp)
}
   16a6c:	e037883a 	mov	sp,fp
   16a70:	dfc00217 	ldw	ra,8(sp)
   16a74:	df000117 	ldw	fp,4(sp)
   16a78:	dc000017 	ldw	r16,0(sp)
   16a7c:	dec00304 	addi	sp,sp,12
   16a80:	f800283a 	ret

00016a84 <atexit>:
   16a84:	200b883a 	mov	r5,r4
   16a88:	000d883a 	mov	r6,zero
   16a8c:	0009883a 	mov	r4,zero
   16a90:	000f883a 	mov	r7,zero
   16a94:	0016b141 	jmpi	16b14 <__register_exitproc>

00016a98 <exit>:
   16a98:	defffe04 	addi	sp,sp,-8
   16a9c:	dc400015 	stw	r17,0(sp)
   16aa0:	000b883a 	mov	r5,zero
   16aa4:	2023883a 	mov	r17,r4
   16aa8:	dfc00115 	stw	ra,4(sp)
   16aac:	0016c840 	call	16c84 <__call_exitprocs>
   16ab0:	8809883a 	mov	r4,r17
   16ab4:	0016fcc0 	call	16fcc <_exit>

00016ab8 <memcmp>:
   16ab8:	31ffffc4 	addi	r7,r6,-1
   16abc:	3000061e 	bne	r6,zero,16ad8 <memcmp+0x20>
   16ac0:	00000a06 	br	16aec <memcmp+0x34>
   16ac4:	39ffffc4 	addi	r7,r7,-1
   16ac8:	00bfffc4 	movi	r2,-1
   16acc:	21000044 	addi	r4,r4,1
   16ad0:	29400044 	addi	r5,r5,1
   16ad4:	38800526 	beq	r7,r2,16aec <memcmp+0x34>
   16ad8:	20c00003 	ldbu	r3,0(r4)
   16adc:	28800003 	ldbu	r2,0(r5)
   16ae0:	18bff826 	beq	r3,r2,16ac4 <memcmp+0xc>
   16ae4:	1885c83a 	sub	r2,r3,r2
   16ae8:	f800283a 	ret
   16aec:	0005883a 	mov	r2,zero
   16af0:	f800283a 	ret

00016af4 <strlen>:
   16af4:	20800007 	ldb	r2,0(r4)
   16af8:	10000526 	beq	r2,zero,16b10 <strlen+0x1c>
   16afc:	2007883a 	mov	r3,r4
   16b00:	18c00044 	addi	r3,r3,1
   16b04:	18800007 	ldb	r2,0(r3)
   16b08:	103ffd1e 	bne	r2,zero,16b00 <strlen+0xc>
   16b0c:	1905c83a 	sub	r2,r3,r4
   16b10:	f800283a 	ret

00016b14 <__register_exitproc>:
   16b14:	defff904 	addi	sp,sp,-28
   16b18:	00800074 	movhi	r2,1
   16b1c:	109e2b04 	addi	r2,r2,30892
   16b20:	dc400115 	stw	r17,4(sp)
   16b24:	14400017 	ldw	r17,0(r2)
   16b28:	dc000015 	stw	r16,0(sp)
   16b2c:	dd400515 	stw	r21,20(sp)
   16b30:	8c000c17 	ldw	r16,48(r17)
   16b34:	dd000415 	stw	r20,16(sp)
   16b38:	dcc00315 	stw	r19,12(sp)
   16b3c:	dc800215 	stw	r18,8(sp)
   16b40:	dfc00615 	stw	ra,24(sp)
   16b44:	2025883a 	mov	r18,r4
   16b48:	282b883a 	mov	r21,r5
   16b4c:	3029883a 	mov	r20,r6
   16b50:	3827883a 	mov	r19,r7
   16b54:	80002626 	beq	r16,zero,16bf0 <__register_exitproc+0xdc>
   16b58:	81400117 	ldw	r5,4(r16)
   16b5c:	008007c4 	movi	r2,31
   16b60:	11403716 	blt	r2,r5,16c40 <__register_exitproc+0x12c>
   16b64:	90002026 	beq	r18,zero,16be8 <__register_exitproc+0xd4>
   16b68:	81802217 	ldw	r6,136(r16)
   16b6c:	30002926 	beq	r6,zero,16c14 <__register_exitproc+0x100>
   16b70:	81400117 	ldw	r5,4(r16)
   16b74:	00c00044 	movi	r3,1
   16b78:	31004017 	ldw	r4,256(r6)
   16b7c:	1946983a 	sll	r3,r3,r5
   16b80:	2945883a 	add	r2,r5,r5
   16b84:	1085883a 	add	r2,r2,r2
   16b88:	1185883a 	add	r2,r2,r6
   16b8c:	20c8b03a 	or	r4,r4,r3
   16b90:	14c02015 	stw	r19,128(r2)
   16b94:	15000015 	stw	r20,0(r2)
   16b98:	00800084 	movi	r2,2
   16b9c:	31004015 	stw	r4,256(r6)
   16ba0:	90801826 	beq	r18,r2,16c04 <__register_exitproc+0xf0>
   16ba4:	2945883a 	add	r2,r5,r5
   16ba8:	1085883a 	add	r2,r2,r2
   16bac:	1405883a 	add	r2,r2,r16
   16bb0:	28c00044 	addi	r3,r5,1
   16bb4:	0009883a 	mov	r4,zero
   16bb8:	15400215 	stw	r21,8(r2)
   16bbc:	80c00115 	stw	r3,4(r16)
   16bc0:	2005883a 	mov	r2,r4
   16bc4:	dfc00617 	ldw	ra,24(sp)
   16bc8:	dd400517 	ldw	r21,20(sp)
   16bcc:	dd000417 	ldw	r20,16(sp)
   16bd0:	dcc00317 	ldw	r19,12(sp)
   16bd4:	dc800217 	ldw	r18,8(sp)
   16bd8:	dc400117 	ldw	r17,4(sp)
   16bdc:	dc000017 	ldw	r16,0(sp)
   16be0:	dec00704 	addi	sp,sp,28
   16be4:	f800283a 	ret
   16be8:	81400117 	ldw	r5,4(r16)
   16bec:	003fed06 	br	16ba4 <__register_exitproc+0x90>
   16bf0:	00800074 	movhi	r2,1
   16bf4:	109e8f04 	addi	r2,r2,31292
   16bf8:	1021883a 	mov	r16,r2
   16bfc:	88800c15 	stw	r2,48(r17)
   16c00:	003fd506 	br	16b58 <__register_exitproc+0x44>
   16c04:	30804117 	ldw	r2,260(r6)
   16c08:	10c4b03a 	or	r2,r2,r3
   16c0c:	30804115 	stw	r2,260(r6)
   16c10:	003fe406 	br	16ba4 <__register_exitproc+0x90>
   16c14:	00800034 	movhi	r2,0
   16c18:	10800004 	addi	r2,r2,0
   16c1c:	10000b26 	beq	r2,zero,16c4c <__register_exitproc+0x138>
   16c20:	01004204 	movi	r4,264
   16c24:	103ee83a 	callr	r2
   16c28:	10000826 	beq	r2,zero,16c4c <__register_exitproc+0x138>
   16c2c:	100d883a 	mov	r6,r2
   16c30:	10004015 	stw	zero,256(r2)
   16c34:	10004115 	stw	zero,260(r2)
   16c38:	80802215 	stw	r2,136(r16)
   16c3c:	003fcc06 	br	16b70 <__register_exitproc+0x5c>
   16c40:	00800034 	movhi	r2,0
   16c44:	10800004 	addi	r2,r2,0
   16c48:	1000021e 	bne	r2,zero,16c54 <__register_exitproc+0x140>
   16c4c:	013fffc4 	movi	r4,-1
   16c50:	003fdb06 	br	16bc0 <__register_exitproc+0xac>
   16c54:	01002304 	movi	r4,140
   16c58:	103ee83a 	callr	r2
   16c5c:	1007883a 	mov	r3,r2
   16c60:	103ffa26 	beq	r2,zero,16c4c <__register_exitproc+0x138>
   16c64:	88800c17 	ldw	r2,48(r17)
   16c68:	1821883a 	mov	r16,r3
   16c6c:	18000115 	stw	zero,4(r3)
   16c70:	18800015 	stw	r2,0(r3)
   16c74:	88c00c15 	stw	r3,48(r17)
   16c78:	903fdb26 	beq	r18,zero,16be8 <__register_exitproc+0xd4>
   16c7c:	003fba06 	br	16b68 <__register_exitproc+0x54>

00016c80 <register_fini>:
   16c80:	f800283a 	ret

00016c84 <__call_exitprocs>:
   16c84:	defff304 	addi	sp,sp,-52
   16c88:	00800074 	movhi	r2,1
   16c8c:	109e2b04 	addi	r2,r2,30892
   16c90:	df000b15 	stw	fp,44(sp)
   16c94:	17000017 	ldw	fp,0(r2)
   16c98:	00800034 	movhi	r2,0
   16c9c:	10800004 	addi	r2,r2,0
   16ca0:	1005003a 	cmpeq	r2,r2,zero
   16ca4:	d8800215 	stw	r2,8(sp)
   16ca8:	e0800c04 	addi	r2,fp,48
   16cac:	dd800915 	stw	r22,36(sp)
   16cb0:	dd400815 	stw	r21,32(sp)
   16cb4:	dfc00c15 	stw	ra,48(sp)
   16cb8:	ddc00a15 	stw	r23,40(sp)
   16cbc:	dd000715 	stw	r20,28(sp)
   16cc0:	dcc00615 	stw	r19,24(sp)
   16cc4:	dc800515 	stw	r18,20(sp)
   16cc8:	dc400415 	stw	r17,16(sp)
   16ccc:	dc000315 	stw	r16,12(sp)
   16cd0:	282d883a 	mov	r22,r5
   16cd4:	d9000115 	stw	r4,4(sp)
   16cd8:	d8800015 	stw	r2,0(sp)
   16cdc:	282b003a 	cmpeq	r21,r5,zero
   16ce0:	e4400c17 	ldw	r17,48(fp)
   16ce4:	88001226 	beq	r17,zero,16d30 <__call_exitprocs+0xac>
   16ce8:	ddc00017 	ldw	r23,0(sp)
   16cec:	88800117 	ldw	r2,4(r17)
   16cf0:	8c802217 	ldw	r18,136(r17)
   16cf4:	143fffc4 	addi	r16,r2,-1
   16cf8:	80000b16 	blt	r16,zero,16d28 <__call_exitprocs+0xa4>
   16cfc:	9027003a 	cmpeq	r19,r18,zero
   16d00:	a800171e 	bne	r21,zero,16d60 <__call_exitprocs+0xdc>
   16d04:	9800051e 	bne	r19,zero,16d1c <__call_exitprocs+0x98>
   16d08:	8409883a 	add	r4,r16,r16
   16d0c:	2105883a 	add	r2,r4,r4
   16d10:	1485883a 	add	r2,r2,r18
   16d14:	10c02017 	ldw	r3,128(r2)
   16d18:	b0c01226 	beq	r22,r3,16d64 <__call_exitprocs+0xe0>
   16d1c:	843fffc4 	addi	r16,r16,-1
   16d20:	00bfffc4 	movi	r2,-1
   16d24:	80bff61e 	bne	r16,r2,16d00 <__call_exitprocs+0x7c>
   16d28:	d8800217 	ldw	r2,8(sp)
   16d2c:	10003226 	beq	r2,zero,16df8 <__call_exitprocs+0x174>
   16d30:	dfc00c17 	ldw	ra,48(sp)
   16d34:	df000b17 	ldw	fp,44(sp)
   16d38:	ddc00a17 	ldw	r23,40(sp)
   16d3c:	dd800917 	ldw	r22,36(sp)
   16d40:	dd400817 	ldw	r21,32(sp)
   16d44:	dd000717 	ldw	r20,28(sp)
   16d48:	dcc00617 	ldw	r19,24(sp)
   16d4c:	dc800517 	ldw	r18,20(sp)
   16d50:	dc400417 	ldw	r17,16(sp)
   16d54:	dc000317 	ldw	r16,12(sp)
   16d58:	dec00d04 	addi	sp,sp,52
   16d5c:	f800283a 	ret
   16d60:	8409883a 	add	r4,r16,r16
   16d64:	88c00117 	ldw	r3,4(r17)
   16d68:	2105883a 	add	r2,r4,r4
   16d6c:	1445883a 	add	r2,r2,r17
   16d70:	18ffffc4 	addi	r3,r3,-1
   16d74:	11800217 	ldw	r6,8(r2)
   16d78:	1c001826 	beq	r3,r16,16ddc <__call_exitprocs+0x158>
   16d7c:	10000215 	stw	zero,8(r2)
   16d80:	303fe626 	beq	r6,zero,16d1c <__call_exitprocs+0x98>
   16d84:	8d000117 	ldw	r20,4(r17)
   16d88:	9800121e 	bne	r19,zero,16dd4 <__call_exitprocs+0x150>
   16d8c:	00c00044 	movi	r3,1
   16d90:	1c06983a 	sll	r3,r3,r16
   16d94:	90804017 	ldw	r2,256(r18)
   16d98:	1884703a 	and	r2,r3,r2
   16d9c:	10000d26 	beq	r2,zero,16dd4 <__call_exitprocs+0x150>
   16da0:	90804117 	ldw	r2,260(r18)
   16da4:	1884703a 	and	r2,r3,r2
   16da8:	10000e1e 	bne	r2,zero,16de4 <__call_exitprocs+0x160>
   16dac:	2105883a 	add	r2,r4,r4
   16db0:	1485883a 	add	r2,r2,r18
   16db4:	11400017 	ldw	r5,0(r2)
   16db8:	d9000117 	ldw	r4,4(sp)
   16dbc:	303ee83a 	callr	r6
   16dc0:	88800117 	ldw	r2,4(r17)
   16dc4:	a0bfc61e 	bne	r20,r2,16ce0 <__call_exitprocs+0x5c>
   16dc8:	b8800017 	ldw	r2,0(r23)
   16dcc:	147fd326 	beq	r2,r17,16d1c <__call_exitprocs+0x98>
   16dd0:	003fc306 	br	16ce0 <__call_exitprocs+0x5c>
   16dd4:	303ee83a 	callr	r6
   16dd8:	003ff906 	br	16dc0 <__call_exitprocs+0x13c>
   16ddc:	8c000115 	stw	r16,4(r17)
   16de0:	003fe706 	br	16d80 <__call_exitprocs+0xfc>
   16de4:	2105883a 	add	r2,r4,r4
   16de8:	1485883a 	add	r2,r2,r18
   16dec:	11000017 	ldw	r4,0(r2)
   16df0:	303ee83a 	callr	r6
   16df4:	003ff206 	br	16dc0 <__call_exitprocs+0x13c>
   16df8:	88800117 	ldw	r2,4(r17)
   16dfc:	10000b1e 	bne	r2,zero,16e2c <__call_exitprocs+0x1a8>
   16e00:	89000017 	ldw	r4,0(r17)
   16e04:	20000a26 	beq	r4,zero,16e30 <__call_exitprocs+0x1ac>
   16e08:	b9000015 	stw	r4,0(r23)
   16e0c:	90000226 	beq	r18,zero,16e18 <__call_exitprocs+0x194>
   16e10:	9009883a 	mov	r4,r18
   16e14:	00000000 	call	0 <__alt_mem_onchip_ram-0x10000>
   16e18:	8809883a 	mov	r4,r17
   16e1c:	00000000 	call	0 <__alt_mem_onchip_ram-0x10000>
   16e20:	bc400017 	ldw	r17,0(r23)
   16e24:	883fb11e 	bne	r17,zero,16cec <__call_exitprocs+0x68>
   16e28:	003fc106 	br	16d30 <__call_exitprocs+0xac>
   16e2c:	89000017 	ldw	r4,0(r17)
   16e30:	882f883a 	mov	r23,r17
   16e34:	2023883a 	mov	r17,r4
   16e38:	883fac1e 	bne	r17,zero,16cec <__call_exitprocs+0x68>
   16e3c:	003fbc06 	br	16d30 <__call_exitprocs+0xac>

00016e40 <udivmodsi4>:
   16e40:	29001b2e 	bgeu	r5,r4,16eb0 <udivmodsi4+0x70>
   16e44:	28001a16 	blt	r5,zero,16eb0 <udivmodsi4+0x70>
   16e48:	00800044 	movi	r2,1
   16e4c:	0007883a 	mov	r3,zero
   16e50:	01c007c4 	movi	r7,31
   16e54:	00000306 	br	16e64 <udivmodsi4+0x24>
   16e58:	19c01326 	beq	r3,r7,16ea8 <udivmodsi4+0x68>
   16e5c:	18c00044 	addi	r3,r3,1
   16e60:	28000416 	blt	r5,zero,16e74 <udivmodsi4+0x34>
   16e64:	294b883a 	add	r5,r5,r5
   16e68:	1085883a 	add	r2,r2,r2
   16e6c:	293ffa36 	bltu	r5,r4,16e58 <udivmodsi4+0x18>
   16e70:	10000d26 	beq	r2,zero,16ea8 <udivmodsi4+0x68>
   16e74:	0007883a 	mov	r3,zero
   16e78:	21400236 	bltu	r4,r5,16e84 <udivmodsi4+0x44>
   16e7c:	2149c83a 	sub	r4,r4,r5
   16e80:	1886b03a 	or	r3,r3,r2
   16e84:	1004d07a 	srli	r2,r2,1
   16e88:	280ad07a 	srli	r5,r5,1
   16e8c:	103ffa1e 	bne	r2,zero,16e78 <udivmodsi4+0x38>
   16e90:	30000226 	beq	r6,zero,16e9c <udivmodsi4+0x5c>
   16e94:	2005883a 	mov	r2,r4
   16e98:	f800283a 	ret
   16e9c:	1809883a 	mov	r4,r3
   16ea0:	2005883a 	mov	r2,r4
   16ea4:	f800283a 	ret
   16ea8:	0007883a 	mov	r3,zero
   16eac:	003ff806 	br	16e90 <udivmodsi4+0x50>
   16eb0:	00800044 	movi	r2,1
   16eb4:	0007883a 	mov	r3,zero
   16eb8:	003fef06 	br	16e78 <udivmodsi4+0x38>

00016ebc <__divsi3>:
   16ebc:	defffe04 	addi	sp,sp,-8
   16ec0:	dc000015 	stw	r16,0(sp)
   16ec4:	dfc00115 	stw	ra,4(sp)
   16ec8:	0021883a 	mov	r16,zero
   16ecc:	20000c16 	blt	r4,zero,16f00 <__divsi3+0x44>
   16ed0:	000d883a 	mov	r6,zero
   16ed4:	28000e16 	blt	r5,zero,16f10 <__divsi3+0x54>
   16ed8:	0016e400 	call	16e40 <udivmodsi4>
   16edc:	1007883a 	mov	r3,r2
   16ee0:	8005003a 	cmpeq	r2,r16,zero
   16ee4:	1000011e 	bne	r2,zero,16eec <__divsi3+0x30>
   16ee8:	00c7c83a 	sub	r3,zero,r3
   16eec:	1805883a 	mov	r2,r3
   16ef0:	dfc00117 	ldw	ra,4(sp)
   16ef4:	dc000017 	ldw	r16,0(sp)
   16ef8:	dec00204 	addi	sp,sp,8
   16efc:	f800283a 	ret
   16f00:	0109c83a 	sub	r4,zero,r4
   16f04:	04000044 	movi	r16,1
   16f08:	000d883a 	mov	r6,zero
   16f0c:	283ff20e 	bge	r5,zero,16ed8 <__divsi3+0x1c>
   16f10:	014bc83a 	sub	r5,zero,r5
   16f14:	8021003a 	cmpeq	r16,r16,zero
   16f18:	003fef06 	br	16ed8 <__divsi3+0x1c>

00016f1c <__modsi3>:
   16f1c:	deffff04 	addi	sp,sp,-4
   16f20:	dfc00015 	stw	ra,0(sp)
   16f24:	01800044 	movi	r6,1
   16f28:	2807883a 	mov	r3,r5
   16f2c:	20000416 	blt	r4,zero,16f40 <__modsi3+0x24>
   16f30:	28000c16 	blt	r5,zero,16f64 <__modsi3+0x48>
   16f34:	dfc00017 	ldw	ra,0(sp)
   16f38:	dec00104 	addi	sp,sp,4
   16f3c:	0016e401 	jmpi	16e40 <udivmodsi4>
   16f40:	0109c83a 	sub	r4,zero,r4
   16f44:	28000b16 	blt	r5,zero,16f74 <__modsi3+0x58>
   16f48:	180b883a 	mov	r5,r3
   16f4c:	01800044 	movi	r6,1
   16f50:	0016e400 	call	16e40 <udivmodsi4>
   16f54:	0085c83a 	sub	r2,zero,r2
   16f58:	dfc00017 	ldw	ra,0(sp)
   16f5c:	dec00104 	addi	sp,sp,4
   16f60:	f800283a 	ret
   16f64:	014bc83a 	sub	r5,zero,r5
   16f68:	dfc00017 	ldw	ra,0(sp)
   16f6c:	dec00104 	addi	sp,sp,4
   16f70:	0016e401 	jmpi	16e40 <udivmodsi4>
   16f74:	0147c83a 	sub	r3,zero,r5
   16f78:	003ff306 	br	16f48 <__modsi3+0x2c>

00016f7c <__udivsi3>:
   16f7c:	000d883a 	mov	r6,zero
   16f80:	0016e401 	jmpi	16e40 <udivmodsi4>

00016f84 <__umodsi3>:
   16f84:	01800044 	movi	r6,1
   16f88:	0016e401 	jmpi	16e40 <udivmodsi4>

00016f8c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   16f8c:	defffd04 	addi	sp,sp,-12
   16f90:	df000215 	stw	fp,8(sp)
   16f94:	df000204 	addi	fp,sp,8
   16f98:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   16f9c:	e0bfff17 	ldw	r2,-4(fp)
   16fa0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   16fa4:	e0bffe17 	ldw	r2,-8(fp)
   16fa8:	1005003a 	cmpeq	r2,r2,zero
   16fac:	1000021e 	bne	r2,zero,16fb8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   16fb0:	002af070 	cmpltui	zero,zero,43969
   16fb4:	00000106 	br	16fbc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   16fb8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   16fbc:	e037883a 	mov	sp,fp
   16fc0:	df000017 	ldw	fp,0(sp)
   16fc4:	dec00104 	addi	sp,sp,4
   16fc8:	f800283a 	ret

00016fcc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   16fcc:	defffd04 	addi	sp,sp,-12
   16fd0:	dfc00215 	stw	ra,8(sp)
   16fd4:	df000115 	stw	fp,4(sp)
   16fd8:	df000104 	addi	fp,sp,4
   16fdc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   16fe0:	e13fff17 	ldw	r4,-4(fp)
   16fe4:	0016f8c0 	call	16f8c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   16fe8:	003fff06 	br	16fe8 <_exit+0x1c>
   16fec:	00016c80 	call	16c8 <__alt_mem_onchip_ram-0xe938>
